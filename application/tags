!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AboutCommand	composer.phar	/^class AboutCommand extends Command$/;"	c
AbstractAdapter	composer.phar	/^abstract class AbstractAdapter implements AdapterInterface$/;"	c
AbstractConstraint	composer.phar	/^abstract class AbstractConstraint implements ConstraintInterface$/;"	c
AbstractFindAdapter	composer.phar	/^abstract class AbstractFindAdapter extends AbstractAdapter$/;"	c
AbstractPipes	composer.phar	/^abstract class AbstractPipes implements PipesInterface$/;"	c
AbstractRetriever	composer.phar	/^abstract class AbstractRetriever implements UriRetrieverInterface$/;"	c
AccessDeniedException	composer.phar	/^class AccessDeniedException extends \\UnexpectedValueException$/;"	c
AdapterFailureException	composer.phar	/^class AdapterFailureException extends \\RuntimeException implements ExceptionInterface$/;"	c
AdapterInterface	composer.phar	/^interface AdapterInterface$/;"	i
AliasPackage	composer.phar	/^class AliasPackage extends BasePackage implements CompletePackageInterface$/;"	c
Application	composer.phar	/^class Application extends BaseApplication$/;"	c
Application	composer.phar	/^class Application$/;"	c
ApplicationDescription	composer.phar	/^class ApplicationDescription$/;"	c
ApplicationTester	composer.phar	/^class ApplicationTester$/;"	c
ArchivableFilesFinder	composer.phar	/^class ArchivableFilesFinder extends \\FilterIterator$/;"	c
ArchiveCommand	composer.phar	/^class ArchiveCommand extends Command$/;"	c
ArchiveDownloader	composer.phar	/^abstract class ArchiveDownloader extends FileDownloader$/;"	c
ArchiveManager	composer.phar	/^class ArchiveManager$/;"	c
ArchiverInterface	composer.phar	/^interface ArchiverInterface$/;"	i
ArgvInput	composer.phar	/^class ArgvInput extends Input$/;"	c
ArrayDumper	composer.phar	/^class ArrayDumper$/;"	c
ArrayInput	composer.phar	/^class ArrayInput extends Input$/;"	c
ArrayLoader	composer.phar	/^class ArrayLoader implements LoaderInterface$/;"	c
ArrayRepository	composer.phar	/^class ArrayRepository implements RepositoryInterface$/;"	c
ArtifactRepository	composer.phar	/^class ArtifactRepository extends ArrayRepository$/;"	c
AuthHelper	composer.phar	/^class AuthHelper$/;"	c
AutoloadGenerator	composer.phar	/^class AutoloadGenerator$/;"	c
BaseChannelReader	composer.phar	/^abstract class BaseChannelReader$/;"	c
BaseExcludeFilter	composer.phar	/^abstract class BaseExcludeFilter$/;"	c
BaseIO	composer.phar	/^abstract class BaseIO implements IOInterface$/;"	c
BasePackage	composer.phar	/^abstract class BasePackage implements PackageInterface$/;"	c
BsdFindAdapter	composer.phar	/^class BsdFindAdapter extends AbstractFindAdapter$/;"	c
BufferIO	composer.phar	/^class BufferIO extends ConsoleIO$/;"	c
BufferedOutput	composer.phar	/^class BufferedOutput extends Output$/;"	c
COMPOSER_DEV_WARNING_TIME	composer.phar	/^define('COMPOSER_DEV_WARNING_TIME', 1452033218);$/;"	d
Cache	composer.phar	/^class Cache$/;"	c
ChangeReportInterface	composer.phar	/^interface ChangeReportInterface$/;"	i
ChannelInfo	composer.phar	/^class ChannelInfo$/;"	c
ChannelReader	composer.phar	/^class ChannelReader extends BaseChannelReader$/;"	c
ChannelRest10Reader	composer.phar	/^class ChannelRest10Reader extends BaseChannelReader$/;"	c
ChannelRest11Reader	composer.phar	/^class ChannelRest11Reader extends BaseChannelReader$/;"	c
ChoiceQuestion	composer.phar	/^class ChoiceQuestion extends Question$/;"	c
ClassLoader	composer.phar	/^class ClassLoader$/;"	c
ClassMapGenerator	composer.phar	/^class ClassMapGenerator$/;"	c
ClearCacheCommand	composer.phar	/^class ClearCacheCommand extends Command$/;"	c
CliPrompt	composer.phar	/^class CliPrompt$/;"	c
CollectionConstraint	composer.phar	/^class CollectionConstraint extends Constraint$/;"	c
Command	composer.phar	/^abstract class Command extends BaseCommand$/;"	c
Command	composer.phar	/^class Command$/;"	c
CommandEvent	composer.phar	/^class CommandEvent extends Event$/;"	c
CommandTester	composer.phar	/^class CommandTester$/;"	c
Comparator	composer.phar	/^class Comparator$/;"	c
CompletePackage	composer.phar	/^class CompletePackage extends Package implements CompletePackageInterface$/;"	c
CompletePackageInterface	composer.phar	/^interface CompletePackageInterface extends PackageInterface$/;"	i
Composer	composer.phar	/^class Composer$/;"	c
ComposerAutoloaderInit	composer.phar	/^class ComposerAutoloaderInit$suffix$/;"	c
ComposerAutoloaderInitComposerPhar1446849218	composer.phar	/^class ComposerAutoloaderInitComposerPhar1446849218$/;"	c
ComposerExcludeFilter	composer.phar	/^class ComposerExcludeFilter extends BaseExcludeFilter$/;"	c
ComposerMirror	composer.phar	/^class ComposerMirror$/;"	c
ComposerRepository	composer.phar	/^class ComposerRepository extends ArrayRepository$/;"	c
CompositeRepository	composer.phar	/^class CompositeRepository implements RepositoryInterface$/;"	c
Config	composer.phar	/^class Config$/;"	c
ConfigCommand	composer.phar	/^class ConfigCommand extends Command$/;"	c
ConfigSourceInterface	composer.phar	/^interface ConfigSourceInterface$/;"	i
ConfigValidator	composer.phar	/^class ConfigValidator$/;"	c
ConfirmationQuestion	composer.phar	/^class ConfirmationQuestion extends Question$/;"	c
ConsoleCommandEvent	composer.phar	/^class ConsoleCommandEvent extends ConsoleEvent$/;"	c
ConsoleEvent	composer.phar	/^class ConsoleEvent extends Event$/;"	c
ConsoleEvents	composer.phar	/^final class ConsoleEvents$/;"	c
ConsoleExceptionEvent	composer.phar	/^class ConsoleExceptionEvent extends ConsoleEvent$/;"	c
ConsoleIO	composer.phar	/^class ConsoleIO extends BaseIO$/;"	c
ConsoleLogger	composer.phar	/^class ConsoleLogger extends AbstractLogger$/;"	c
ConsoleOutput	composer.phar	/^class ConsoleOutput extends StreamOutput implements ConsoleOutputInterface$/;"	c
ConsoleOutputInterface	composer.phar	/^interface ConsoleOutputInterface extends OutputInterface$/;"	i
ConsoleTerminateEvent	composer.phar	/^class ConsoleTerminateEvent extends ConsoleEvent$/;"	c
Constraint	composer.phar	/^abstract class Constraint implements ConstraintInterface$/;"	c
Constraint	composer.phar	/^class Constraint implements ConstraintInterface$/;"	c
ConstraintInterface	composer.phar	/^interface ConstraintInterface$/;"	i
CreateProjectCommand	composer.phar	/^class CreateProjectCommand extends Command$/;"	c
Curl	composer.phar	/^class Curl extends AbstractRetriever$/;"	c
CustomFilterIterator	composer.phar	/^class CustomFilterIterator extends FilterIterator$/;"	c
DateComparator	composer.phar	/^class DateComparator extends Comparator$/;"	c
DateRangeFilterIterator	composer.phar	/^class DateRangeFilterIterator extends FilterIterator$/;"	c
DebugFormatterHelper	composer.phar	/^class DebugFormatterHelper extends Helper$/;"	c
Decisions	composer.phar	/^class Decisions implements \\Iterator, \\Countable$/;"	c
DefaultPolicy	composer.phar	/^class DefaultPolicy implements PolicyInterface$/;"	c
DependencyConstraint	composer.phar	/^class DependencyConstraint$/;"	c
DependencyInfo	composer.phar	/^class DependencyInfo$/;"	c
DependsCommand	composer.phar	/^class DependsCommand extends Command$/;"	c
DepthRangeFilterIterator	composer.phar	/^class DepthRangeFilterIterator extends FilterIterator$/;"	c
Descriptor	composer.phar	/^abstract class Descriptor implements DescriptorInterface$/;"	c
DescriptorHelper	composer.phar	/^class DescriptorHelper extends Helper$/;"	c
DescriptorInterface	composer.phar	/^interface DescriptorInterface$/;"	i
DiagnoseCommand	composer.phar	/^class DiagnoseCommand extends Command$/;"	c
DialogHelper	composer.phar	/^class DialogHelper extends InputAwareHelper$/;"	c
DownloadManager	composer.phar	/^class DownloadManager$/;"	c
DownloaderInterface	composer.phar	/^interface DownloaderInterface$/;"	i
DumpAutoloadCommand	composer.phar	/^class DumpAutoloadCommand extends Command$/;"	c
EOF	composer.phar	/^$EOF = 1;$/;"	v
EOF	composer.phar	/^private $EOF = 1;$/;"	v
EmptyConstraint	composer.phar	/^class EmptyConstraint extends SemverEmptyConstraint implements LinkConstraintInterface$/;"	c
EmptyConstraint	composer.phar	/^class EmptyConstraint implements ConstraintInterface$/;"	c
EnumConstraint	composer.phar	/^class EnumConstraint extends Constraint$/;"	c
ErrorHandler	composer.phar	/^class ErrorHandler$/;"	c
Event	composer.phar	/^class Event extends BaseEvent$/;"	c
Event	composer.phar	/^class Event$/;"	c
EventDispatcher	composer.phar	/^class EventDispatcher$/;"	c
EventSubscriberInterface	composer.phar	/^interface EventSubscriberInterface$/;"	i
ExceptionInterface	composer.phar	/^interface ExceptionInterface$/;"	i
ExcludeDirectoryFilterIterator	composer.phar	/^class ExcludeDirectoryFilterIterator extends FilterIterator implements \\RecursiveIterator$/;"	c
ExecutableFinder	composer.phar	/^class ExecutableFinder$/;"	c
Expression	composer.phar	/^class Expression implements ValueInterface$/;"	c
Factory	composer.phar	/^class Factory$/;"	c
FileDownloader	composer.phar	/^class FileDownloader implements DownloaderInterface$/;"	c
FileGetContents	composer.phar	/^class FileGetContents extends AbstractRetriever$/;"	c
FileNotFoundException	composer.phar	/^class FileNotFoundException extends IOException$/;"	c
FilePathsIterator	composer.phar	/^class FilePathsIterator extends \\ArrayIterator$/;"	c
FileTypeFilterIterator	composer.phar	/^class FileTypeFilterIterator extends FilterIterator$/;"	c
FilecontentFilterIterator	composer.phar	/^class FilecontentFilterIterator extends MultiplePcreFilterIterator$/;"	c
FilenameFilterIterator	composer.phar	/^class FilenameFilterIterator extends MultiplePcreFilterIterator$/;"	c
Filesystem	composer.phar	/^class Filesystem$/;"	c
FilesystemException	composer.phar	/^class FilesystemException extends \\Exception$/;"	c
FilesystemRepository	composer.phar	/^class FilesystemRepository extends WritableArrayRepository$/;"	c
FilterIterator	composer.phar	/^abstract class FilterIterator extends \\FilterIterator$/;"	c
Finder	composer.phar	/^class Finder implements \\IteratorAggregate, \\Countable$/;"	c
FormatConstraint	composer.phar	/^class FormatConstraint extends Constraint$/;"	c
FormatterHelper	composer.phar	/^class FormatterHelper extends Helper$/;"	c
Git	composer.phar	/^class Git$/;"	c
GitBitbucketDriver	composer.phar	/^class GitBitbucketDriver extends VcsDriver implements VcsDriverInterface$/;"	c
GitDownloader	composer.phar	/^class GitDownloader extends VcsDownloader$/;"	c
GitDriver	composer.phar	/^class GitDriver extends VcsDriver$/;"	c
GitExcludeFilter	composer.phar	/^class GitExcludeFilter extends BaseExcludeFilter$/;"	c
GitHub	composer.phar	/^class GitHub$/;"	c
GitHubDriver	composer.phar	/^class GitHubDriver extends VcsDriver$/;"	c
Glob	composer.phar	/^class Glob implements ValueInterface$/;"	c
Glob	composer.phar	/^class Glob$/;"	c
GlobalCommand	composer.phar	/^class GlobalCommand extends Command$/;"	c
GnuFindAdapter	composer.phar	/^class GnuFindAdapter extends AbstractFindAdapter$/;"	c
GzipDownloader	composer.phar	/^class GzipDownloader extends ArchiveDownloader$/;"	c
HelpCommand	composer.phar	/^class HelpCommand extends Command$/;"	c
Helper	composer.phar	/^abstract class Helper implements HelperInterface$/;"	c
HelperInterface	composer.phar	/^interface HelperInterface$/;"	i
HelperSet	composer.phar	/^class HelperSet implements \\IteratorAggregate$/;"	c
HgBitbucketDriver	composer.phar	/^class HgBitbucketDriver extends VcsDriver$/;"	c
HgDownloader	composer.phar	/^class HgDownloader extends VcsDownloader$/;"	c
HgDriver	composer.phar	/^class HgDriver extends VcsDriver$/;"	c
HgExcludeFilter	composer.phar	/^class HgExcludeFilter extends BaseExcludeFilter$/;"	c
HomeCommand	composer.phar	/^class HomeCommand extends Command$/;"	c
HtmlOutputFormatter	composer.phar	/^class HtmlOutputFormatter extends OutputFormatter$/;"	c
IOException	composer.phar	/^class IOException extends \\RuntimeException implements IOExceptionInterface$/;"	c
IOExceptionInterface	composer.phar	/^interface IOExceptionInterface extends ExceptionInterface$/;"	i
IOInterface	composer.phar	/^interface IOInterface$/;"	i
InitCommand	composer.phar	/^class InitCommand extends Command$/;"	c
Input	composer.phar	/^abstract class Input implements InputInterface$/;"	c
InputArgument	composer.phar	/^class InputArgument$/;"	c
InputAwareHelper	composer.phar	/^abstract class InputAwareHelper extends Helper implements InputAwareInterface$/;"	c
InputAwareInterface	composer.phar	/^interface InputAwareInterface$/;"	i
InputDefinition	composer.phar	/^class InputDefinition$/;"	c
InputInterface	composer.phar	/^interface InputInterface$/;"	i
InputOption	composer.phar	/^class InputOption$/;"	c
InstallCommand	composer.phar	/^class InstallCommand extends Command$/;"	c
InstallOperation	composer.phar	/^class InstallOperation extends SolverOperation$/;"	c
InstallationManager	composer.phar	/^class InstallationManager$/;"	c
InstalledArrayRepository	composer.phar	/^class InstalledArrayRepository extends WritableArrayRepository implements InstalledRepositoryInterface$/;"	c
InstalledFilesystemRepository	composer.phar	/^class InstalledFilesystemRepository extends FilesystemRepository implements InstalledRepositoryInterface$/;"	c
InstalledRepositoryInterface	composer.phar	/^interface InstalledRepositoryInterface extends WritableRepositoryInterface$/;"	i
Installer	composer.phar	/^class Installer$/;"	c
InstallerEvent	composer.phar	/^class InstallerEvent extends Event$/;"	c
InstallerEvents	composer.phar	/^class InstallerEvents$/;"	c
InstallerInterface	composer.phar	/^interface InstallerInterface$/;"	i
InvalidArgumentException	composer.phar	/^class InvalidArgumentException extends \\InvalidArgumentException implements ExceptionInterface$/;"	c
InvalidArgumentException	composer.phar	/^class InvalidArgumentException extends \\InvalidArgumentException$/;"	c
InvalidPackageException	composer.phar	/^class InvalidPackageException extends \\Exception$/;"	c
InvalidRepositoryException	composer.phar	/^class InvalidRepositoryException extends \\Exception$/;"	c
InvalidSchemaMediaTypeException	composer.phar	/^class InvalidSchemaMediaTypeException extends \\RuntimeException$/;"	c
InvalidSourceUriException	composer.phar	/^class InvalidSourceUriException extends InvalidArgumentException$/;"	c
JSON_STRING	composer.phar	/^private static $JSON_STRING;$/;"	v
JSON_VALUE	composer.phar	/^private static $JSON_VALUE;$/;"	v
JsonConfigSource	composer.phar	/^class JsonConfigSource implements ConfigSourceInterface$/;"	c
JsonDecodingException	composer.phar	/^class JsonDecodingException extends \\RuntimeException$/;"	c
JsonDescriptor	composer.phar	/^class JsonDescriptor extends Descriptor$/;"	c
JsonFile	composer.phar	/^class JsonFile$/;"	c
JsonFormatter	composer.phar	/^class JsonFormatter$/;"	c
JsonLoader	composer.phar	/^class JsonLoader$/;"	c
JsonManipulator	composer.phar	/^class JsonManipulator$/;"	c
JsonParser	composer.phar	/^class JsonParser$/;"	c
JsonValidationException	composer.phar	/^class JsonValidationException extends Exception$/;"	c
Lexer	composer.phar	/^class Lexer$/;"	c
LibraryInstaller	composer.phar	/^class LibraryInstaller implements InstallerInterface$/;"	c
LicensesCommand	composer.phar	/^class LicensesCommand extends Command$/;"	c
Link	composer.phar	/^class Link$/;"	c
LinkConstraintInterface	composer.phar	/^interface LinkConstraintInterface extends ConstraintInterface$/;"	i
ListCommand	composer.phar	/^class ListCommand extends Command$/;"	c
LoaderInterface	composer.phar	/^interface LoaderInterface$/;"	i
LockHandler	composer.phar	/^class LockHandler$/;"	c
Locker	composer.phar	/^class Locker$/;"	c
LogicException	composer.phar	/^class LogicException extends \\LogicException implements ExceptionInterface$/;"	c
MarkAliasInstalledOperation	composer.phar	/^class MarkAliasInstalledOperation extends SolverOperation$/;"	c
MarkAliasUninstalledOperation	composer.phar	/^class MarkAliasUninstalledOperation extends SolverOperation$/;"	c
MarkdownDescriptor	composer.phar	/^class MarkdownDescriptor extends Descriptor$/;"	c
MetapackageInstaller	composer.phar	/^class MetapackageInstaller implements InstallerInterface$/;"	c
MultiConstraint	composer.phar	/^class MultiConstraint extends SemverMultiConstraint implements LinkConstraintInterface$/;"	c
MultiConstraint	composer.phar	/^class MultiConstraint implements ConstraintInterface$/;"	c
MultiplePcreFilterIterator	composer.phar	/^abstract class MultiplePcreFilterIterator extends FilterIterator$/;"	c
NoProxyPattern	composer.phar	/^class NoProxyPattern$/;"	c
NoopInstaller	composer.phar	/^class NoopInstaller implements InstallerInterface$/;"	c
NullIO	composer.phar	/^class NullIO extends BaseIO$/;"	c
NullOutput	composer.phar	/^class NullOutput implements OutputInterface$/;"	c
NumberComparator	composer.phar	/^class NumberComparator extends Comparator$/;"	c
NumberConstraint	composer.phar	/^class NumberConstraint extends Constraint$/;"	c
ObjectConstraint	composer.phar	/^class ObjectConstraint extends Constraint$/;"	c
OperationInterface	composer.phar	/^interface OperationInterface$/;"	i
OperationNotPermitedException	composer.phar	/^class OperationNotPermitedException extends AdapterFailureException$/;"	c
Output	composer.phar	/^abstract class Output implements OutputInterface$/;"	c
OutputFormatter	composer.phar	/^class OutputFormatter implements OutputFormatterInterface$/;"	c
OutputFormatterInterface	composer.phar	/^interface OutputFormatterInterface$/;"	i
OutputFormatterStyle	composer.phar	/^class OutputFormatterStyle implements OutputFormatterStyleInterface$/;"	c
OutputFormatterStyleInterface	composer.phar	/^interface OutputFormatterStyleInterface$/;"	i
OutputFormatterStyleStack	composer.phar	/^class OutputFormatterStyleStack$/;"	c
OutputInterface	composer.phar	/^interface OutputInterface$/;"	i
OutputStyle	composer.phar	/^abstract class OutputStyle implements OutputInterface, StyleInterface$/;"	c
Package	composer.phar	/^class Package extends BasePackage$/;"	c
PackageDependencyParser	composer.phar	/^class PackageDependencyParser$/;"	c
PackageEvent	composer.phar	/^class PackageEvent extends BasePackageEvent$/;"	c
PackageEvent	composer.phar	/^class PackageEvent extends InstallerEvent$/;"	c
PackageEvents	composer.phar	/^class PackageEvents$/;"	c
PackageInfo	composer.phar	/^class PackageInfo$/;"	c
PackageInterface	composer.phar	/^interface PackageInterface$/;"	i
PackageRepository	composer.phar	/^class PackageRepository extends ArrayRepository$/;"	c
ParsingException	composer.phar	/^class ParsingException extends \\Exception$/;"	c
PathDownloader	composer.phar	/^class PathDownloader extends FileDownloader$/;"	c
PathFilterIterator	composer.phar	/^class PathFilterIterator extends MultiplePcreFilterIterator$/;"	c
PathRepository	composer.phar	/^class PathRepository extends ArrayRepository$/;"	c
PearInstaller	composer.phar	/^class PearInstaller extends LibraryInstaller$/;"	c
PearPackageExtractor	composer.phar	/^class PearPackageExtractor$/;"	c
PearRepository	composer.phar	/^class PearRepository extends ArrayRepository$/;"	c
Perforce	composer.phar	/^class Perforce$/;"	c
PerforceDownloader	composer.phar	/^class PerforceDownloader extends VcsDownloader$/;"	c
PerforceDriver	composer.phar	/^class PerforceDriver extends VcsDriver$/;"	c
PharArchiver	composer.phar	/^class PharArchiver implements ArchiverInterface$/;"	c
PharDownloader	composer.phar	/^class PharDownloader extends ArchiveDownloader$/;"	c
PhpAdapter	composer.phar	/^class PhpAdapter extends AbstractAdapter$/;"	c
PhpExecutableFinder	composer.phar	/^class PhpExecutableFinder$/;"	c
PhpProcess	composer.phar	/^class PhpProcess extends Process$/;"	c
PipesInterface	composer.phar	/^interface PipesInterface$/;"	i
PlatformRepository	composer.phar	/^class PlatformRepository extends ArrayRepository$/;"	c
PluginEvents	composer.phar	/^class PluginEvents$/;"	c
PluginInstaller	composer.phar	/^class PluginInstaller extends LibraryInstaller$/;"	c
PluginInterface	composer.phar	/^interface PluginInterface$/;"	i
PluginManager	composer.phar	/^class PluginManager$/;"	c
PolicyInterface	composer.phar	/^interface PolicyInterface$/;"	i
Pool	composer.phar	/^class Pool implements \\Countable$/;"	c
PreFileDownloadEvent	composer.phar	/^class PreFileDownloadEvent extends Event$/;"	c
PredefinedArray	composer.phar	/^class PredefinedArray extends AbstractRetriever$/;"	c
Problem	composer.phar	/^class Problem$/;"	c
Process	composer.phar	/^class Process$/;"	c
ProcessBuilder	composer.phar	/^class ProcessBuilder$/;"	c
ProcessExecutor	composer.phar	/^class ProcessExecutor$/;"	c
ProcessFailedException	composer.phar	/^class ProcessFailedException extends RuntimeException$/;"	c
ProcessHelper	composer.phar	/^class ProcessHelper extends Helper$/;"	c
ProcessTimedOutException	composer.phar	/^class ProcessTimedOutException extends RuntimeException$/;"	c
ProcessUtils	composer.phar	/^class ProcessUtils$/;"	c
ProgressBar	composer.phar	/^class ProgressBar$/;"	c
ProgressHelper	composer.phar	/^class ProgressHelper extends Helper$/;"	c
ProjectInstaller	composer.phar	/^class ProjectInstaller implements InstallerInterface$/;"	c
Question	composer.phar	/^class Question$/;"	c
QuestionHelper	composer.phar	/^class QuestionHelper extends Helper$/;"	c
RECURSE_ARRAYS	composer.phar	/^private static $RECURSE_ARRAYS;$/;"	v
RECURSE_BLOCKS	composer.phar	/^private static $RECURSE_BLOCKS;$/;"	v
RarDownloader	composer.phar	/^class RarDownloader extends ArchiveDownloader$/;"	c
RecursiveDirectoryIterator	composer.phar	/^class RecursiveDirectoryIterator extends \\RecursiveDirectoryIterator$/;"	c
RefResolver	composer.phar	/^class RefResolver$/;"	c
Regex	composer.phar	/^class Regex implements ValueInterface$/;"	c
ReleaseInfo	composer.phar	/^class ReleaseInfo$/;"	c
RemoteFilesystem	composer.phar	/^class RemoteFilesystem$/;"	c
RemoveCommand	composer.phar	/^class RemoveCommand extends Command$/;"	c
RepositoryInterface	composer.phar	/^interface RepositoryInterface extends \\Countable$/;"	i
RepositoryManager	composer.phar	/^class RepositoryManager$/;"	c
RepositorySecurityException	composer.phar	/^class RepositorySecurityException extends \\Exception$/;"	c
Request	composer.phar	/^class Request$/;"	c
RequireCommand	composer.phar	/^class RequireCommand extends InitCommand$/;"	c
ResourceNotFoundException	composer.phar	/^class ResourceNotFoundException extends \\RuntimeException$/;"	c
RootAliasPackage	composer.phar	/^class RootAliasPackage extends AliasPackage implements RootPackageInterface$/;"	c
RootPackage	composer.phar	/^class RootPackage extends CompletePackage implements RootPackageInterface$/;"	c
RootPackageInterface	composer.phar	/^interface RootPackageInterface extends CompletePackageInterface$/;"	i
RootPackageLoader	composer.phar	/^class RootPackageLoader extends ArrayLoader$/;"	c
Rule	composer.phar	/^class Rule$/;"	c
RuleSet	composer.phar	/^class RuleSet implements \\IteratorAggregate, \\Countable$/;"	c
RuleSetGenerator	composer.phar	/^class RuleSetGenerator$/;"	c
RuleSetIterator	composer.phar	/^class RuleSetIterator implements \\Iterator$/;"	c
RuleWatchChain	composer.phar	/^class RuleWatchChain extends \\SplDoublyLinkedList$/;"	c
RuleWatchGraph	composer.phar	/^class RuleWatchGraph$/;"	c
RuleWatchNode	composer.phar	/^class RuleWatchNode$/;"	c
RunScriptCommand	composer.phar	/^class RunScriptCommand extends Command$/;"	c
RuntimeException	composer.phar	/^class RuntimeException extends \\RuntimeException implements ExceptionInterface$/;"	c
SchemaConstraint	composer.phar	/^class SchemaConstraint extends Constraint$/;"	c
ScriptAliasCommand	composer.phar	/^class ScriptAliasCommand extends Command$/;"	c
ScriptEvents	composer.phar	/^class ScriptEvents$/;"	c
SearchCommand	composer.phar	/^class SearchCommand extends Command$/;"	c
SelfUpdateCommand	composer.phar	/^class SelfUpdateCommand extends Command$/;"	c
Semver	composer.phar	/^class Semver$/;"	c
Shell	composer.phar	/^class Shell$/;"	c
ShellCommandFailureException	composer.phar	/^class ShellCommandFailureException extends AdapterFailureException$/;"	c
ShowCommand	composer.phar	/^class ShowCommand extends Command$/;"	c
SizeRangeFilterIterator	composer.phar	/^class SizeRangeFilterIterator extends FilterIterator$/;"	c
Solver	composer.phar	/^class Solver$/;"	c
SolverBugException	composer.phar	/^class SolverBugException extends \\RuntimeException$/;"	c
SolverOperation	composer.phar	/^abstract class SolverOperation implements OperationInterface$/;"	c
SolverProblemsException	composer.phar	/^class SolverProblemsException extends \\RuntimeException$/;"	c
SortableIterator	composer.phar	/^class SortableIterator implements \\IteratorAggregate$/;"	c
SpdxLicense	composer.phar	/^class SpdxLicense extends SpdxLicenses$/;"	c
SpdxLicenses	composer.phar	/^class SpdxLicenses$/;"	c
SpecificConstraint	composer.phar	/^abstract class SpecificConstraint extends AbstractConstraint implements LinkConstraintInterface$/;"	c
SplFileInfo	composer.phar	/^class SplFileInfo extends \\SplFileInfo$/;"	c
StatusCommand	composer.phar	/^class StatusCommand extends Command$/;"	c
StreamContextFactory	composer.phar	/^final class StreamContextFactory$/;"	c
StreamOutput	composer.phar	/^class StreamOutput extends Output$/;"	c
StringConstraint	composer.phar	/^class StringConstraint extends Constraint$/;"	c
StringInput	composer.phar	/^class StringInput extends ArgvInput$/;"	c
StyleInterface	composer.phar	/^interface StyleInterface$/;"	i
SuggestsCommand	composer.phar	/^class SuggestsCommand extends Command$/;"	c
Svn	composer.phar	/^class Svn$/;"	c
SvnDownloader	composer.phar	/^class SvnDownloader extends VcsDownloader$/;"	c
SvnDriver	composer.phar	/^class SvnDriver extends VcsDriver$/;"	c
SymfonyQuestionHelper	composer.phar	/^class SymfonyQuestionHelper extends QuestionHelper$/;"	c
SymfonyStyle	composer.phar	/^class SymfonyStyle extends OutputStyle$/;"	c
TERROR	composer.phar	/^$TERROR = 2;$/;"	v
Table	composer.phar	/^class Table$/;"	c
TableCell	composer.phar	/^class TableCell$/;"	c
TableHelper	composer.phar	/^class TableHelper extends Helper$/;"	c
TableSeparator	composer.phar	/^class TableSeparator extends TableCell$/;"	c
TableStyle	composer.phar	/^class TableStyle$/;"	c
TarDownloader	composer.phar	/^class TarDownloader extends ArchiveDownloader$/;"	c
TextDescriptor	composer.phar	/^class TextDescriptor extends Descriptor$/;"	c
Transaction	composer.phar	/^class Transaction$/;"	c
TransportException	composer.phar	/^class TransportException extends \\RuntimeException$/;"	c
TypeConstraint	composer.phar	/^class TypeConstraint extends Constraint$/;"	c
Undefined	composer.phar	/^class Undefined$/;"	c
UndefinedConstraint	composer.phar	/^class UndefinedConstraint extends Constraint$/;"	c
UninstallOperation	composer.phar	/^class UninstallOperation extends SolverOperation$/;"	c
UnixPipes	composer.phar	/^class UnixPipes extends AbstractPipes$/;"	c
UpdateCommand	composer.phar	/^class UpdateCommand extends Command$/;"	c
UpdateOperation	composer.phar	/^class UpdateOperation extends SolverOperation$/;"	c
UriResolver	composer.phar	/^class UriResolver$/;"	c
UriResolverException	composer.phar	/^class UriResolverException extends \\RuntimeException$/;"	c
UriRetriever	composer.phar	/^class UriRetriever$/;"	c
UriRetrieverInterface	composer.phar	/^interface UriRetrieverInterface$/;"	i
ValidateCommand	composer.phar	/^class ValidateCommand extends Command$/;"	c
ValidatingArrayLoader	composer.phar	/^class ValidatingArrayLoader implements LoaderInterface$/;"	c
Validator	composer.phar	/^class Validator extends Constraint$/;"	c
ValueInterface	composer.phar	/^interface ValueInterface$/;"	i
VcsDownloader	composer.phar	/^abstract class VcsDownloader implements DownloaderInterface, ChangeReportInterface$/;"	c
VcsDriver	composer.phar	/^abstract class VcsDriver implements VcsDriverInterface$/;"	c
VcsDriverInterface	composer.phar	/^interface VcsDriverInterface$/;"	i
VcsRepository	composer.phar	/^class VcsRepository extends ArrayRepository$/;"	c
VersionConstraint	composer.phar	/^class VersionConstraint extends Constraint implements LinkConstraintInterface$/;"	c
VersionGuesser	composer.phar	/^class VersionGuesser$/;"	c
VersionParser	composer.phar	/^class VersionParser extends SemverVersionParser$/;"	c
VersionParser	composer.phar	/^class VersionParser$/;"	c
VersionSelector	composer.phar	/^class VersionSelector$/;"	c
WindowsPipes	composer.phar	/^class WindowsPipes extends AbstractPipes$/;"	c
WritableArrayRepository	composer.phar	/^class WritableArrayRepository extends ArrayRepository implements WritableRepositoryInterface$/;"	c
WritableRepositoryInterface	composer.phar	/^interface WritableRepositoryInterface extends RepositoryInterface$/;"	i
XmlDescriptor	composer.phar	/^class XmlDescriptor extends Descriptor$/;"	c
ZipDownloader	composer.phar	/^class ZipDownloader extends ArchiveDownloader$/;"	c
__call	composer.phar	/^public function __call($name, array $arguments)$/;"	f
__clone	composer.phar	/^public function __clone()$/;"	f
__construct	composer.phar	/^private function __construct()$/;"	f
__construct	composer.phar	/^protected function __construct(RemoteFilesystem $rfs)$/;"	f
__construct	composer.phar	/^public function __construct($/;"	f
__construct	composer.phar	/^public function __construct($channelName, $packageName, $license, $shortDescription, $description, $releases)$/;"	f
__construct	composer.phar	/^public function __construct($checkMode = self::CHECK_MODE_NORMAL, UriRetriever $uriRetriever = null)$/;"	f
__construct	composer.phar	/^public function __construct($code = JSON_ERROR_NONE, \\Exception $previous = null)$/;"	f
__construct	composer.phar	/^public function __construct($commandline, $cwd = null, array $env = null, $input = null, $timeout = 60, array $options = array())$/;"	f
__construct	composer.phar	/^public function __construct($contents)$/;"	f
__construct	composer.phar	/^public function __construct($decorated = false, array $styles = array())$/;"	f
__construct	composer.phar	/^public function __construct($disableOutput, $input)$/;"	f
__construct	composer.phar	/^public function __construct($eventName, Composer $composer, IOInterface $io, $devMode, PolicyInterface $policy, Pool $pool, CompositeRepository $installedRepo, Request $request, array $operations = array())$/;"	f
__construct	composer.phar	/^public function __construct($eventName, Composer $composer, IOInterface $io, $devMode, PolicyInterface $policy, Pool $pool, CompositeRepository $installedRepo, Request $request, array $operations, OperationInterface $operation)$/;"	f
__construct	composer.phar	/^public function __construct($expr)$/;"	f
__construct	composer.phar	/^public function __construct($file)$/;"	f
__construct	composer.phar	/^public function __construct($file, $relativePath, $relativePathname)$/;"	f
__construct	composer.phar	/^public function __construct($foreground = null, $background = null, array $options = array())$/;"	f
__construct	composer.phar	/^public function __construct($input, InputDefinition $definition = null)$/;"	f
__construct	composer.phar	/^public function __construct($installPath, DownloadManager $dm)$/;"	f
__construct	composer.phar	/^public function __construct($message = null, $code = 0, \\Exception $previous = null, $path = null)$/;"	f
__construct	composer.phar	/^public function __construct($message = null, $code = null, \\Exception $previous = null)$/;"	f
__construct	composer.phar	/^public function __construct($message)$/;"	f
__construct	composer.phar	/^public function __construct($message, $code = 0, \\Exception $previous = null, $path = null)$/;"	f
__construct	composer.phar	/^public function __construct($message, $details = array())$/;"	f
__construct	composer.phar	/^public function __construct($message, $errors = array(), Exception $previous = null)$/;"	f
__construct	composer.phar	/^public function __construct($minimumStability = 'stable', array $stabilityFlags = array(), array $filterRequires = array())$/;"	f
__construct	composer.phar	/^public function __construct($name = 'UNKNOWN', $version = 'UNKNOWN')$/;"	f
__construct	composer.phar	/^public function __construct($name = null)$/;"	f
__construct	composer.phar	/^public function __construct($name)$/;"	f
__construct	composer.phar	/^public function __construct($name, $alias, array $packages)$/;"	f
__construct	composer.phar	/^public function __construct($name, $commandName, $input, $output, array $args = array(), array $flags = array())$/;"	f
__construct	composer.phar	/^public function __construct($name, $lockPath = null)$/;"	f
__construct	composer.phar	/^public function __construct($name, $mode = null, $description = '', $default = null)$/;"	f
__construct	composer.phar	/^public function __construct($name, $shortcut = null, $mode = null, $description = '', $default = null)$/;"	f
__construct	composer.phar	/^public function __construct($name, $version, $prettyVersion)$/;"	f
__construct	composer.phar	/^public function __construct($name, Composer $composer, IOInterface $io, $devMode = false, array $args = array(), array $flags = array())$/;"	f
__construct	composer.phar	/^public function __construct($name, RemoteFilesystem $rfs, $processedUrl)$/;"	f
__construct	composer.phar	/^public function __construct($name, array $args = array(), array $flags = array())$/;"	f
__construct	composer.phar	/^public function __construct($operator, $version)$/;"	f
__construct	composer.phar	/^public function __construct($path, $flags, $ignoreUnreadableDirs = false)$/;"	f
__construct	composer.phar	/^public function __construct($path, RemoteFilesystem $rfs = null)$/;"	f
__construct	composer.phar	/^public function __construct($pattern)$/;"	f
__construct	composer.phar	/^public function __construct($pattern, $options = '', $delimiter = null)$/;"	f
__construct	composer.phar	/^public function __construct($policy, $pool, $installedMap, $decisions)$/;"	f
__construct	composer.phar	/^public function __construct($pool)$/;"	f
__construct	composer.phar	/^public function __construct($preferStable = false, $preferLowest = false)$/;"	f
__construct	composer.phar	/^public function __construct($question, $default = null)$/;"	f
__construct	composer.phar	/^public function __construct($question, $default = true, $trueAnswerRegex = '\/^y\/i')$/;"	f
__construct	composer.phar	/^public function __construct($question, array $choices, $default = null)$/;"	f
__construct	composer.phar	/^public function __construct($reason = null)$/;"	f
__construct	composer.phar	/^public function __construct($repoConfig, $port, $path, ProcessExecutor $process, $isWindows, IOInterface $io)$/;"	f
__construct	composer.phar	/^public function __construct($requires, $optionals)$/;"	f
__construct	composer.phar	/^public function __construct($retriever = null)$/;"	f
__construct	composer.phar	/^public function __construct($rfs)$/;"	f
__construct	composer.phar	/^public function __construct($rule)$/;"	f
__construct	composer.phar	/^public function __construct($script)$/;"	f
__construct	composer.phar	/^public function __construct($script, $cwd = null, array $env = null, $timeout = 60, array $options = array())$/;"	f
__construct	composer.phar	/^public function __construct($source, $target, ConstraintInterface $constraint = null, $description = 'relates to', $prettyConstraint = null)$/;"	f
__construct	composer.phar	/^public function __construct($sourcePath)$/;"	f
__construct	composer.phar	/^public function __construct($sourcePath, array $excludeRules)$/;"	f
__construct	composer.phar	/^public function __construct($sources, array $excludes)$/;"	f
__construct	composer.phar	/^public function __construct($stability, $dependencyInfo)$/;"	f
__construct	composer.phar	/^public function __construct($stream, $verbosity = self::VERBOSITY_NORMAL, $decorated = null, OutputFormatterInterface $formatter = null)$/;"	f
__construct	composer.phar	/^public function __construct($test)$/;"	f
__construct	composer.phar	/^public function __construct($triggerDeprecationError = true)$/;"	f
__construct	composer.phar	/^public function __construct($ttyMode, $ptyMode, $input, $disableOutput)$/;"	f
__construct	composer.phar	/^public function __construct($type, $constraint, $channelName, $packageName)$/;"	f
__construct	composer.phar	/^public function __construct($url, IOInterface $io, Config $config, ProcessExecutor $process = null)$/;"	f
__construct	composer.phar	/^public function __construct($useEnvironment = true, $baseDir = null)$/;"	f
__construct	composer.phar	/^public function __construct($value = '', array $options = array())$/;"	f
__construct	composer.phar	/^public function __construct($verbosity = self::VERBOSITY_NORMAL, $decorated = false, OutputFormatterInterface $formatter = null)$/;"	f
__construct	composer.phar	/^public function __construct($verbosity = self::VERBOSITY_NORMAL, $decorated = null, OutputFormatterInterface $formatter = null)$/;"	f
__construct	composer.phar	/^public function __construct()$/;"	f
__construct	composer.phar	/^public function __construct(AdapterInterface $adapter, $message = null, \\Exception $previous = null)$/;"	f
__construct	composer.phar	/^public function __construct(AdapterInterface $adapter, Command $command, \\Exception $previous = null)$/;"	f
__construct	composer.phar	/^public function __construct(AliasPackage $package, $reason = null)$/;"	f
__construct	composer.phar	/^public function __construct(Application $application)$/;"	f
__construct	composer.phar	/^public function __construct(Application $application, $namespace = null)$/;"	f
__construct	composer.phar	/^public function __construct(Command $command)$/;"	f
__construct	composer.phar	/^public function __construct(Command $command, InputInterface $input, OutputInterface $output)$/;"	f
__construct	composer.phar	/^public function __construct(Command $command, InputInterface $input, OutputInterface $output, $exitCode)$/;"	f
__construct	composer.phar	/^public function __construct(Command $command, InputInterface $input, OutputInterface $output, \\Exception $exception, $exitCode)$/;"	f
__construct	composer.phar	/^public function __construct(Command $parent = null)$/;"	f
__construct	composer.phar	/^public function __construct(Composer $composer, IOInterface $io, ProcessExecutor $process = null)$/;"	f
__construct	composer.phar	/^public function __construct(Config $config, ProcessExecutor $process, SemverVersionParser $versionParser)$/;"	f
__construct	composer.phar	/^public function __construct(DownloadManager $downloadManager)$/;"	f
__construct	composer.phar	/^public function __construct(EventDispatcher $eventDispatcher, IOInterface $io = null)$/;"	f
__construct	composer.phar	/^public function __construct(IOInterface $io = null)$/;"	f
__construct	composer.phar	/^public function __construct(IOInterface $io)$/;"	f
__construct	composer.phar	/^public function __construct(IOInterface $io, $cacheDir, $whitelist = 'a-z0-9.', Filesystem $filesystem = null)$/;"	f
__construct	composer.phar	/^public function __construct(IOInterface $io, $preferSource = false, Filesystem $filesystem = null)$/;"	f
__construct	composer.phar	/^public function __construct(IOInterface $io, Composer $composer, $type = 'library')$/;"	f
__construct	composer.phar	/^public function __construct(IOInterface $io, Composer $composer, $type = 'library', Filesystem $filesystem = null)$/;"	f
__construct	composer.phar	/^public function __construct(IOInterface $io, Composer $composer, $type = 'pear-library')$/;"	f
__construct	composer.phar	/^public function __construct(IOInterface $io, Composer $composer, Composer $globalComposer = null)$/;"	f
__construct	composer.phar	/^public function __construct(IOInterface $io, Config $config = null, array $options = array())$/;"	f
__construct	composer.phar	/^public function __construct(IOInterface $io, Config $config)$/;"	f
__construct	composer.phar	/^public function __construct(IOInterface $io, Config $config, EventDispatcher $eventDispatcher = null)$/;"	f
__construct	composer.phar	/^public function __construct(IOInterface $io, Config $config, EventDispatcher $eventDispatcher = null, Cache $cache = null, ProcessExecutor $process = null)$/;"	f
__construct	composer.phar	/^public function __construct(IOInterface $io, Config $config, EventDispatcher $eventDispatcher = null, Cache $cache = null, RemoteFilesystem $rfs = null, Filesystem $filesystem = null)$/;"	f
__construct	composer.phar	/^public function __construct(IOInterface $io, Config $config, ProcessExecutor $process = null, Filesystem $fs = null)$/;"	f
__construct	composer.phar	/^public function __construct(IOInterface $io, Config $config, ProcessExecutor $process = null, RemoteFilesystem $remoteFilesystem = null)$/;"	f
__construct	composer.phar	/^public function __construct(IOInterface $io, Config $config, ProcessExecutor $process, Filesystem $fs)$/;"	f
__construct	composer.phar	/^public function __construct(IOInterface $io, Config $config, RootPackageInterface $package, DownloadManager $downloadManager, RepositoryManager $repositoryManager, Locker $locker, InstallationManager $installationManager, EventDispatcher $eventDispatcher, AutoloadGenerator $autoloadGenerator)$/;"	f
__construct	composer.phar	/^public function __construct(IOInterface $io, JsonFile $lockFile, RepositoryManager $repositoryManager, InstallationManager $installationManager, $composerFileContents)$/;"	f
__construct	composer.phar	/^public function __construct(InputDefinition $definition = null)$/;"	f
__construct	composer.phar	/^public function __construct(InputInterface $input, OutputInterface $output)$/;"	f
__construct	composer.phar	/^public function __construct(InputInterface $input, OutputInterface $output, HelperSet $helperSet)$/;"	f
__construct	composer.phar	/^public function __construct(JsonFile $file, $authConfig = false)$/;"	f
__construct	composer.phar	/^public function __construct(JsonFile $repositoryFile)$/;"	f
__construct	composer.phar	/^public function __construct(LoaderInterface $loader)$/;"	f
__construct	composer.phar	/^public function __construct(LoaderInterface $loader, $strictName = true, VersionParser $parser = null, $flags = 0)$/;"	f
__construct	composer.phar	/^public function __construct(OutputFormatterStyleInterface $emptyStyle = null)$/;"	f
__construct	composer.phar	/^public function __construct(OutputInterface $output)$/;"	f
__construct	composer.phar	/^public function __construct(OutputInterface $output, $max = 0)$/;"	f
__construct	composer.phar	/^public function __construct(OutputInterface $output, array $verbosityLevelMap = array(), array $formatLevelMap = array())$/;"	f
__construct	composer.phar	/^public function __construct(PackageInterface $aliasOf, $version, $prettyVersion)$/;"	f
__construct	composer.phar	/^public function __construct(PackageInterface $initial, PackageInterface $target, $reason = null)$/;"	f
__construct	composer.phar	/^public function __construct(PackageInterface $package, $reason = null)$/;"	f
__construct	composer.phar	/^public function __construct(PolicyInterface $policy, Pool $pool)$/;"	f
__construct	composer.phar	/^public function __construct(PolicyInterface $policy, Pool $pool, RepositoryInterface $installed)$/;"	f
__construct	composer.phar	/^public function __construct(Pool $pool)$/;"	f
__construct	composer.phar	/^public function __construct(Process $process)$/;"	f
__construct	composer.phar	/^public function __construct(Process $process, $timeoutType)$/;"	f
__construct	composer.phar	/^public function __construct(ProcessExecutor $executor = null)$/;"	f
__construct	composer.phar	/^public function __construct(RemoteFilesystem $rfs)$/;"	f
__construct	composer.phar	/^public function __construct(RepositoryManager $manager, Config $config, VersionParser $parser = null, VersionGuesser $versionGuesser = null)$/;"	f
__construct	composer.phar	/^public function __construct(RootPackageInterface $aliasOf, $version, $prettyVersion)$/;"	f
__construct	composer.phar	/^public function __construct(VersionParser $parser = null, $loadOptions = false)$/;"	f
__construct	composer.phar	/^public function __construct(\\Iterator $iterator, $mode)$/;"	f
__construct	composer.phar	/^public function __construct(\\Iterator $iterator, array $comparators)$/;"	f
__construct	composer.phar	/^public function __construct(\\Iterator $iterator, array $directories)$/;"	f
__construct	composer.phar	/^public function __construct(\\Iterator $iterator, array $filters)$/;"	f
__construct	composer.phar	/^public function __construct(\\Iterator $iterator, array $matchPatterns, array $noMatchPatterns)$/;"	f
__construct	composer.phar	/^public function __construct(\\RecursiveIteratorIterator $iterator, $minDepth = 0, $maxDepth = PHP_INT_MAX)$/;"	f
__construct	composer.phar	/^public function __construct(\\Traversable $iterator, $sort)$/;"	f
__construct	composer.phar	/^public function __construct(array $arguments = array())$/;"	f
__construct	composer.phar	/^public function __construct(array $argv = null, InputDefinition $definition = null)$/;"	f
__construct	composer.phar	/^public function __construct(array $config)$/;"	f
__construct	composer.phar	/^public function __construct(array $constraints, $conjunctive = true)$/;"	f
__construct	composer.phar	/^public function __construct(array $definition = array())$/;"	f
__construct	composer.phar	/^public function __construct(array $errors, array $warnings, array $data)$/;"	f
__construct	composer.phar	/^public function __construct(array $helpers = array())$/;"	f
__construct	composer.phar	/^public function __construct(array $literals, $reason, $reasonData, $job = null)$/;"	f
__construct	composer.phar	/^public function __construct(array $options = array())$/;"	f
__construct	composer.phar	/^public function __construct(array $packages = array())$/;"	f
__construct	composer.phar	/^public function __construct(array $packages = array(), array $overrides = array())$/;"	f
__construct	composer.phar	/^public function __construct(array $parameters, InputDefinition $definition = null)$/;"	f
__construct	composer.phar	/^public function __construct(array $paths, $baseDir)$/;"	f
__construct	composer.phar	/^public function __construct(array $problems, array $installedMap)$/;"	f
__construct	composer.phar	/^public function __construct(array $repoConfig, IOInterface $io)$/;"	f
__construct	composer.phar	/^public function __construct(array $repoConfig, IOInterface $io, Config $config)$/;"	f
__construct	composer.phar	/^public function __construct(array $repoConfig, IOInterface $io, Config $config, EventDispatcher $dispatcher = null, RemoteFilesystem $rfs = null)$/;"	f
__construct	composer.phar	/^public function __construct(array $repoConfig, IOInterface $io, Config $config, EventDispatcher $dispatcher = null, array $drivers = null)$/;"	f
__construct	composer.phar	/^public function __construct(array $repoConfig, IOInterface $io, Config $config, EventDispatcher $eventDispatcher = null)$/;"	f
__construct	composer.phar	/^public function __construct(array $repositories)$/;"	f
__construct	composer.phar	/^public function __construct(array $rules)$/;"	f
__construct	composer.phar	/^public function __construct(array $schemas, $contentType = Validator::SCHEMA_MEDIA_TYPE)$/;"	f
__construct	composer.phar	/^public function __construct(array $styles = array())$/;"	f
__destruct	composer.phar	/^public function __destruct()$/;"	f
__toString	composer.phar	/^public function __toString()$/;"	f
__toString	composer.phar	/^public function __toString();$/;"	f
a	composer.phar	/^$a = null;$/;"	v
aAliased	composer.phar	/^$aAliased = $a instanceof AliasPackage;$/;"	v
aIsBranch	composer.phar	/^$aIsBranch = 'dev-' === substr($a, 0, 4);$/;"	v
aIsSameVendor	composer.phar	/^$aIsSameVendor = substr($a->getName(), 0, $pos) === $requiredVendor;$/;"	v
abandoned	composer.phar	/^$this->abandoned = $abandoned;$/;"	v
abandoned	composer.phar	/^protected $abandoned = false;$/;"	v
abbrev	composer.phar	/^$abbrev = substr($name, 0, $len);$/;"	v
abbrevs	composer.phar	/^$abbrevs = array();$/;"	v
absolute	composer.phar	/^$absolute = false;$/;"	v
absolute	composer.phar	/^$absolute = true;$/;"	v
absolutePath	composer.phar	/^$absolutePath = parent::current();$/;"	v
accept	composer.phar	/^public function accept()$/;"	f
acceptValue	composer.phar	/^public function acceptValue()$/;"	f
acceptableStabilities	composer.phar	/^$this->acceptableStabilities = array();$/;"	v
acceptableStabilities	composer.phar	/^protected $acceptableStabilities;$/;"	v
action	composer.phar	/^ $action = isset($this->table[$state][$symbol]) ? $this->table[$state][$symbol] : false;$/;"	v
action	composer.phar	/^$action = $this->defaultActions[$state];$/;"	v
action	composer.phar	/^$action = isset($this->table[$state][$TERROR]) ? $this->table[$state][$TERROR] : false;$/;"	v
action	composer.phar	/^$action = null;$/;"	v
activate	composer.phar	/^public function activate(Composer $composer, IOInterface $io);$/;"	f
actualDecorated	composer.phar	/^$actualDecorated = $this->isDecorated();$/;"	v
adapter	composer.phar	/^$this->adapter = $adapter;$/;"	v
adapter	composer.phar	/^private $adapter;$/;"	v
adapters	composer.phar	/^$this->adapters = array();$/;"	v
adapters	composer.phar	/^$this->adapters = array_map(function (array $properties) {$/;"	v
adapters	composer.phar	/^private $adapters = array();$/;"	v
add	composer.phar	/^    public function add($prefix, $paths, $prepend = false)$/;"	f
add	composer.phar	/^public function add($argument)$/;"	f
add	composer.phar	/^public function add($bit)$/;"	f
add	composer.phar	/^public function add($prefix, $paths, $prepend = false)$/;"	f
add	composer.phar	/^public function add(Command $command)$/;"	f
add	composer.phar	/^public function add(Rule $rule, $type)$/;"	f
addAdapter	composer.phar	/^public function addAdapter(AdapterInterface $adapter, $priority = 0)$/;"	f
addArchiver	composer.phar	/^public function addArchiver(ArchiverInterface $archiver)$/;"	f
addArgument	composer.phar	/^private function addArgument($name, $value)$/;"	f
addArgument	composer.phar	/^public function addArgument($name, $mode = null, $description = '', $default = null)$/;"	f
addArgument	composer.phar	/^public function addArgument(InputArgument $argument)$/;"	f
addArguments	composer.phar	/^public function addArguments($arguments = array())$/;"	f
addAtIndex	composer.phar	/^public function addAtIndex($bit, $index)$/;"	f
addClassMap	composer.phar	/^    public function addClassMap(array $classMap)$/;"	f
addClassMap	composer.phar	/^public function addClassMap(array $classMap)$/;"	f
addClassMapCode	composer.phar	/^private function addClassMapCode($filesystem, $basePath, $vendorPath, $dir, $blacklist = null, $namespaceFilter = null, array $classMap = array())$/;"	f
addCommands	composer.phar	/^public function addCommands(array $commands)$/;"	f
addConfigSetting	composer.phar	/^public function addConfigSetting($name, $value)$/;"	f
addConfigSetting	composer.phar	/^public function addConfigSetting($name, $value);$/;"	f
addDecision	composer.phar	/^protected function addDecision($literal, $level)$/;"	f
addEnvironmentVariables	composer.phar	/^public function addEnvironmentVariables(array $variables)$/;"	f
addError	composer.phar	/^public function addError($path, $message)$/;"	f
addError	composer.phar	/^public function addError($path, $message);$/;"	f
addErrorOutput	composer.phar	/^public function addErrorOutput($line)$/;"	f
addErrors	composer.phar	/^public function addErrors(array $errors)$/;"	f
addErrors	composer.phar	/^public function addErrors(array $errors);$/;"	f
addInstaller	composer.phar	/^public function addInstaller(InstallerInterface $installer)$/;"	f
addJob	composer.phar	/^protected function addJob($packageName, $cmd, ConstraintInterface $constraint = null, $fixed = false)$/;"	f
addLink	composer.phar	/^public function addLink($type, $name, $value)$/;"	f
addLink	composer.phar	/^public function addLink($type, $name, $value);$/;"	f
addLink	composer.phar	/^public function addLink($type, $package, $constraint, $sortPackages = false)$/;"	f
addListener	composer.phar	/^protected function addListener($eventName, $listener, $priority = 0)$/;"	f
addLocalRepository	composer.phar	/^protected function addLocalRepository(RepositoryManager $rm, $vendorDir)$/;"	f
addLongOption	composer.phar	/^private function addLongOption($name, $value)$/;"	f
addMainKey	composer.phar	/^public function addMainKey($key, $content)$/;"	f
addOption	composer.phar	/^public function addOption($name, $shortcut = null, $mode = null, $description = '', $default = null)$/;"	f
addOption	composer.phar	/^public function addOption($option)$/;"	f
addOption	composer.phar	/^public function addOption(InputOption $option)$/;"	f
addOptions	composer.phar	/^public function addOptions($options = array())$/;"	f
addOutput	composer.phar	/^public function addOutput($line)$/;"	f
addPackage	composer.phar	/^public function addPackage(PackageInterface $package)$/;"	f
addPackage	composer.phar	/^public function addPackage(PackageInterface $package);$/;"	f
addPlugin	composer.phar	/^public function addPlugin(PluginInterface $plugin)$/;"	f
addPsr4	composer.phar	/^    public function addPsr4($prefix, $paths, $prepend = false)$/;"	f
addPsr4	composer.phar	/^public function addPsr4($prefix, $paths, $prepend = false)$/;"	f
addReason	composer.phar	/^protected function addReason($id, $reason)$/;"	f
addRepository	composer.phar	/^public function addRepository($name, $config)$/;"	f
addRepository	composer.phar	/^public function addRepository($name, $config);$/;"	f
addRepository	composer.phar	/^public function addRepository(RepositoryInterface $repo, $rootAliases = array())$/;"	f
addRepository	composer.phar	/^public function addRepository(RepositoryInterface $repository)$/;"	f
addRow	composer.phar	/^public function addRow($row)$/;"	f
addRow	composer.phar	/^public function addRow(array $row)$/;"	f
addRows	composer.phar	/^public function addRows(array $rows)$/;"	f
addRule	composer.phar	/^private function addRule($type, Rule $newRule = null)$/;"	f
addRule	composer.phar	/^public function addRule(Rule $rule)$/;"	f
addRulesForJobs	composer.phar	/^protected function addRulesForJobs($ignorePlatformReqs)$/;"	f
addRulesForPackage	composer.phar	/^protected function addRulesForPackage(PackageInterface $package, $ignorePlatformReqs)$/;"	f
addShortOption	composer.phar	/^private function addShortOption($shortcut, $value)$/;"	f
addSubNode	composer.phar	/^public function addSubNode($mainNode, $name, $value)$/;"	f
addSubscriber	composer.phar	/^public function addSubscriber(EventSubscriberInterface $subscriber)$/;"	f
addSuffix	composer.phar	/^public function addSuffix($suffix)$/;"	f
addUsage	composer.phar	/^public function addUsage($usage)$/;"	f
addVCSPattern	composer.phar	/^public static function addVCSPattern($pattern)$/;"	f
addVendorIgnore	composer.phar	/^protected function addVendorIgnore($ignoreFile, $vendor = '\/vendor\/')$/;"	f
addedMap	composer.phar	/^$this->addedMap = array();$/;"	v
addedMap	composer.phar	/^protected $addedMap;$/;"	v
additionalFixedPackages	composer.phar	/^$additionalFixedPackages = $this->additionalInstalledRepository->getPackages();$/;"	v
additionalInstalledRepository	composer.phar	/^$this->additionalInstalledRepository = $additionalInstalledRepository;$/;"	v
additionalInstalledRepository	composer.phar	/^protected $additionalInstalledRepository;$/;"	v
advance	composer.phar	/^public function advance($step = 1)$/;"	f
advance	composer.phar	/^public function advance($step = 1, $redraw = false)$/;"	f
alias	composer.phar	/^$alias = $rootAliases[$name][$package->getVersion()];$/;"	v
alias	composer.phar	/^$alias = $this->createAliasPackage($package, $rootAliasData['alias_normalized'], $rootAliasData['alias']);$/;"	v
alias	composer.phar	/^$alias = (string) $package->getAliasOf();$/;"	v
alias	composer.phar	/^$this->alias = $alias;$/;"	v
alias	composer.phar	/^private $alias;$/;"	v
aliasConstraint	composer.phar	/^$aliasConstraint = new Constraint('==', $normalizedVersion);$/;"	v
aliasOf	composer.phar	/^$this->aliasOf = $aliasOf;$/;"	v
aliasOf	composer.phar	/^$this->aliasOf = clone $this->aliasOf;$/;"	v
aliasOf	composer.phar	/^protected $aliasOf;$/;"	v
aliasOfCandidate	composer.phar	/^$aliasOfCandidate = $candidate->getAliasOf();$/;"	v
aliasOfCandidate	composer.phar	/^$aliasOfCandidate = null;$/;"	v
aliasPackage	composer.phar	/^$aliasPackage = new AliasPackage($package, $alias['alias_normalized'], $alias['alias']);$/;"	v
aliasPlatformPackages	composer.phar	/^private function aliasPlatformPackages(PlatformRepository $platformRepo, $aliases)$/;"	f
aliased	composer.phar	/^$aliased = $package->getAliasOf();$/;"	v
aliasedPackage	composer.phar	/^$aliasedPackage = $package->getAliasOf();$/;"	v
aliases	composer.phar	/^$aliases = $this->extractAliases($links, $aliases);$/;"	v
aliases	composer.phar	/^$aliases = $this->getRootAliases();$/;"	v
aliases	composer.phar	/^$aliases = $this->locker->getAliases();$/;"	v
aliases	composer.phar	/^$aliases = $this->package->getAliases();$/;"	v
aliases	composer.phar	/^$aliases = array();$/;"	v
aliases	composer.phar	/^$this->aliases = $aliases;$/;"	v
aliases	composer.phar	/^private $aliases = array();$/;"	v
aliases	composer.phar	/^private $aliases;$/;"	v
aliases	composer.phar	/^protected $aliases = array();$/;"	v
all	composer.phar	/^$all = $this->application->all($this->namespace ? $this->application->findNamespace($this->namespace) : null);$/;"	v
all	composer.phar	/^$all = array($/;"	v
all	composer.phar	/^public function all($flags = 0)$/;"	f
all	composer.phar	/^public function all($namespace = null)$/;"	f
allCommands	composer.phar	/^$allCommands = array_keys($this->commands);$/;"	v
allErrors	composer.phar	/^$allErrors = array();$/;"	v
allErrors	composer.phar	/^$allErrors = array_merge($allErrors, array_values($this->getErrors()));$/;"	v
allNamespaces	composer.phar	/^$allNamespaces = $this->getNamespaces();$/;"	v
allRules	composer.phar	/^$allRules = $this->getRules();$/;"	v
allowSslDowngrade	composer.phar	/^$this->allowSslDowngrade = true;$/;"	v
allowSslDowngrade	composer.phar	/^protected $allowSslDowngrade = false;$/;"	v
altType	composer.phar	/^$altType = !$input->getOption('dev') ? 'require-dev' : 'require';$/;"	v
alternativeLiterals	composer.phar	/^$alternativeLiterals = array_filter($ruleLiterals, function ($ruleLiteral) use ($literal, $otherWatch, $decisions) {$/;"	v
alternatives	composer.phar	/^$alternatives = array();$/;"	v
alternatives	composer.phar	/^$alternatives = array_filter($alternatives, function ($lev) use ($threshold) { return $lev < 2 * $threshold; });$/;"	v
am	composer.phar	/^$am = new Archiver\\ArchiveManager($dm);$/;"	v
analyze	composer.phar	/^protected function analyze($level, Rule $rule)$/;"	f
analyzeUnsolvable	composer.phar	/^private function analyzeUnsolvable(Rule $conflictRule, $disableRules)$/;"	f
analyzeUnsolvableRule	composer.phar	/^private function analyzeUnsolvableRule(Problem $problem, Rule $conflictRule)$/;"	f
analyzedRule	composer.phar	/^$analyzedRule = $rule;$/;"	v
andConstraints	composer.phar	/^$andConstraints = preg_split('{(?<!^|as|[=>< ,]) *(?<!-)[, ](?!-) *(?!,|as|$)}', $constraints);$/;"	v
andSplit	composer.phar	/^$andSplit = preg_split('{(?<!^|as|[=>< ,]) *(?<!-)[, ](?!-) *(?!,|as|$)}', $constraint);$/;"	v
answer	composer.phar	/^$answer = $this->ask($output, $question);$/;"	v
answer	composer.phar	/^$answer = $this->io->askAndValidate($/;"	v
answer	composer.phar	/^$answer = $this->questionHelper->ask($this->input, $this, $question);$/;"	v
answer	composer.phar	/^$answer = 'z';$/;"	v
answer	composer.phar	/^$answer = Seld\\CliPrompt\\CliPrompt::hiddenPrompt();$/;"	v
answer	composer.phar	/^$answer = Seld\\CliPrompt\\CliPrompt::prompt();$/;"	v
answer	composer.phar	/^$answer = self::trimAnswer(fgets($stdin, 4096));$/;"	v
answer	composer.phar	/^$answer = self::trimAnswer(shell_exec($exe));$/;"	v
answerIsTrue	composer.phar	/^$answerIsTrue = (bool) preg_match($regex, $answer);$/;"	v
apiUrl	composer.phar	/^$apiUrl = $this->originUrl . '\/api\/v3';$/;"	v
apiUrl	composer.phar	/^$apiUrl = 'api.github.com';$/;"	v
apiUrl	composer.phar	/^$apiUrl = ('github.com' === $originUrl) ? 'api.github.com' : $originUrl . '\/api\/v3';$/;"	v
appBaseDirCode	composer.phar	/^$appBaseDirCode = $filesystem->findShortestPathCode($vendorPath, $basePath, true);$/;"	v
appBaseDirCode	composer.phar	/^$appBaseDirCode = str_replace('__DIR__', '$vendorDir', $appBaseDirCode);$/;"	v
append	composer.phar	/^public function append($expr)$/;"	f
append	composer.phar	/^public function append($expr);$/;"	f
append	composer.phar	/^public function append($iterator)$/;"	f
appendDocument	composer.phar	/^private function appendDocument(\\DOMNode $parentNode, \\DOMNode $importedParent)$/;"	f
appendPackages	composer.phar	/^public function appendPackages(array $packages, array $bucket)$/;"	f
application	composer.phar	/^$application = $this->getApplication();$/;"	v
application	composer.phar	/^$application = new Application();$/;"	v
application	composer.phar	/^$this->application = $application;$/;"	v
application	composer.phar	/^private $application;$/;"	v
applicationDefinitionMerged	composer.phar	/^$this->applicationDefinitionMerged = false;$/;"	v
applicationDefinitionMerged	composer.phar	/^$this->applicationDefinitionMerged = true;$/;"	v
applicationDefinitionMerged	composer.phar	/^private $applicationDefinitionMerged = false;$/;"	v
applicationDefinitionMergedWithArgs	composer.phar	/^$this->applicationDefinitionMergedWithArgs = true;$/;"	v
applicationDefinitionMergedWithArgs	composer.phar	/^private $applicationDefinitionMergedWithArgs = false;$/;"	v
apply	composer.phar	/^public function apply($text)$/;"	f
apply	composer.phar	/^public function apply($text);$/;"	f
applyCurrentStyle	composer.phar	/^private function applyCurrentStyle($text)$/;"	f
applyRelease	composer.phar	/^private function applyRelease(&$actions, $releaseNodes, $vars)$/;"	f
arParts	composer.phar	/^ $arParts = $resolver->parse($resolvedUri);$/;"	v
archive	composer.phar	/^ $archive = new \\Phar($file);$/;"	v
archive	composer.phar	/^ $archive = new \\PharData($file);$/;"	v
archive	composer.phar	/^$archive = new \\PharData($this->file);$/;"	v
archive	composer.phar	/^protected function archive(IOInterface $io, Config $config, $packageName = null, $version = null, $format = 'tar', $dest = '.', $fileName = null)$/;"	f
archive	composer.phar	/^public function archive($sources, $target, $format, array $excludes = array())$/;"	f
archive	composer.phar	/^public function archive($sources, $target, $format, array $excludes = array());$/;"	f
archive	composer.phar	/^public function archive(PackageInterface $package, $format, $targetDir, $fileName = null)$/;"	f
archiveExcludes	composer.phar	/^$this->archiveExcludes = $excludes;$/;"	v
archiveExcludes	composer.phar	/^protected $archiveExcludes = array();$/;"	v
archiveFile	composer.phar	/^ $archiveFile = gzopen($file, 'rb');$/;"	v
archiveManager	composer.phar	/^$archiveManager = $factory->createArchiveManager($config, $downloadManager);$/;"	v
archivePath	composer.phar	/^$archivePath = $usableArchiver->archive($sourcePath, $tempTarget, $format, $package->getArchiveExcludes());$/;"	v
archivers	composer.phar	/^protected $archivers = array();$/;"	v
areOpen	composer.phar	/^public function areOpen()$/;"	f
areOpen	composer.phar	/^public function areOpen();$/;"	f
areSupported	composer.phar	/^private static $areSupported = array();$/;"	v
arg	composer.phar	/^$arg = $this->definition->getArgument($c - 1);$/;"	v
arg	composer.phar	/^$arg = $this->definition->getArgument($c);$/;"	v
arg	composer.phar	/^public function arg($arg)$/;"	f
args	composer.phar	/^$args = $input->getArgument('args');$/;"	v
args	composer.phar	/^$args = $input->getArguments();$/;"	v
args	composer.phar	/^$args = array($mainNode, $name);$/;"	v
args	composer.phar	/^$args = array($mainNode, $name, $args[1]);$/;"	v
args	composer.phar	/^$args = array();$/;"	v
args	composer.phar	/^$args = func_get_args();$/;"	v
args	composer.phar	/^$args = implode(' ', array_map(array('Composer\\Util\\ProcessExecutor', 'escape'), $event->getArguments()));$/;"	v
args	composer.phar	/^$this->args = $args;$/;"	v
args	composer.phar	/^protected $args;$/;"	v
arguments	composer.phar	/^$arguments = array();$/;"	v
arguments	composer.phar	/^$arguments = array_merge($this->prefix, $this->arguments);$/;"	v
arguments	composer.phar	/^$arguments = is_int($name) ? array_values($this->arguments) : $this->arguments;$/;"	v
arguments	composer.phar	/^$this->arguments = $arguments;$/;"	v
arguments	composer.phar	/^$this->arguments = array();$/;"	v
arguments	composer.phar	/^private $arguments;$/;"	v
arguments	composer.phar	/^protected $arguments = array();$/;"	v
argv	composer.phar	/^$argv = $_SERVER['argv'];$/;"	v
array	composer.phar	/^$array = iterator_to_array($this->iterator, true);$/;"	v
arrayUnshiftRef	composer.phar	/^private function arrayUnshiftRef(&$array, &$value)$/;"	f
as	composer.phar	/^$as = (string) $action['as'];$/;"	v
asText	composer.phar	/^public function asText($namespace = null, $raw = false)$/;"	f
asText	composer.phar	/^public function asText()$/;"	f
asXml	composer.phar	/^public function asXml($asDom = false)$/;"	f
asXml	composer.phar	/^public function asXml($namespace = null, $asDom = false)$/;"	f
ask	composer.phar	/^public function ask($question, $default = null)$/;"	f
ask	composer.phar	/^public function ask($question, $default = null);$/;"	f
ask	composer.phar	/^public function ask($question, $default = null, $validator = null)$/;"	f
ask	composer.phar	/^public function ask($question, $default = null, $validator = null);$/;"	f
ask	composer.phar	/^public function ask(InputInterface $input, OutputInterface $output, Question $question)$/;"	f
ask	composer.phar	/^public function ask(OutputInterface $output, $question, $default = null, array $autocomplete = null)$/;"	f
askAndHideAnswer	composer.phar	/^public function askAndHideAnswer($question)$/;"	f
askAndHideAnswer	composer.phar	/^public function askAndHideAnswer($question);$/;"	f
askAndValidate	composer.phar	/^public function askAndValidate($question, $validator, $attempts = false, $default = null)$/;"	f
askAndValidate	composer.phar	/^public function askAndValidate($question, $validator, $attempts = null, $default = null)$/;"	f
askAndValidate	composer.phar	/^public function askAndValidate($question, $validator, $attempts = null, $default = null);$/;"	f
askAndValidate	composer.phar	/^public function askAndValidate(OutputInterface $output, $question, $validator, $attempts = false, $default = null, array $autocomplete = null)$/;"	f
askConfirmation	composer.phar	/^public function askConfirmation($question, $default = true)$/;"	f
askConfirmation	composer.phar	/^public function askConfirmation($question, $default = true);$/;"	f
askConfirmation	composer.phar	/^public function askConfirmation(OutputInterface $output, $question, $default = true)$/;"	f
askHidden	composer.phar	/^public function askHidden($question, $validator = null)$/;"	f
askHidden	composer.phar	/^public function askHidden($question, $validator = null);$/;"	f
askHiddenResponse	composer.phar	/^public function askHiddenResponse(OutputInterface $output, $question, $fallback = true)$/;"	f
askHiddenResponseAndValidate	composer.phar	/^public function askHiddenResponseAndValidate(OutputInterface $output, $question, $validator, $attempts = false, $fallback = true)$/;"	f
askQuestion	composer.phar	/^public function askQuestion(Question $question)$/;"	f
assertRuleLiteral	composer.phar	/^$assertRuleLiteral = $assertRuleLiterals[0];$/;"	v
assertRuleLiterals	composer.phar	/^$assertRuleLiterals = $assertRule->literals;$/;"	v
atOffset	composer.phar	/^public function atOffset($queueOffset)$/;"	f
attemptCloneFallback	composer.phar	/^protected function attemptCloneFallback()$/;"	f
attempts	composer.phar	/^$attempts = $question->getMaxAttempts();$/;"	v
attempts	composer.phar	/^$this->attempts = $attempts;$/;"	v
attempts	composer.phar	/^private $attempts;$/;"	v
auth	composer.phar	/^$auth = $io->getAuthentication($repositoryName);$/;"	v
auth	composer.phar	/^$auth = $this->io->getAuthentication($match[1]);$/;"	v
auth	composer.phar	/^$auth = $this->io->getAuthentication($match[2]);$/;"	v
auth	composer.phar	/^$auth = $this->io->getAuthentication($originUrl);$/;"	v
auth	composer.phar	/^$auth = array($/;"	v
auth	composer.phar	/^$auth = base64_encode($auth);$/;"	v
auth	composer.phar	/^$auth = urldecode($proxy['user']);$/;"	v
authConfig	composer.phar	/^$authConfig = $this->config->get('http-basic');$/;"	v
authConfig	composer.phar	/^$this->authConfig = $authConfig;$/;"	v
authConfig	composer.phar	/^private $authConfig;$/;"	v
authConfigFile	composer.phar	/^$authConfigFile = $input->getOption('global')$/;"	v
authConfigFile	composer.phar	/^$this->authConfigFile = new JsonFile($authConfigFile);$/;"	v
authConfigFile	composer.phar	/^protected $authConfigFile;$/;"	v
authConfigSource	composer.phar	/^$this->authConfigSource = $source;$/;"	v
authConfigSource	composer.phar	/^$this->authConfigSource = new JsonConfigSource($this->authConfigFile, true);$/;"	v
authConfigSource	composer.phar	/^private $authConfigSource;$/;"	v
authConfigSource	composer.phar	/^protected $authConfigSource;$/;"	v
authFailures	composer.phar	/^$authFailures = array('fatal: Authentication failed', 'remote error: Invalid username or password.');$/;"	v
authHeader	composer.phar	/^$authHeader = 'Authorization: Basic '.$authStr;$/;"	v
authHelper	composer.phar	/^$authHelper = new AuthHelper($this->io, $this->config);$/;"	v
authStr	composer.phar	/^$authStr = base64_encode($auth['username'] . ':' . $auth['password']);$/;"	v
authentications	composer.phar	/^protected $authentications = array();$/;"	v
author	composer.phar	/^$author = $io->askAndValidate($/;"	v
author	composer.phar	/^$author = $self->parseAuthorString($value);$/;"	v
author	composer.phar	/^$author = sprintf('%s <%s>', $git['user.name'], $git['user.email']);$/;"	v
authoritative	composer.phar	/^$authoritative = $input->getOption('classmap-authoritative') || $composer->getConfig()->get('classmap-authoritative');$/;"	v
authoritative	composer.phar	/^$authoritative = $input->getOption('classmap-authoritative') || $config->get('classmap-authoritative');$/;"	v
authorizeOAuth	composer.phar	/^public function authorizeOAuth($originUrl)$/;"	f
authorizeOAuthInteractively	composer.phar	/^public function authorizeOAuthInteractively($originUrl, $message = null)$/;"	f
authors	composer.phar	/^$this->authors = $authors;$/;"	v
authors	composer.phar	/^protected $authors;$/;"	v
autoExit	composer.phar	/^$this->autoExit = (bool) $boolean;$/;"	v
autoExit	composer.phar	/^private $autoExit = true;$/;"	v
autoPrependBlock	composer.phar	/^private function autoPrependBlock()$/;"	f
autoPrependText	composer.phar	/^private function autoPrependText()$/;"	f
autoVersioned	composer.phar	/^$autoVersioned = false;$/;"	v
autoVersioned	composer.phar	/^$autoVersioned = true;$/;"	v
autocomplete	composer.phar	/^$autocomplete = $question->getAutocompleterValues();$/;"	v
autocomplete	composer.phar	/^private function autocomplete(OutputInterface $output, Question $question, $inputStream)$/;"	f
autocompleter	composer.phar	/^private function autocompleter($text)$/;"	f
autocompleterValues	composer.phar	/^$this->autocompleterValues = $values;$/;"	v
autocompleterValues	composer.phar	/^private $autocompleterValues;$/;"	v
autoload	composer.phar	/^    public static function autoload(\\$class)$/;"	f
autoload	composer.phar	/^$autoload = $package->getAutoload();$/;"	v
autoload	composer.phar	/^$autoload = array_merge_recursive($autoload, $package->getDevAutoload());$/;"	v
autoload	composer.phar	/^$this->autoload = $autoload;$/;"	v
autoload	composer.phar	/^protected $autoload = array();$/;"	v
autoloadGenerator	composer.phar	/^$this->autoloadGenerator = $autoloadGenerator;$/;"	v
autoloadGenerator	composer.phar	/^private $autoloadGenerator;$/;"	v
autoloadGenerator	composer.phar	/^protected $autoloadGenerator;$/;"	v
autoloadPackages	composer.phar	/^$autoloadPackages = $this->collectDependencies($pool, $autoloadPackages, $package);$/;"	v
autoloadPackages	composer.phar	/^$autoloadPackages = array($package->getName() => $package);$/;"	v
autoloads	composer.phar	/^$autoloads = $this->parseAutoloads($packageMap, $mainPackage);$/;"	v
autoloads	composer.phar	/^$autoloads = array();$/;"	v
available	composer.phar	/^$available = $this->pool->whatProvides($job['packageName']);$/;"	v
availableBackgroundColors	composer.phar	/^private static $availableBackgroundColors = array($/;"	v
availableForegroundColors	composer.phar	/^private static $availableForegroundColors = array($/;"	v
availableOptions	composer.phar	/^private static $availableOptions = array($/;"	v
bAliased	composer.phar	/^$bAliased = $b instanceof AliasPackage;$/;"	v
bIsBranch	composer.phar	/^$bIsBranch = 'dev-' === substr($b, 0, 4);$/;"	v
bIsSameVendor	composer.phar	/^$bIsSameVendor = substr($b->getName(), 0, $pos) === $requiredVendor;$/;"	v
background	composer.phar	/^$this->background = null;$/;"	v
background	composer.phar	/^$this->background = static::$availableBackgroundColors[$color];$/;"	v
background	composer.phar	/^private $background;$/;"	v
backupFile	composer.phar	/^$backupFile = sprintf($/;"	v
bar	composer.phar	/^$bar = str_repeat($this->barChar, $completeBars);$/;"	v
barChar	composer.phar	/^$this->barChar = $char;$/;"	v
barChar	composer.phar	/^$this->barChar = $this->barCharOriginal;$/;"	v
barChar	composer.phar	/^$this->barChar = $this->emptyBarChar;$/;"	v
barChar	composer.phar	/^private $barChar = '=';$/;"	v
barChar	composer.phar	/^private $barChar;$/;"	v
barCharOriginal	composer.phar	/^$this->barCharOriginal = $this->barChar;$/;"	v
barCharOriginal	composer.phar	/^$this->barCharOriginal = '';$/;"	v
barCharOriginal	composer.phar	/^private $barCharOriginal;$/;"	v
barWidth	composer.phar	/^ private $barWidth = 28;$/;"	v
barWidth	composer.phar	/^$this->barWidth = (int) $size;$/;"	v
baseComponents	composer.phar	/^$baseComponents = $this->parse($baseUri);$/;"	v
baseDir	composer.phar	/^$baseDir = "'phar:\/\/' . " . $baseDir;$/;"	v
baseDir	composer.phar	/^$baseDir = '$baseDir . ';$/;"	v
baseDir	composer.phar	/^$baseDir = '$vendorDir';$/;"	v
baseDir	composer.phar	/^$baseDir = '';$/;"	v
baseDir	composer.phar	/^$baseDir = dirname($vendorDir);$/;"	v
baseDir	composer.phar	/^$this->baseDir = $baseDir;$/;"	v
baseDir	composer.phar	/^private $baseDir;$/;"	v
baseDirFromTargetDirCode	composer.phar	/^$baseDirFromTargetDirCode = $filesystem->findShortestPathCode($targetDir, $basePath, true);$/;"	v
baseDirLength	composer.phar	/^$this->baseDirLength = strlen($baseDir);$/;"	v
baseDirLength	composer.phar	/^private $baseDirLength;$/;"	v
basePath	composer.phar	/^$basePath = $baseComponents['path'];$/;"	v
basePath	composer.phar	/^$basePath = $filesystem->normalizePath(realpath(getcwd()));$/;"	v
basePath	composer.phar	/^$basePath = $path;$/;"	v
basePath	composer.phar	/^$basePath = dirname($basePath);$/;"	v
basePathSegments	composer.phar	/^$basePathSegments = array_slice($basePathSegments, 0, -$numLevelUp);$/;"	v
basePathSegments	composer.phar	/^$basePathSegments = explode('\/', $basePath);$/;"	v
baseRequirements	composer.phar	/^$baseRequirements = array_key_exists($requireKey, $composerDefinition) ? $composerDefinition[$requireKey] : array();$/;"	v
baseUrl	composer.phar	/^$baseUrl = (extension_loaded('openssl') ? 'https' : 'http') . ':\/\/' . self::HOMEPAGE;$/;"	v
baseUrl	composer.phar	/^$this->baseUrl = rtrim(preg_replace('{^(.*)(?:\/[^\/\\\\]+.json)?(?:[?#].*)?$}', '$1', $this->url), '\/');$/;"	v
baseUrl	composer.phar	/^$this->baseUrl = str_replace('https:\/\/', 'http:\/\/', $this->baseUrl);$/;"	v
baseUrl	composer.phar	/^$this->baseUrl = substr($this->url, 0, $pos);$/;"	v
baseUrl	composer.phar	/^protected $baseUrl;$/;"	v
bestLiterals	composer.phar	/^$bestLiterals = array($literal);$/;"	v
bestLiterals	composer.phar	/^$bestLiterals = array($literals[0]);$/;"	v
bestMatch	composer.phar	/^$bestMatch = $match;$/;"	v
bestMatch	composer.phar	/^$bestMatch = '';$/;"	v
bestPackage	composer.phar	/^$bestPackage = $package;$/;"	v
bestPackage	composer.phar	/^$bestPackage = $pool->literalToPackage($literals[0]);$/;"	v
binCompat	composer.phar	/^$this->binCompat = $composer->getConfig()->get('bin-compat');$/;"	v
binCompat	composer.phar	/^protected $binCompat;$/;"	v
binDir	composer.phar	/^ $binDir = $composer->getConfig()->get('bin-dir');$/;"	v
binDir	composer.phar	/^$binDir = $config->get('bin-dir');$/;"	v
binDir	composer.phar	/^$binDir = ProcessExecutor::escape(dirname($binPath));$/;"	v
binDir	composer.phar	/^$this->binDir = realpath($this->binDir);$/;"	v
binDir	composer.phar	/^$this->binDir = rtrim($composer->getConfig()->get('bin-dir'), '\/');$/;"	v
binDir	composer.phar	/^protected $binDir;$/;"	v
binFile	composer.phar	/^$binFile = basename($binPath);$/;"	v
binPath	composer.phar	/^ $binPath = realpath($binPath);$/;"	v
binPath	composer.phar	/^$binPath = $this->filesystem->findShortestPath($link, $bin);$/;"	v
binPath	composer.phar	/^$binPath = $this->getInstallPath($package).'\/'.$bin;$/;"	v
binToVendor	composer.phar	/^$binToVendor = $this->filesystem->findShortestPath($this->binDir, $this->vendorDir, true);$/;"	v
binaries	composer.phar	/^$binaries = $this->getBinaries($package);$/;"	v
binaries	composer.phar	/^$binaries = array();$/;"	v
binaries	composer.phar	/^$this->binaries = $binaries;$/;"	v
binaries	composer.phar	/^protected $binaries = array();$/;"	v
binariesPath	composer.phar	/^$binariesPath = $this->getInstallPath($package) . '\/bin\/';$/;"	v
bind	composer.phar	/^public function bind(InputDefinition $definition)$/;"	f
bind	composer.phar	/^public function bind(InputDefinition $definition);$/;"	f
bitfield	composer.phar	/^$this->bitfield = $this->bitfield & ~(255 << self::BITFIELD_DISABLED);$/;"	v
bitfield	composer.phar	/^$this->bitfield = ($this->bitfield & ~(255 << self::BITFIELD_DISABLED)) | (1 << self::BITFIELD_DISABLED);$/;"	v
bitfield	composer.phar	/^$this->bitfield = ($this->bitfield & ~(255 << self::BITFIELD_TYPE)) | ((255 & $type) << self::BITFIELD_TYPE);$/;"	v
bitfield	composer.phar	/^$this->bitfield = (0 << self::BITFIELD_DISABLED) |$/;"	v
bitfield	composer.phar	/^protected $bitfield;$/;"	v
bits	composer.phar	/^$bits = explode('.', $settingKey);$/;"	v
bits	composer.phar	/^$bits = parse_url($value);$/;"	v
bits	composer.phar	/^private $bits = array();$/;"	v
blacklist	composer.phar	/^$blacklist = '{(' . implode('|', $autoloads['exclude-from-classmap']) . ')}';$/;"	v
blacklist	composer.phar	/^$blacklist = null;$/;"	v
block	composer.phar	/^public function block($messages, $type = null, $style = null, $prefix = ' ', $padding = false)$/;"	f
blocked	composer.phar	/^$this->blocked = false;$/;"	v
blocked	composer.phar	/^private $blocked = true;$/;"	v
bom	composer.phar	/^ $bom = "\\xEF\\xBB\\xBF";$/;"	v
bookmarks	composer.phar	/^$bookmarks = array();$/;"	v
bool	composer.phar	/^$bool = strtolower($values[0]);$/;"	v
booleanNormalizer	composer.phar	/^$booleanNormalizer = function ($val) { return $val !== 'false' && (bool) $val; };$/;"	v
booleanValidator	composer.phar	/^$booleanValidator = function ($val) { return in_array($val, array('true', 'false', '1', '0'), true); };$/;"	v
borderFormat	composer.phar	/^$this->borderFormat = $borderFormat;$/;"	v
borderFormat	composer.phar	/^private $borderFormat = '%s';$/;"	v
borderless	composer.phar	/^$borderless = new TableStyle();$/;"	v
branch	composer.phar	/^$branch = 'v' . $branch;$/;"	v
branch	composer.phar	/^$branch = preg_replace('\/[^A-Za-z0-9 ]\/', '', $resBits[4]);$/;"	v
branch	composer.phar	/^$branch = preg_replace('{(?:^dev-|(?:\\.x)?-dev$)}i', '', $branch);$/;"	v
branch	composer.phar	/^$branch = preg_replace('{^dev-}', '', $version);$/;"	v
branch	composer.phar	/^$branch = trim($output);$/;"	v
branch	composer.phar	/^$this->branch = $this->repoConfig['branch'];$/;"	v
branch	composer.phar	/^$this->branch = '';$/;"	v
branch	composer.phar	/^protected $branch;$/;"	v
branchBlacklist	composer.phar	/^$branchBlacklist = array('gh-pages');$/;"	v
branchData	composer.phar	/^$branchData = JsonFile::parseJson($this->getContents($resource), $resource);$/;"	v
branchErrorOccurred	composer.phar	/^$this->branchErrorOccurred = true;$/;"	v
branchErrorOccurred	composer.phar	/^protected $branchErrorOccurred = false;$/;"	v
branches	composer.phar	/^ $this->branches = array_merge($bookmarks, $branches);$/;"	v
branches	composer.phar	/^$branches = $output;$/;"	v
branches	composer.phar	/^$branches = $this->perforce->getBranches();$/;"	v
branches	composer.phar	/^$branches = $this->process->splitLines($output);$/;"	v
branches	composer.phar	/^$branches = array('master' => $possibleBranches[$this->p4Branch] . '@'. $lastCommitNum);$/;"	v
branches	composer.phar	/^$branches = array();$/;"	v
branches	composer.phar	/^$branches = array_keys($driver->getBranches());$/;"	v
branches	composer.phar	/^$branches = null;$/;"	v
branches	composer.phar	/^$this->branches = $branches;$/;"	v
branches	composer.phar	/^$this->branches = array();$/;"	v
branches	composer.phar	/^protected $branches = array();$/;"	v
branches	composer.phar	/^protected $branches;$/;"	v
branchesPath	composer.phar	/^$branchesPath = isset($packageConfig['branches-path']) ? preg_quote($packageConfig['branches-path'], '#') : 'branches';$/;"	v
branchesPath	composer.phar	/^$this->branchesPath = $this->repoConfig['branches-path'];$/;"	v
branchesPath	composer.phar	/^protected $branchesPath = 'branches';$/;"	v
bucket	composer.phar	/^$bucket = $this->appendPackages($packages, $bucket);$/;"	v
bucket	composer.phar	/^$bucket = $this->filterRequiredPackages($repo, $package, $bucket);$/;"	v
buffer	composer.phar	/^ $buffer = preg_replace_callback('\/(\\\\\\\\+)u([0-9a-f]{4})\/i', function ($match) {$/;"	v
buffer	composer.phar	/^$buffer = '';$/;"	v
buffer	composer.phar	/^$buffer = str_replace('\\\\\/', '\/', $buffer);$/;"	v
buffer	composer.phar	/^$this->buffer = '';$/;"	v
buffer	composer.phar	/^private $buffer = '';$/;"	v
bufferedOutput	composer.phar	/^$this->bufferedOutput = new BufferedOutput($output->getVerbosity(), false, clone $output->getFormatter());$/;"	v
bufferedOutput	composer.phar	/^private $bufferedOutput;$/;"	v
buildAdapter	composer.phar	/^private function buildAdapter(AdapterInterface $adapter)$/;"	f
buildCallback	composer.phar	/^protected function buildCallback($callback)$/;"	f
buildComposerPackageName	composer.phar	/^private function buildComposerPackageName($channelName, $packageName)$/;"	f
buildComposerPackages	composer.phar	/^private function buildComposerPackages(ChannelInfo $channelInfo, VersionParser $versionParser)$/;"	f
buildContentFiltering	composer.phar	/^protected function buildContentFiltering(Command $command, array $contains, $not = false)$/;"	f
buildCopyActions	composer.phar	/^private function buildCopyActions($source, array $roles, $vars)$/;"	f
buildDatesFiltering	composer.phar	/^private function buildDatesFiltering(Command $command, array $dates)$/;"	f
buildDepExtensionConstraints	composer.phar	/^private function buildDepExtensionConstraints($depItem, $depType)$/;"	f
buildDepPackageConstraints	composer.phar	/^private function buildDepPackageConstraints($depItem, $depType)$/;"	f
buildDependency10Info	composer.phar	/^private function buildDependency10Info($depArray)$/;"	f
buildDependency20Info	composer.phar	/^private function buildDependency20Info($depArray)$/;"	f
buildDependencyInfo	composer.phar	/^public function buildDependencyInfo($depArray)$/;"	f
buildFindCommand	composer.phar	/^protected function buildFindCommand(Command $command, $dir)$/;"	f
buildFormatSorting	composer.phar	/^protected function buildFormatSorting(Command $command, $sort)$/;"	f
buildIdentifier	composer.phar	/^protected function buildIdentifier($baseDir, $revision)$/;"	f
buildNamesFiltering	composer.phar	/^private function buildNamesFiltering(Command $command, array $names, $not = false)$/;"	f
buildPackageMap	composer.phar	/^public function buildPackageMap(InstallationManager $installationManager, PackageInterface $mainPackage, array $packages)$/;"	f
buildPackageName	composer.phar	/^private function buildPackageName($name)$/;"	f
buildPathsFiltering	composer.phar	/^private function buildPathsFiltering(Command $command, $dir, array $paths, $not = false)$/;"	f
buildProperties	composer.phar	/^private function buildProperties()$/;"	f
buildSizesFiltering	composer.phar	/^private function buildSizesFiltering(Command $command, array $sizes)$/;"	f
buildSorting	composer.phar	/^private function buildSorting(Command $command, $sort)$/;"	f
buildSourceList10	composer.phar	/^private function buildSourceList10($children, $targetRoles, $source, $target, $role, $packageName)$/;"	f
buildSourceList20	composer.phar	/^private function buildSourceList20($children, $targetRoles, $source, $target, $role, $packageName)$/;"	f
buildTableRows	composer.phar	/^private function buildTableRows($rows)$/;"	f
bypassSshForGitHub	composer.phar	/^ $bypassSshForGitHub = preg_match('{^git@'.self::getGitHubDomainsRegex($this->config).':(.+?)\\.git$}i', $url) && !in_array('ssh', $protocols, true);$/;"	v
bytesCopied	composer.phar	/^$bytesCopied = stream_copy_to_stream($source, $target);$/;"	v
bytesMax	composer.phar	/^$this->bytesMax = $bytesMax;$/;"	v
bytesMax	composer.phar	/^$this->bytesMax = 0;$/;"	v
bytesMax	composer.phar	/^private $bytesMax;$/;"	v
c	composer.phar	/^$c = count($this->arguments);$/;"	v
c	composer.phar	/^$c = fread($inputStream, 1);$/;"	v
c	composer.phar	/^$c = str_repeat('-', max(0, strlen($pre) - 1)); $/;"	v
cache	composer.phar	/^$cache = new Cache($io, $cachePath);$/;"	v
cache	composer.phar	/^$cache = new Cache($io, $config->get('cache-files-dir'), 'a-z0-9_.\/');$/;"	v
cache	composer.phar	/^$cache = null;$/;"	v
cache	composer.phar	/^$this->cache = $cache;$/;"	v
cache	composer.phar	/^$this->cache = array();$/;"	v
cache	composer.phar	/^$this->cache = new Cache($io, $config->get('cache-repo-dir').'\/'.preg_replace('{[^a-z0-9.]}i', '-', $this->url), 'a-z0-9.$');$/;"	v
cache	composer.phar	/^$this->cache = new Cache($this->io, $this->config->get('cache-repo-dir').'\/'.$this->originUrl.'\/'.$this->owner.'\/'.$this->repository);$/;"	v
cache	composer.phar	/^$this->cache = new Cache($this->io, $this->config->get('cache-repo-dir').'\/'.preg_replace('{[^a-z0-9.]}i', '-', $cacheUrl));$/;"	v
cache	composer.phar	/^$this->cache = new Cache($this->io, $this->config->get('cache-repo-dir').'\/'.preg_replace('{[^a-z0-9.]}i', '-', $this->baseUrl));$/;"	v
cache	composer.phar	/^private $cache = array();$/;"	v
cache	composer.phar	/^protected $cache;$/;"	v
cacheCollected	composer.phar	/^private static $cacheCollected = false;$/;"	v
cacheCredentials	composer.phar	/^$this->cacheCredentials = $cacheCredentials;$/;"	v
cacheCredentials	composer.phar	/^$this->cacheCredentials = $this->io->askConfirmation("Should Subversion cache these credentials? (yes\/no) ", true);$/;"	v
cacheCredentials	composer.phar	/^$this->cacheCredentials = (bool) $this->repoConfig['svn-cache-credentials'];$/;"	v
cacheCredentials	composer.phar	/^protected $cacheCredentials = true;$/;"	v
cacheDir	composer.phar	/^$cacheDir = $config->get('cache-dir');$/;"	v
cacheDir	composer.phar	/^$cacheDir = $home . '\/cache';$/;"	v
cacheDir	composer.phar	/^$cacheDir = $home.'\/cache';$/;"	v
cacheDir	composer.phar	/^$cacheDir = $this->config->get('cache-vcs-dir');$/;"	v
cacheDir	composer.phar	/^$cacheDir = getenv('COMPOSER_CACHE_DIR');$/;"	v
cacheDir	composer.phar	/^$cacheDir = self::getCacheDir($home);$/;"	v
cacheDir	composer.phar	/^$cacheDir = strtr($cacheDir, '\\\\', '\/');$/;"	v
cacheKey	composer.phar	/^$cacheKey = $filename;$/;"	v
cacheKey	composer.phar	/^$cacheKey = $this->getCacheKey($package);$/;"	v
cacheKey	composer.phar	/^$cacheKey = 'provider-'.strtr($name, '\/', '$').'.json';$/;"	v
cacheKey	composer.phar	/^$cacheKey = false;$/;"	v
cacheKey	composer.phar	/^$cacheKey = null;$/;"	v
cacheKey	composer.phar	/^$cacheKey = str_replace(array('%hash%','$'), '', $include);$/;"	v
cachePath	composer.phar	/^$cachePath = realpath($cachePath);$/;"	v
cachePaths	composer.phar	/^$cachePaths = array($/;"	v
cacheUrl	composer.phar	/^$cacheUrl = $this->url;$/;"	v
cacheUrl	composer.phar	/^$cacheUrl = realpath($this->url);$/;"	v
calculateNumberOfColumns	composer.phar	/^private function calculateNumberOfColumns()$/;"	f
calculateTotalWidthForOptions	composer.phar	/^private function calculateTotalWidthForOptions($options)$/;"	f
callback	composer.phar	/^$callback = $this->callback;$/;"	v
callback	composer.phar	/^$callback = $this->wrapCallback($output, $process, $callback);$/;"	v
callback	composer.phar	/^$callback = function ($type, $data) use ($that, $callback, $out) {$/;"	v
callback	composer.phar	/^$callback = is_callable($output) ? $output : array($this, 'outputHandler');$/;"	v
callback	composer.phar	/^$this->callback = $this->buildCallback($callback);$/;"	v
callback	composer.phar	/^$this->callback = null;$/;"	v
callback	composer.phar	/^private $callback;$/;"	v
callbackGet	composer.phar	/^protected function callbackGet($notificationCode, $severity, $message, $messageCode, $bytesTransferred, $bytesMax)$/;"	f
caller	composer.phar	/^$caller = 'call';$/;"	v
caller	composer.phar	/^$caller = 'php';$/;"	v
caller	composer.phar	/^$caller = trim($match[1]);$/;"	v
canBeUsed	composer.phar	/^protected function canBeUsed()$/;"	f
candidateName	composer.phar	/^$candidateName = $candidate->getName();$/;"	v
candidateVersion	composer.phar	/^$candidateVersion = $candidate->getVersion();$/;"	v
candidates	composer.phar	/^ $candidates = array();$/;"	v
candidates	composer.phar	/^$candidates = $this->pool->whatProvides(strtolower($packageName), $constraint, true);$/;"	v
candidates	composer.phar	/^$candidates = $this->whatProvides(new Pool('dev'), $providerName);$/;"	v
candidates	composer.phar	/^$candidates = array();$/;"	v
candidates	composer.phar	/^$candidates = array_filter($candidates, function ($candidate) use ($name) {$/;"	v
candidates	composer.phar	/^$candidates = array_filter($candidates, function ($pkg) use ($phpConstraint) {$/;"	v
candidates	composer.phar	/^$candidates = array_merge($candidates, $this->packageByExactName[$name]);$/;"	v
candidates	composer.phar	/^$candidates = array_merge($candidates, $this->packageByName[$name]);$/;"	v
canonicalPackages	composer.phar	/^$canonicalPackages = array();$/;"	v
canonicalizeUrl	composer.phar	/^protected function canonicalizeUrl($url)$/;"	f
captureExitCode	composer.phar	/^private function captureExitCode()$/;"	f
captureOutput	composer.phar	/^$this->captureOutput = count(func_get_args()) > 1;$/;"	v
captureOutput	composer.phar	/^protected $captureOutput;$/;"	v
car	composer.phar	/^$car = $glob[$i];$/;"	v
catchExceptions	composer.phar	/^$this->catchExceptions = (bool) $boolean;$/;"	v
catchExceptions	composer.phar	/^private $catchExceptions = true;$/;"	v
categoryName	composer.phar	/^$categoryName = (string) $node;$/;"	v
categoryPackages	composer.phar	/^$categoryPackages = $this->readCategoryPackages($baseUrl, $categoryName);$/;"	v
categoryPath	composer.phar	/^$categoryPath = '\/c\/'.urlencode($categoryName).'\/packagesinfo.xml';$/;"	v
caution	composer.phar	/^public function caution($message)$/;"	f
caution	composer.phar	/^public function caution($message);$/;"	f
cell	composer.phar	/^$cell = $row[$column];$/;"	v
cell	composer.phar	/^$cell = isset($row[$column]) ? $row[$column] : '';$/;"	v
cellHeaderFormat	composer.phar	/^$this->cellHeaderFormat = $cellHeaderFormat;$/;"	v
cellHeaderFormat	composer.phar	/^private $cellHeaderFormat = '<info>%s<\/info>';$/;"	v
cellRowContentFormat	composer.phar	/^$this->cellRowContentFormat = $cellRowContentFormat;$/;"	v
cellRowContentFormat	composer.phar	/^private $cellRowContentFormat = ' %s ';$/;"	v
cellRowFormat	composer.phar	/^$this->cellRowFormat = $cellRowFormat;$/;"	v
cellRowFormat	composer.phar	/^private $cellRowFormat = '%s';$/;"	v
cellWidth	composer.phar	/^ $cellWidth = $cellWidth \/ $cell->getColspan();$/;"	v
cellWidth	composer.phar	/^$cellWidth = Helper::strlenWithoutDecoration($this->output->getFormatter(), $cell);$/;"	v
ch	composer.phar	/^$ch = curl_init();$/;"	v
chain	composer.phar	/^$chain = $this->watchChains[$literal];$/;"	v
changeList	composer.phar	/^$changeList = $fields[1];$/;"	v
changes	composer.phar	/^$changes = $this->commandResult;$/;"	v
changes	composer.phar	/^$changes = array_map(function ($elem) {$/;"	v
changeset	composer.phar	/^$changeset = JsonFile::parseJson($this->getContents($resource), $resource);$/;"	v
channelAlias	composer.phar	/^$channelAlias = (string) $xml->suggestedalias;$/;"	v
channelInfo	composer.phar	/^$channelInfo = $reader->read($this->url);$/;"	v
channelName	composer.phar	/^$channelName = (string) $packageInfo->p->c;$/;"	v
channelName	composer.phar	/^$channelName = (string) $xml->c;$/;"	v
channelName	composer.phar	/^$channelName = (string) $xml->name;$/;"	v
channelName	composer.phar	/^$this->channelName = $channelName;$/;"	v
channelName	composer.phar	/^private $channelName;$/;"	v
channelSummary	composer.phar	/^$channelSummary = (string) $xml->summary;$/;"	v
char	composer.phar	/^ $char = substr($json, $i, 1);$/;"	v
chars	composer.phar	/^$chars = substr(str_replace(PHP_EOL, "\\n", $this->bufferedOutput->fetch()), -2);$/;"	v
check	composer.phar	/^ $check = ($a << 24) + ($b << 16) + ($c << 8) + $d;$/;"	v
check	composer.phar	/^function check($element, $definition = null, $path = null, $additionalProp = null, $patternProperties = null)$/;"	f
check	composer.phar	/^public function check($element, $schema = null, $path = null, $i = null)$/;"	f
check	composer.phar	/^public function check($value = null, $schema = null, $path = null, $i = null)$/;"	f
check	composer.phar	/^public function check($value, $schema = null, $path = null, $i = null)$/;"	f
check	composer.phar	/^public function check($value, $schema = null, $path = null, $i = null);$/;"	f
checkAll	composer.phar	/^$checkAll = $input->getOption('no-check-all') ? 0 : ValidatingArrayLoader::CHECK_ALL;$/;"	v
checkArray	composer.phar	/^protected function checkArray($value, $schema = null, $path = null, $i = null)$/;"	f
checkComposerSchema	composer.phar	/^private function checkComposerSchema()$/;"	f
checkDiskSpace	composer.phar	/^private function checkDiskSpace($config)$/;"	f
checkEnum	composer.phar	/^protected function checkEnum($value, $schema = null, $path = null, $i = null)$/;"	f
checkForRootRequireProblems	composer.phar	/^protected function checkForRootRequireProblems($ignorePlatformReqs)$/;"	f
checkFormat	composer.phar	/^protected function checkFormat($value, $schema = null, $path = null, $i = null)$/;"	f
checkGit	composer.phar	/^private function checkGit()$/;"	f
checkGithubOauth	composer.phar	/^private function checkGithubOauth($domain, $token)$/;"	f
checkHttp	composer.phar	/^private function checkHttp($proto)$/;"	f
checkHttpProxy	composer.phar	/^private function checkHttpProxy()$/;"	f
checkHttpProxyFullUriRequestParam	composer.phar	/^private function checkHttpProxyFullUriRequestParam()$/;"	f
checkHttpsProxyFullUriRequestParam	composer.phar	/^private function checkHttpsProxyFullUriRequestParam()$/;"	f
checkListenerExpectedEvent	composer.phar	/^protected function checkListenerExpectedEvent($target, Event $event)$/;"	f
checkLock	composer.phar	/^$checkLock = !$input->getOption('no-check-lock');$/;"	v
checkMode	composer.phar	/^$this->checkMode = $checkMode;$/;"	v
checkMode	composer.phar	/^protected $checkMode = self::CHECK_MODE_NORMAL;$/;"	v
checkNumber	composer.phar	/^protected function checkNumber($value, $schema = null, $path = null, $i = null)$/;"	f
checkObject	composer.phar	/^protected function checkObject($value, $schema = null, $path = null, $i = null, $patternProperties = null)$/;"	f
checkPlatform	composer.phar	/^private function checkPlatform()$/;"	f
checkPublish	composer.phar	/^$checkPublish = !$input->getOption('no-check-publish');$/;"	v
checkServerExists	composer.phar	/^public static function checkServerExists($url, ProcessExecutor $processExecutor)$/;"	f
checkStream	composer.phar	/^public function checkStream()$/;"	f
checkString	composer.phar	/^protected function checkString($value, $schema = null, $path = null, $i = null)$/;"	f
checkTimeout	composer.phar	/^public function checkTimeout()$/;"	f
checkType	composer.phar	/^protected function checkType($value, $schema = null, $path = null, $i = null)$/;"	f
checkUndefined	composer.phar	/^protected function checkUndefined($value, $schema = null, $path = null, $i = null)$/;"	f
checkVersion	composer.phar	/^private function checkVersion()$/;"	f
checks	composer.phar	/^$checks = array($/;"	v
checksum	composer.phar	/^$checksum = $package->getDistSha1Checksum();$/;"	v
chgrp	composer.phar	/^public function chgrp($files, $group, $recursive = false)$/;"	f
children	composer.phar	/^ $children = $this->newline . $this->indent . $this->indent . JsonFile::encode($name).': '.$this->format($value, 1) . $children;$/;"	v
children	composer.phar	/^ $children = preg_replace($/;"	v
children	composer.phar	/^$children = $match[3];$/;"	v
children	composer.phar	/^$children = $package->contents->children();$/;"	v
children	composer.phar	/^$children = $package->release->filelist->children();$/;"	v
children	composer.phar	/^$children = new self($this->iterator->getChildren(), array());$/;"	v
children	composer.phar	/^$children = parent::getChildren();$/;"	v
children	composer.phar	/^$children = preg_replace_callback('{("'.preg_quote($name).'"\\s*:\\s*)('.self::$JSON_VALUE.')(,?)}', function ($matches) use ($name, $subName, $value, $that) {$/;"	v
childrenClean	composer.phar	/^$childrenClean = $children;$/;"	v
childrenClean	composer.phar	/^$childrenClean = preg_replace('{'.preg_quote($bestMatch).'\\s*,?\\s*}i', '', $childrenClean, -1, $count);$/;"	v
childrenClean	composer.phar	/^$childrenClean = preg_replace('{,\\s*'.preg_quote($bestMatch).'}i', '', $children, -1, $count);$/;"	v
childrenClean	composer.phar	/^$childrenClean = substr($that->format($curVal, 0), 1, -1);$/;"	v
chmod	composer.phar	/^public function chmod($files, $mode, $umask = 0000, $recursive = false)$/;"	f
choice	composer.phar	/^public function choice($question, array $choices, $default = null)$/;"	f
choice	composer.phar	/^public function choice($question, array $choices, $default = null);$/;"	f
choices	composer.phar	/^$choices = $question->getChoices();$/;"	v
choices	composer.phar	/^$choices = $this->choices;$/;"	v
choices	composer.phar	/^$choices = array();$/;"	v
choices	composer.phar	/^$this->choices = $choices;$/;"	v
choices	composer.phar	/^private $choices;$/;"	v
chown	composer.phar	/^public function chown($files, $user, $recursive = false)$/;"	f
class	composer.phar	/^            $class = substr($class, 1);$/;"	v
class	composer.phar	/^$class = $this->drivers[$this->type];$/;"	v
class	composer.phar	/^$class = $this->repositoryClasses[$type];$/;"	v
class	composer.phar	/^$class = isset($trace[$i]['class']) ? $trace[$i]['class'] : '';$/;"	v
class	composer.phar	/^$class = substr($class, 1);$/;"	v
classCounter	composer.phar	/^private static $classCounter = 0;$/;"	v
classLoader	composer.phar	/^$classLoader = $generator->createLoader($map);$/;"	v
classMap	composer.phar	/^            $this->classMap = $classMap;$/;"	v
classMap	composer.phar	/^            $this->classMap = array_merge($this->classMap, $classMap);$/;"	v
classMap	composer.phar	/^        $classMap = require __DIR__ . '\/autoload_classmap.php';$/;"	v
classMap	composer.phar	/^    private $classMap = array();$/;"	v
classMap	composer.phar	/^ $classMap = array();$/;"	v
classMap	composer.phar	/^$classMap = $this->addClassMapCode($filesystem, $basePath, $vendorPath, $dir, $blacklist, $namespaceFilter, $classMap);$/;"	v
classMap	composer.phar	/^$classMap = $this->addClassMapCode($filesystem, $basePath, $vendorPath, $dir, $blacklist, null, $classMap);$/;"	v
classMap	composer.phar	/^$classMap = require __DIR__ . '\/autoload_classmap.php';$/;"	v
classMap	composer.phar	/^$this->classMap = $classMap;$/;"	v
classMap	composer.phar	/^$this->classMap = array_merge($this->classMap, $classMap);$/;"	v
classMap	composer.phar	/^private $classMap = array();$/;"	v
classMapAuthoritative	composer.phar	/^        $this->classMapAuthoritative = $classMapAuthoritative;$/;"	v
classMapAuthoritative	composer.phar	/^    private $classMapAuthoritative = false;$/;"	v
classMapAuthoritative	composer.phar	/^$this->classMapAuthoritative = $classMapAuthoritative;$/;"	v
classMapAuthoritative	composer.phar	/^$this->classMapAuthoritative = (boolean) $classMapAuthoritative;$/;"	v
classMapAuthoritative	composer.phar	/^private $classMapAuthoritative = false;$/;"	v
classMapAuthoritative	composer.phar	/^protected $classMapAuthoritative = false;$/;"	v
className	composer.phar	/^$className = substr($callable, 0, strpos($callable, '::'));$/;"	v
classes	composer.phar	/^$classes = array();$/;"	v
classes	composer.phar	/^$classes = is_array($extra['class']) ? $extra['class'] : array($extra['class']);$/;"	v
classes	composer.phar	/^$classes = self::findClasses($filePath);$/;"	v
classmap	composer.phar	/^$classmap = $this->parseAutoloadsType(array_reverse($sortedPackageMap), 'classmap', $mainPackage);$/;"	v
classmapFile	composer.phar	/^$classmapFile = <<<EOF$/;"	v
cleanChanges	composer.phar	/^protected function cleanChanges(PackageInterface $package, $path, $update)$/;"	f
cleanEnv	composer.phar	/^public static function cleanEnv()$/;"	f
cleanStreamName	composer.phar	/^$cleanStreamName = str_replace('@', '', str_replace('\/', '_', str_replace('\/\/', '', $this->getStream())));$/;"	v
cleanedWhiteListedPattern	composer.phar	/^$cleanedWhiteListedPattern = str_replace('\\\\*', '.*', preg_quote($whiteListedPattern));$/;"	v
cleanup	composer.phar	/^private function cleanup()$/;"	f
cleanup	composer.phar	/^public function cleanup()$/;"	f
cleanup	composer.phar	/^public function cleanup();$/;"	f
cleanupClientSpec	composer.phar	/^public function cleanupClientSpec()$/;"	f
clear	composer.phar	/^public function clear()$/;"	f
clearCache	composer.phar	/^protected function clearCache(PackageInterface $package, $path)$/;"	f
clearErrorOutput	composer.phar	/^public function clearErrorOutput()$/;"	f
clearEscapeCodes	composer.phar	/^$clearEscapeCodes = '(?:39|49|0|22|24|25|27|28)';$/;"	v
clearOutput	composer.phar	/^public function clearOutput()$/;"	f
client	composer.phar	/^$client = $this->getClient();$/;"	v
clientSpec	composer.phar	/^$clientSpec = $this->getP4ClientSpec();$/;"	v
close	composer.phar	/^$close = '\\\\' !== DIRECTORY_SEPARATOR || !$running;$/;"	v
close	composer.phar	/^private function close()$/;"	f
close	composer.phar	/^public function close()$/;"	f
close	composer.phar	/^public function close();$/;"	f
cmd	composer.phar	/^$cmd = new Process(sprintf('%s config -l', ProcessExecutor::escape($gitBin)));$/;"	v
cmd	composer.phar	/^$cmd = sprintf('%s %s%s %s',$/;"	v
cmd	composer.phar	/^$cmd = sprintf('git remote set-url --push origin %s', ProcessExecutor::escape($pushUrl));$/;"	v
cmd	composer.phar	/^$cmd = sprintf('rm -rf %s', ProcessExecutor::escape($directory));$/;"	v
cmd	composer.phar	/^$cmd = sprintf('rmdir \/S \/Q %s', ProcessExecutor::escape(realpath($directory)));$/;"	v
cmd	composer.phar	/^public function cmd($esc)$/;"	f
cmdLine	composer.phar	/^$cmdLine = str_replace(array('%candidate%', '%branch%'), array($candidate, $branch), $scmCmdline);$/;"	v
code	composer.phar	/^$code = file_get_contents($classLoader->findFile($class));$/;"	v
code	composer.phar	/^$code = preg_replace('{^(\\s*)class\\s+(\\S+)}mi', '$1class $2_composer_tmp'.self::$classCounter, $code);$/;"	v
code	composer.phar	/^$this->code = $code;$/;"	v
code	composer.phar	/^private $code;$/;"	v
col	composer.phar	/^$col = null;$/;"	v
collectDependencies	composer.phar	/^protected function collectDependencies(Pool $pool, array $collected, PackageInterface $package)$/;"	f
collected	composer.phar	/^$collected = $this->collectDependencies($pool, $collected, $requiredPackage);$/;"	v
collectionParts	composer.phar	/^$collectionParts = array();$/;"	v
colors	composer.phar	/^private $colors = array('black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white', 'default');$/;"	v
columnWidths	composer.phar	/^$this->columnWidths = array();$/;"	v
columnWidths	composer.phar	/^private $columnWidths = array();$/;"	v
columns	composer.phar	/^ $columns = array_diff($columns, range($cellKey + 1, $cellKey + $cell->getColspan() - 1));$/;"	v
columns	composer.phar	/^$columns = array(0);$/;"	v
columns	composer.phar	/^$columns = count($row);$/;"	v
columns	composer.phar	/^$columns = range(0, $this->numberOfColumns - 1);$/;"	v
combine	composer.phar	/^private function combine($left, $right)$/;"	f
combineRelativePathWithBasePath	composer.phar	/^public static function combineRelativePathWithBasePath($relativePath, $basePath)$/;"	f
command	composer.phar	/^ $command = $this->find($name);$/;"	v
command	composer.phar	/^ $command = sprintf('mv %s %s', ProcessExecutor::escape($source), ProcessExecutor::escape($target));$/;"	v
command	composer.phar	/^ $command = sprintf('xcopy %s %s \/E \/I \/Q \/Y', ProcessExecutor::escape($source), ProcessExecutor::escape($target));$/;"	v
command	composer.phar	/^$command = $this->application->find(substr($text, 0, strpos($text, ' ')));$/;"	v
command	composer.phar	/^$command = $this->commands[$name];$/;"	v
command	composer.phar	/^$command = $this->generateP4Command($task, $useP4Client);$/;"	v
command	composer.phar	/^$command = $this->generateP4Command(' changes -m1 ' . $label);$/;"	v
command	composer.phar	/^$command = $this->generateP4Command(' files ' . $composerJsonPath, false);$/;"	v
command	composer.phar	/^$command = $this->generateP4Command(' login -a');$/;"	v
command	composer.phar	/^$command = $this->generateP4Command(' print ' . $composerJson);$/;"	v
command	composer.phar	/^$command = $this->generateP4Command('changes '. $this->getStream() . '\/...', false);$/;"	v
command	composer.phar	/^$command = $this->generateP4Command('depots', false);$/;"	v
command	composer.phar	/^$command = $this->generateP4Command('filelog ' . $main . '@' . $fromChangeList. ',' . $toChangeList);$/;"	v
command	composer.phar	/^$command = $this->generateP4Command('labels');$/;"	v
command	composer.phar	/^$command = $this->generateP4Command('login -s', false);$/;"	v
command	composer.phar	/^$command = $this->generateP4Command('streams \/\/' . $this->p4Depot . '\/...');$/;"	v
command	composer.phar	/^$command = $this->readline();$/;"	v
command	composer.phar	/^$command = 'echo $' . $name;$/;"	v
command	composer.phar	/^$command = 'echo ' . $password . ' | ' . $this->generateP4Command(' login -a', false);$/;"	v
command	composer.phar	/^$command = 'export P4USER=' . $this->p4User;$/;"	v
command	composer.phar	/^$command = 'git clone --no-checkout %s %s && cd '.$flag.'%2$s && git remote add composer %1$s && git fetch composer';$/;"	v
command	composer.phar	/^$command = 'git remote set-url composer %s && git fetch composer && git fetch --tags composer';$/;"	v
command	composer.phar	/^$command = 'git status --porcelain --untracked-files=no';$/;"	v
command	composer.phar	/^$command = 'gzip -cd ' . ProcessExecutor::escape($file) . ' > ' . ProcessExecutor::escape($targetFilepath);$/;"	v
command	composer.phar	/^$command = 'p4 set P4USER=' . $this->p4User;$/;"	v
command	composer.phar	/^$command = 'p4 set';$/;"	v
command	composer.phar	/^$command = 'unrar x ' . ProcessExecutor::escape($file) . ' ' . ProcessExecutor::escape($path) . ' && chmod -R u+w ' . ProcessExecutor::escape($path);$/;"	v
command	composer.phar	/^$command = 'unzip '.ProcessExecutor::escape($file).' -d '.ProcessExecutor::escape($path) . ' && chmod -R u+w ' . ProcessExecutor::escape($path);$/;"	v
command	composer.phar	/^$command = Command::create();$/;"	v
command	composer.phar	/^$command = call_user_func($commandCallable, $url);$/;"	v
command	composer.phar	/^$command = escapeshellcmd($command);$/;"	v
command	composer.phar	/^$command = sprintf("\/usr\/bin\/env %s -c 'stty -echo; %s; stty echo; echo \\$mypassword'", $shell, $readCmd);$/;"	v
command	composer.phar	/^$command = sprintf($template, ProcessExecutor::escape($gitRef));$/;"	v
command	composer.phar	/^$command = sprintf('git checkout %s --', ProcessExecutor::escape($branch));$/;"	v
command	composer.phar	/^$command = sprintf('git checkout -B %s %s -- && git reset --hard %2$s --', ProcessExecutor::escape($branch), ProcessExecutor::escape('composer\/'.$reference));$/;"	v
command	composer.phar	/^$command = sprintf('git log %s..%s --pretty=format:"%%h - %%an: %%s"', $fromReference, $toReference);$/;"	v
command	composer.phar	/^$command = sprintf('git reset --hard %s --', ProcessExecutor::escape($reference));$/;"	v
command	composer.phar	/^$command = sprintf('hg clone %s %s', $url, ProcessExecutor::escape($path));$/;"	v
command	composer.phar	/^$command = sprintf('hg log -r %s:%s --style compact', $fromReference, $toReference);$/;"	v
command	composer.phar	/^$command = sprintf('hg pull %s && hg up %s', $url, $ref);$/;"	v
command	composer.phar	/^$command = sprintf('hg up %s', $ref);$/;"	v
command	composer.phar	/^$command = sprintf('svn log -r%s:%s --incremental', $fromRevision, $toRevision);$/;"	v
command	composer.phar	/^$this->command = $command;$/;"	v
command	composer.phar	/^$this->command = $this->getApplication()->find($input->getArgument('command_name'));$/;"	v
command	composer.phar	/^$this->command = null;$/;"	v
command	composer.phar	/^private $command;$/;"	v
command	composer.phar	/^protected $command;$/;"	v
commandCallable	composer.phar	/^$commandCallable = function ($url) use ($command) {$/;"	v
commandCallable	composer.phar	/^$commandCallable = function ($url) use ($ref, $path, $command) {$/;"	v
commandCallable	composer.phar	/^$commandCallable = function ($url) use ($repoDir) {$/;"	v
commandCallable	composer.phar	/^$commandCallable = function ($url) {$/;"	v
commandEvent	composer.phar	/^$commandEvent = new CommandEvent(PluginEvents::COMMAND, 'archive', $input, $output);$/;"	v
commandEvent	composer.phar	/^$commandEvent = new CommandEvent(PluginEvents::COMMAND, 'depends', $input, $output);$/;"	v
commandEvent	composer.phar	/^$commandEvent = new CommandEvent(PluginEvents::COMMAND, 'diagnose', $input, $output);$/;"	v
commandEvent	composer.phar	/^$commandEvent = new CommandEvent(PluginEvents::COMMAND, 'dump-autoload', $input, $output);$/;"	v
commandEvent	composer.phar	/^$commandEvent = new CommandEvent(PluginEvents::COMMAND, 'install', $input, $output);$/;"	v
commandEvent	composer.phar	/^$commandEvent = new CommandEvent(PluginEvents::COMMAND, 'licenses', $input, $output);$/;"	v
commandEvent	composer.phar	/^$commandEvent = new CommandEvent(PluginEvents::COMMAND, 'remove', $input, $output);$/;"	v
commandEvent	composer.phar	/^$commandEvent = new CommandEvent(PluginEvents::COMMAND, 'require', $input, $output);$/;"	v
commandEvent	composer.phar	/^$commandEvent = new CommandEvent(PluginEvents::COMMAND, 'search', $input, $output);$/;"	v
commandEvent	composer.phar	/^$commandEvent = new CommandEvent(PluginEvents::COMMAND, 'show', $input, $output);$/;"	v
commandEvent	composer.phar	/^$commandEvent = new CommandEvent(PluginEvents::COMMAND, 'status', $input, $output);$/;"	v
commandEvent	composer.phar	/^$commandEvent = new CommandEvent(PluginEvents::COMMAND, 'update', $input, $output);$/;"	v
commandList	composer.phar	/^$commandList = $this->commands;$/;"	v
commandName	composer.phar	/^$commandName = $commandList[$nameOrAlias]->getName();$/;"	v
commandName	composer.phar	/^$commandName = $this->find($name)->getName();$/;"	v
commandName	composer.phar	/^$commandName = '';$/;"	v
commandName	composer.phar	/^$this->commandName = $commandName;$/;"	v
commandName	composer.phar	/^private $commandName;$/;"	v
commandResult	composer.phar	/^$this->commandResult = "";$/;"	v
commandResult	composer.phar	/^protected $commandResult;$/;"	v
commandShouldRun	composer.phar	/^private $commandShouldRun = true;$/;"	v
commandShouldRun	composer.phar	/^public function commandShouldRun()$/;"	f
commandline	composer.phar	/^$commandline = $this->commandline;$/;"	v
commandline	composer.phar	/^$commandline = 'cmd \/V:ON \/E:ON \/D \/C "('.$commandline.')';$/;"	v
commandline	composer.phar	/^$this->commandline = $commandline;$/;"	v
commandline	composer.phar	/^$this->commandline = '('.$this->commandline.') 3>\/dev\/null; code=$?; echo $code >&3; exit $code';$/;"	v
commandline	composer.phar	/^private $commandline;$/;"	v
commands	composer.phar	/^$commands = array();$/;"	v
commands	composer.phar	/^$commands = array_filter($commands, function ($nameOrAlias) use ($commandList, $commands) {$/;"	v
commands	composer.phar	/^$commands = parent::getDefaultCommands();$/;"	v
commands	composer.phar	/^$commands = preg_grep('{^'.$expr.'}', $allCommands);$/;"	v
commands	composer.phar	/^$this->commands = array();$/;"	v
commands	composer.phar	/^private $commands = array();$/;"	v
commands	composer.phar	/^private $commands;$/;"	v
commit	composer.phar	/^$commit = JsonFile::parseJson($this->getContents($resource), $resource);$/;"	v
commitLogs	composer.phar	/^$commitLogs = $this->perforce->getCommitLogs($fromReference, $toReference);$/;"	v
commonPath	composer.phar	/^$commonPath = $to;$/;"	v
commonPath	composer.phar	/^$commonPath = rtrim($commonPath, '\/') . '\/';$/;"	v
commonPath	composer.phar	/^$commonPath = strtr(dirname($commonPath), '\\\\', '\/');$/;"	v
commonPathCode	composer.phar	/^$commonPathCode = str_repeat('..\/', $sourcePathDepth);$/;"	v
commonPathCode	composer.phar	/^$commonPathCode = str_repeat('dirname(', $sourcePathDepth).'__DIR__'.str_repeat(')', $sourcePathDepth);$/;"	v
compact	composer.phar	/^$compact = new TableStyle();$/;"	v
comparators	composer.phar	/^$this->comparators = $comparators;$/;"	v
comparators	composer.phar	/^private $comparators = array();$/;"	v
compare	composer.phar	/^public static function compare($version1, $operator, $version2)$/;"	f
compareByPriorityPreferInstalled	composer.phar	/^public function compareByPriorityPreferInstalled(Pool $pool, array $installedMap, PackageInterface $a, PackageInterface $b, $requiredPackage = null, $ignoreReplace = false)$/;"	f
comparison	composer.phar	/^$comparison = strcmp($a['name'], $b['name']);$/;"	v
completeBars	composer.phar	/^$completeBars = $this->barWidth;$/;"	v
completeBars	composer.phar	/^$completeBars = 0;$/;"	v
completeBars	composer.phar	/^$completeBars = floor($bar->getMaxSteps() > 0 ? $bar->getProgressPercent() * $bar->getBarWidth() : $bar->getProgress() % $bar->getBarWidth());$/;"	v
completeBars	composer.phar	/^$completeBars = floor($percent * $this->barWidth);$/;"	v
completeBars	composer.phar	/^$completeBars = floor($this->current % $this->barWidth);$/;"	v
components	composer.phar	/^$components = $this->parse($uri);$/;"	v
components	composer.phar	/^$components = array($/;"	v
components	composer.phar	/^$components = array();$/;"	v
composer	composer.phar	/^ $composer = $this->getComposer();$/;"	v
composer	composer.phar	/^ $composer = new Composer();$/;"	v
composer	composer.phar	/^$composer = $jsonFile->read();$/;"	v
composer	composer.phar	/^$composer = $this->getComposer();$/;"	v
composer	composer.phar	/^$composer = $this->getComposer(false);$/;"	v
composer	composer.phar	/^$composer = $this->getComposer(false, true);$/;"	v
composer	composer.phar	/^$composer = $this->getComposer(true, $input->getOption('no-plugins'));$/;"	v
composer	composer.phar	/^$composer = $this->getContents($resource);$/;"	v
composer	composer.phar	/^$composer = Factory::create($io, $file);$/;"	v
composer	composer.phar	/^$composer = Factory::create($io, null, $disablePlugins);$/;"	v
composer	composer.phar	/^$composer = JsonFile::parseJson($composer, $identifier);$/;"	v
composer	composer.phar	/^$composer = JsonFile::parseJson($composer, $resource);$/;"	v
composer	composer.phar	/^$composer = JsonFile::parseJson($output, $this->baseUrl . $resource . $rev);$/;"	v
composer	composer.phar	/^$composer = JsonFile::parseJson($repoData['data'], $resource);$/;"	v
composer	composer.phar	/^$composer = JsonFile::parseJson($this->getContents($resource));$/;"	v
composer	composer.phar	/^$composer = false;$/;"	v
composer	composer.phar	/^$composer = null;$/;"	v
composer	composer.phar	/^$composer = self::createComposer($io, $config->get('home') . '\/composer.json', $disablePlugins, $config->get('home'), false);$/;"	v
composer	composer.phar	/^$this->composer = $application->getComposer($required, $disablePlugins);$/;"	v
composer	composer.phar	/^$this->composer = $composer;$/;"	v
composer	composer.phar	/^$this->composer = Factory::create($this->io, null, $disablePlugins);$/;"	v
composer	composer.phar	/^$this->composer = null;$/;"	v
composer	composer.phar	/^private $composer;$/;"	v
composer	composer.phar	/^protected $composer;$/;"	v
composerBackup	composer.phar	/^$composerBackup = file_get_contents($json->getPath());$/;"	v
composerBackup	composer.phar	/^$composerBackup = file_get_contents($jsonFile->getPath());$/;"	v
composerDefinition	composer.phar	/^$composerDefinition = $json->read();$/;"	v
composerFile	composer.phar	/^$composerFile = "zip:\/\/{$file->getPathname()}#$configurationFileName";$/;"	v
composerFile	composer.phar	/^$composerFile = $localConfig;$/;"	v
composerFilePath	composer.phar	/^$composerFilePath = $path.'composer.json';$/;"	v
composerInfo	composer.phar	/^$this->composerInfo = $this->perforce->getComposerInformation('\/\/' . $this->depot . '\/' . $identifier);$/;"	v
composerInfo	composer.phar	/^protected $composerInfo;$/;"	v
composerInfoIdentifier	composer.phar	/^$this->composerInfoIdentifier = $identifier;$/;"	v
composerInfoIdentifier	composer.phar	/^protected $composerInfoIdentifier;$/;"	v
composerJson	composer.phar	/^$composerJson = $identifier. '\/composer.json';$/;"	v
composerJson	composer.phar	/^$composerJson = substr($identifier, 0, $index) . '\/composer.json@' . $id;$/;"	v
composerJsonPath	composer.phar	/^$composerJsonPath = substr($identifier, 0, $index) . '\/composer.json' . substr($identifier, $index);$/;"	v
composerPackageAlias	composer.phar	/^$composerPackageAlias = "{$this->vendorAlias}\/{$packageDefinition->getPackageName()}";$/;"	v
composerPackageAlias	composer.phar	/^$composerPackageAlias = $this->buildComposerPackageName($channelInfo->getAlias(), $packageDefinition->getPackageName());$/;"	v
composerPackageName	composer.phar	/^$composerPackageName = $this->buildComposerPackageName($packageDefinition->getChannelName(), $packageDefinition->getPackageName());$/;"	v
composerPluginApi	composer.phar	/^$composerPluginApi = new CompletePackage('composer-plugin-api', $version, $prettyVersion);$/;"	v
composerRequire	composer.phar	/^function composerRequire$suffix(\\$file)$/;"	f
composerRequireComposerPhar1446849218	composer.phar	/^function composerRequireComposerPhar1446849218($file)$/;"	f
composer_info	composer.phar	/^$composer_info = $this->perforce->getComposerInformation($identifier);$/;"	v
composer_info	composer.phar	/^$composer_info = json_decode($rawData, true);$/;"	v
computeImportance	composer.phar	/^$computeImportance = function ($name) use (&$computeImportance, &$computing, &$computed, $usageList) {$/;"	v
computeWhatProvides	composer.phar	/^private function computeWhatProvides($name, $constraint, $mustMatchName = false)$/;"	f
computed	composer.phar	/^$computed = array();$/;"	v
computing	composer.phar	/^$computing = array();$/;"	v
conditionStack	composer.phar	/^$this->conditionStack = array('INITIAL');$/;"	v
conditionStack	composer.phar	/^private $conditionStack;$/;"	v
conditions	composer.phar	/^private $conditions = array($/;"	v
config	composer.phar	/^ $config = $this->file->read();$/;"	v
config	composer.phar	/^ $config = Factory::createConfig();$/;"	v
config	composer.phar	/^ $config = static::createConfig($io, $cwd);$/;"	v
config	composer.phar	/^ $this->config = static::$defaultConfig;$/;"	v
config	composer.phar	/^$config = $composer->getConfig();$/;"	v
config	composer.phar	/^$config = $json->read();$/;"	v
config	composer.phar	/^$config = $this;$/;"	v
config	composer.phar	/^$config = Factory::createConfig();$/;"	v
config	composer.phar	/^$config = JsonFile::parseJson($json);$/;"	v
config	composer.phar	/^$config = JsonFile::parseJson(file_get_contents($json), $json);$/;"	v
config	composer.phar	/^$config = new Config(true, $cwd);$/;"	v
config	composer.phar	/^$config = static::createConfig($io);$/;"	v
config	composer.phar	/^$this->config = $config;$/;"	v
config	composer.phar	/^$this->config = $config['package'];$/;"	v
config	composer.phar	/^$this->config = Factory::createConfig($this->getIO());$/;"	v
config	composer.phar	/^$this->config = array($this->config);$/;"	v
config	composer.phar	/^$this->config = null;$/;"	v
config	composer.phar	/^private $config;$/;"	v
config	composer.phar	/^protected $config;$/;"	v
configFile	composer.phar	/^ $configFile = $input->getOption('global')$/;"	v
configFile	composer.phar	/^$this->configFile = new JsonFile($configFile);$/;"	v
configFile	composer.phar	/^protected $configFile;$/;"	v
configSource	composer.phar	/^$configSource = $this->config->getAuthConfigSource();$/;"	v
configSource	composer.phar	/^$configSource = new JsonConfigSource(new JsonFile('composer.json'));$/;"	v
configSource	composer.phar	/^$this->configSource = $source;$/;"	v
configSource	composer.phar	/^$this->configSource = new JsonConfigSource($this->configFile);$/;"	v
configSource	composer.phar	/^private $configSource;$/;"	v
configSource	composer.phar	/^protected $configSource;$/;"	v
configurationFileName	composer.phar	/^$configurationFileName = $zip->getNameIndex($foundFileIndex);$/;"	v
configure	composer.phar	/^$configure = $match[1];$/;"	v
configure	composer.phar	/^protected function configure()$/;"	f
configureIO	composer.phar	/^protected function configureIO(InputInterface $input, OutputInterface $output)$/;"	f
configurePackageTransportOptions	composer.phar	/^protected function configurePackageTransportOptions(PackageInterface $package)$/;"	f
confirm	composer.phar	/^public function confirm($question, $default = true)$/;"	f
confirm	composer.phar	/^public function confirm($question, $default = true);$/;"	f
confirmMediaType	composer.phar	/^public function confirmMediaType($uriRetriever, $uri)$/;"	f
conflict	composer.phar	/^$conflict = $this->decisions->decisionRule($literal);$/;"	v
conflict	composer.phar	/^$conflict = $this->watchGraph->propagateLiteral($/;"	v
conflict	composer.phar	/^public function conflict($literal)$/;"	f
conflictRule	composer.phar	/^$conflictRule = $this->propagate($level);$/;"	v
conflicts	composer.phar	/^$conflicts = array();$/;"	v
conflicts	composer.phar	/^$this->conflicts = $conflicts;$/;"	v
conflicts	composer.phar	/^$this->conflicts = $this->replaceSelfVersionDependencies($conflicts, 'conflicts');$/;"	v
conflicts	composer.phar	/^protected $conflicts = array();$/;"	v
conflicts	composer.phar	/^protected $conflicts;$/;"	v
conjunctive	composer.phar	/^$this->conjunctive = $conjunctive;$/;"	v
conjunctive	composer.phar	/^protected $conjunctive;$/;"	v
connectClient	composer.phar	/^public function connectClient()$/;"	f
constraint	composer.phar	/^$constraint = $constraintObjects[0];$/;"	v
constraint	composer.phar	/^$constraint = $io->askAndValidate($/;"	v
constraint	composer.phar	/^$constraint = $match[1];$/;"	v
constraint	composer.phar	/^$constraint = $orGroups[0];$/;"	v
constraint	composer.phar	/^$constraint = $targetPackageVersion ? $this->getParser()->parseConstraints($targetPackageVersion) : null;$/;"	v
constraint	composer.phar	/^$constraint = $this->findBestVersionForPackage($input, $package, $phpVersion);$/;"	v
constraint	composer.phar	/^$constraint = $this->versionParser->parseConstraints($version);$/;"	v
constraint	composer.phar	/^$constraint = $versionParser->parseConstraints($constraint);$/;"	v
constraint	composer.phar	/^$constraint = $versionParser->parseConstraints($dependencyConstraint->getConstraint());$/;"	v
constraint	composer.phar	/^$constraint = new Constraint($operator, $b->getVersion());$/;"	v
constraint	composer.phar	/^$constraint = new Constraint($operator, $version2);$/;"	v
constraint	composer.phar	/^$constraint = new Constraint('=', $curPackage->getVersion());$/;"	v
constraint	composer.phar	/^$constraint = new Constraint('=', $package->getVersion());$/;"	v
constraint	composer.phar	/^$constraint = new Constraint('=', $rootPackage->getVersion());$/;"	v
constraint	composer.phar	/^$constraint = new Constraint('=', $version);$/;"	v
constraint	composer.phar	/^$constraint = new MultiConstraint($constraintObjects);$/;"	v
constraint	composer.phar	/^$constraint = new MultiConstraint($orGroups, false);$/;"	v
constraint	composer.phar	/^$constraint = null;$/;"	v
constraint	composer.phar	/^$this->constraint = $constraint;$/;"	v
constraint	composer.phar	/^private $constraint;$/;"	v
constraint	composer.phar	/^protected $constraint;$/;"	v
constraintObjects	composer.phar	/^$constraintObjects = $this->parseConstraint($andConstraints[0]);$/;"	v
constraintObjects	composer.phar	/^$constraintObjects = array();$/;"	v
constraintToText	composer.phar	/^protected function constraintToText($constraint)$/;"	f
constraints	composer.phar	/^$constraints = $match[1];$/;"	v
constraints	composer.phar	/^$constraints = $versionParser->parseConstraints($constraints);$/;"	v
constraints	composer.phar	/^$constraints = array();$/;"	v
constraints	composer.phar	/^$constraints = empty($match[1]) ? '*' : $match[1];$/;"	v
constraints	composer.phar	/^$this->constraints = $constraints;$/;"	v
constraints	composer.phar	/^protected $constraints;$/;"	v
contains	composer.phar	/^$this->contains = $contains;$/;"	v
contains	composer.phar	/^private $contains = array();$/;"	v
contains	composer.phar	/^protected $contains = array();$/;"	v
contains	composer.phar	/^public function contains($pattern)$/;"	f
containsEqual	composer.phar	/^public function containsEqual($rule)$/;"	f
content	composer.phar	/^$content = $fileinfo->getContents();$/;"	v
content	composer.phar	/^$content = $this->buffer;$/;"	v
content	composer.phar	/^$content = $this->format($content);$/;"	v
content	composer.phar	/^$content = $this->requestContent($baseUrl, $depthPath);$/;"	v
content	composer.phar	/^$content = $this->rfs->getContents($origin, $url, false);$/;"	v
content	composer.phar	/^$content = file_get_contents($from);$/;"	v
content	composer.phar	/^$content = file_get_contents($this->getPathname());$/;"	v
content	composer.phar	/^$content = file_get_contents($this->path);$/;"	v
content	composer.phar	/^$content = file_get_contents($vendorPath.'\/autoload.php');$/;"	v
content	composer.phar	/^$content = json_decode($composerFileContents, true);$/;"	v
content	composer.phar	/^$content = sprintf($this->style->getCellRowContentFormat(), $cell);$/;"	v
content	composer.phar	/^$content = strtr($content, $replacements);$/;"	v
contentDir	composer.phar	/^$contentDir = $this->getFolderContent($temporaryDir);$/;"	v
contentDir	composer.phar	/^$contentDir = $this->getFolderContent((string) reset($contentDir));$/;"	v
contentHash	composer.phar	/^$this->contentHash = $this->getContentHash($composerFileContents);$/;"	v
contentHash	composer.phar	/^private $contentHash;$/;"	v
contentType	composer.phar	/^ $this->contentType = null;$/;"	v
contentType	composer.phar	/^$contentType = $uriRetriever->getContentType();$/;"	v
contentType	composer.phar	/^$this->contentType = $contentType;$/;"	v
contentType	composer.phar	/^$this->contentType = trim($match[1]);$/;"	v
contentType	composer.phar	/^protected $contentType;$/;"	v
contents	composer.phar	/^ $contents = $zip->getFromIndex($i);$/;"	v
contents	composer.phar	/^ $contents = preg_replace('{"[^"\\\\\\\\]*+(\\\\\\\\.[^"\\\\\\\\]*+)*+"|\\'[^\\'\\\\\\\\]*+(\\\\\\\\.[^\\'\\\\\\\\]*+)*+\\'}s', 'null', $contents);$/;"	v
contents	composer.phar	/^ $contents = preg_replace('{<<<\\s*(\\'?)(\\w+)\\\\1(?:\\r\\n|\\n|\\r)(?:.*?)(?:\\r\\n|\\n|\\r)\\\\2(?=\\r\\n|\\n|\\r|;)}s', 'null', $contents);$/;"	v
contents	composer.phar	/^ $contents = preg_replace('{\\?>.+<\\?}s', '?><?', $contents);$/;"	v
contents	composer.phar	/^ $this->contents = preg_replace($/;"	v
contents	composer.phar	/^$contents = "";$/;"	v
contents	composer.phar	/^$contents = "{\\n    \\"config\\": {\\n    }\\n}\\n";$/;"	v
contents	composer.phar	/^$contents = "{\\n}\\n";$/;"	v
contents	composer.phar	/^$contents = $this->uriRetriever->retrieve($fetchUri);$/;"	v
contents	composer.phar	/^$contents = '{}';$/;"	v
contents	composer.phar	/^$contents = @php_strip_whitespace($path);$/;"	v
contents	composer.phar	/^$contents = file_get_contents($ignoreFile);$/;"	v
contents	composer.phar	/^$contents = file_get_contents($json->getPath());$/;"	v
contents	composer.phar	/^$contents = file_get_contents($this->file->getPath());$/;"	v
contents	composer.phar	/^$contents = preg_replace('{^.+?<\\?}s', '<?', $contents, 1, $replacements);$/;"	v
contents	composer.phar	/^$contents = substr($contents, 0, $pos);$/;"	v
contents	composer.phar	/^$contents = trim($contents);$/;"	v
contents	composer.phar	/^$this->contents = $contents === '{}' ? '{' . $this->newline . '}' : $contents;$/;"	v
contents	composer.phar	/^$this->contents = $matches[1] . $matches[2] . $links . $matches[4];$/;"	v
contents	composer.phar	/^$this->contents = $matches[1] . JsonFile::encode($key).': '.$content . $matches[3];$/;"	v
contents	composer.phar	/^$this->contents = preg_replace($/;"	v
contents	composer.phar	/^$this->contents = preg_replace($nodeRegex, '$1$2'.$this->newline.$this->indent.'$4$5', $this->contents);$/;"	v
contents	composer.phar	/^$this->contents = preg_replace($nodeRegex, addcslashes('${1}${2}'.$children.'${4}${5}', '\\\\'), $this->contents);$/;"	v
contents	composer.phar	/^$this->contents = preg_replace_callback($nodeRegex, function ($matches) use ($that, $name, $subName, $childrenClean) {$/;"	v
contents	composer.phar	/^private $contents;$/;"	v
context	composer.phar	/^$context = StreamContextFactory::getContext($repoUrl, $opts);$/;"	v
context	composer.phar	/^$context = StreamContextFactory::getContext($url, $opts);$/;"	v
context	composer.phar	/^$context = stream_context_create(array($/;"	v
copied	composer.phar	/^$copied = copy($from, $to);$/;"	v
copied	composer.phar	/^$copied = file_put_contents($to, $content);$/;"	v
copy	composer.phar	/^public function copy($originFile, $targetFile, $override = false)$/;"	f
copy	composer.phar	/^public function copy($originUrl, $fileUrl, $fileName, $progress = true, $options = array())$/;"	f
copyFile	composer.phar	/^private function copyFile($from, $to, $tasks, $vars)$/;"	f
copyFiles	composer.phar	/^private function copyFiles($files, $source, $target, $roles, $vars)$/;"	f
copyFrom	composer.phar	/^public function copyFrom($file, $source)$/;"	f
copyOnWindows	composer.phar	/^$copyOnWindows = $options['copy_on_windows'];$/;"	v
copyOnWindows	composer.phar	/^$copyOnWindows = false;$/;"	v
copyRow	composer.phar	/^private function copyRow($rows, $line)$/;"	f
copyThenRemove	composer.phar	/^public function copyThenRemove($source, $target)$/;"	f
copyTo	composer.phar	/^public function copyTo($file, $target)$/;"	f
count	composer.phar	/^$count = count($license);$/;"	v
count	composer.phar	/^$count = preg_match($re, $str, $matches);$/;"	v
count	composer.phar	/^private $count = -1;$/;"	v
count	composer.phar	/^public function count()$/;"	f
create	composer.phar	/^public static function create($expr)$/;"	f
create	composer.phar	/^public static function create($repoConfig, $port, $path, ProcessExecutor $process, IOInterface $io)$/;"	f
create	composer.phar	/^public static function create()$/;"	f
create	composer.phar	/^public static function create(Command $parent = null)$/;"	f
create	composer.phar	/^public static function create(IOInterface $io, $config = null, $disablePlugins = false)$/;"	f
create	composer.phar	/^public static function create(IOInterface $io, Composer $composer)$/;"	f
create	composer.phar	/^public static function create(Process $process, $input)$/;"	f
create	composer.phar	/^public static function create(array $arguments = array())$/;"	f
createAdditionalStyles	composer.phar	/^public static function createAdditionalStyles()$/;"	f
createAliasPackage	composer.phar	/^protected function createAliasPackage(PackageInterface $package, $alias, $prettyAlias)$/;"	f
createArchiveManager	composer.phar	/^public function createArchiveManager(Config $config, Downloader\\DownloadManager $dm = null)$/;"	f
createAuthFromConfig	composer.phar	/^private function createAuthFromConfig()$/;"	f
createAuthFromUrl	composer.phar	/^private function createAuthFromUrl()$/;"	f
createComposer	composer.phar	/^public function createComposer(IOInterface $io, $localConfig = null, $disablePlugins = false, $cwd = null, $fullLoad = true)$/;"	f
createConfig	composer.phar	/^public static function createConfig(IOInterface $io = null, $cwd = null)$/;"	f
createConflictRule	composer.phar	/^protected function createConflictRule(PackageInterface $issuer, PackageInterface $provider, $reason, $reasonData = null)$/;"	f
createDefaultInstallers	composer.phar	/^protected function createDefaultInstallers(Installer\\InstallationManager $im, Composer $composer, IOInterface $io)$/;"	f
createDefaultRepositories	composer.phar	/^public static function createDefaultRepositories(IOInterface $io = null, Config $config = null, RepositoryManager $rm = null)$/;"	f
createDefinition	composer.phar	/^private function createDefinition()$/;"	f
createDownloadManager	composer.phar	/^protected function createDownloadManager(IOInterface $io, Config $config)$/;"	f
createDownloadManager	composer.phar	/^public function createDownloadManager(IOInterface $io, Config $config, EventDispatcher $eventDispatcher = null)$/;"	f
createGlobalComposer	composer.phar	/^protected function createGlobalComposer(IOInterface $io, Config $config, $disablePlugins)$/;"	f
createInstallOneOfRule	composer.phar	/^protected function createInstallOneOfRule(array $packages, $reason, $job)$/;"	f
createInstallationManager	composer.phar	/^protected function createInstallationManager()$/;"	f
createLoader	composer.phar	/^public function createLoader(array $autoloads)$/;"	f
createMap	composer.phar	/^public static function createMap($path, $blacklist = null, IOInterface $io = null, $namespace = null)$/;"	f
createMessage	composer.phar	/^protected function createMessage()$/;"	f
createPackage	composer.phar	/^protected function createPackage(array $data, $class)$/;"	f
createPluginManager	composer.phar	/^protected function createPluginManager(IOInterface $io, Composer $composer, Composer $globalComposer = null)$/;"	f
createPolicy	composer.phar	/^private function createPolicy()$/;"	f
createPool	composer.phar	/^private function createPool($withDevReqs, RepositoryInterface $lockedRepository = null)$/;"	f
createProgressBar	composer.phar	/^public function createProgressBar($max = 0)$/;"	f
createRemoveRule	composer.phar	/^protected function createRemoveRule(PackageInterface $package, $reason, $job)$/;"	f
createRepository	composer.phar	/^public function createRepository($type, $config)$/;"	f
createRepositoryManager	composer.phar	/^protected function createRepositoryManager(IOInterface $io, Config $config, EventDispatcher $eventDispatcher = null)$/;"	f
createRequest	composer.phar	/^private function createRequest(RootPackageInterface $rootPackage, PlatformRepository $platformRepo)$/;"	f
createRequireRule	composer.phar	/^protected function createRequireRule(PackageInterface $package, array $providers, $reason, $reasonData = null)$/;"	f
createStyleFromString	composer.phar	/^private function createStyleFromString($string)$/;"	f
credentials	composer.phar	/^protected $credentials;$/;"	v
crossingChar	composer.phar	/^$this->crossingChar = $crossingChar;$/;"	v
crossingChar	composer.phar	/^private $crossingChar = '+';$/;"	v
ctx	composer.phar	/^$ctx = StreamContextFactory::getContext($fileUrl, $options, array('notification' => array($this, 'callbackGet')));$/;"	v
curVal	composer.phar	/^$curVal = json_decode($matches[2], true);$/;"	v
curVal	composer.phar	/^$curVal = json_decode('{'.$children.'}', true);$/;"	v
curVal	composer.phar	/^$curVal = json_decode('{'.$matches[3].'}', true);$/;"	v
curlVersion	composer.phar	/^$curlVersion = curl_version();$/;"	v
currPeriod	composer.phar	/^$currPeriod = (int) ($step \/ $this->redrawFreq);$/;"	v
currPeriod	composer.phar	/^$currPeriod = (int) ($this->current \/ $this->redrawFreq);$/;"	v
current	composer.phar	/^$current = (int) $current;$/;"	v
current	composer.phar	/^$this->current = $current;$/;"	v
current	composer.phar	/^$this->current = 0;$/;"	v
current	composer.phar	/^$this->current = new SplFileInfo(parent::current(), $this->subPath, $this->subPathname);$/;"	v
current	composer.phar	/^private $current;$/;"	v
current	composer.phar	/^public function current()$/;"	f
currentArguments	composer.phar	/^$currentArguments = $this->definition->getArguments();$/;"	v
currentOffset	composer.phar	/^$this->currentOffset = 0;$/;"	v
currentOffset	composer.phar	/^protected $currentOffset;$/;"	v
currentPackages	composer.phar	/^$currentPackages = $this->getCurrentPackages($withDevReqs, $installedRepo);$/;"	v
currentPluginApiConstraint	composer.phar	/^$currentPluginApiConstraint = new Constraint('==', $this->versionParser->normalize($currentPluginApiVersion));$/;"	v
currentPluginApiVersion	composer.phar	/^$currentPluginApiVersion = $this->getPluginApiVersion();$/;"	v
currentType	composer.phar	/^$this->currentType = $this->types[$this->currentTypeOffset];$/;"	v
currentType	composer.phar	/^$this->currentType = -1;$/;"	v
currentType	composer.phar	/^protected $currentType;$/;"	v
currentTypeOffset	composer.phar	/^$this->currentTypeOffset = -1;$/;"	v
currentTypeOffset	composer.phar	/^protected $currentTypeOffset;$/;"	v
cursor	composer.phar	/^$cursor = 0;$/;"	v
cwd	composer.phar	/^$cwd = $cwd ?: getcwd();$/;"	v
cwd	composer.phar	/^$cwd = getcwd();$/;"	v
cwd	composer.phar	/^$cwd = null;$/;"	v
cwd	composer.phar	/^$cwd = realpath(".");$/;"	v
cwd	composer.phar	/^$cwd = realpath(getcwd());$/;"	v
cwd	composer.phar	/^$this->cwd = $cwd;$/;"	v
cwd	composer.phar	/^$this->cwd = getcwd();$/;"	v
cwd	composer.phar	/^private $cwd;$/;"	v
data	composer.phar	/^$data = $data->{$path};$/;"	v
data	composer.phar	/^$data = $data[$key];$/;"	v
data	composer.phar	/^$data = $data[$path];$/;"	v
data	composer.phar	/^$data = $data['config'];$/;"	v
data	composer.phar	/^$data = $describedNamespace$/;"	v
data	composer.phar	/^$data = $driver->getComposerInformation($driver->getRootIdentifier());$/;"	v
data	composer.phar	/^$data = $json->read();$/;"	v
data	composer.phar	/^$data = $this->config->all();$/;"	v
data	composer.phar	/^$data = $this->dumpValues($package, $keys, $data);$/;"	v
data	composer.phar	/^$data = $this->fetchFile($jsonUrl, 'packages.json');$/;"	v
data	composer.phar	/^$data = $this->getErrorOutput();$/;"	v
data	composer.phar	/^$data = $this->getLockData();$/;"	v
data	composer.phar	/^$data = $this->getOutput();$/;"	v
data	composer.phar	/^$data = $this->loadRootServerFile();$/;"	v
data	composer.phar	/^$data = '';$/;"	v
data	composer.phar	/^$data = JsonFile::parseJson($contents, $this->cache->getRoot().$cacheKey);$/;"	v
data	composer.phar	/^$data = JsonFile::parseJson($json, $filename);$/;"	v
data	composer.phar	/^$data = array();$/;"	v
data	composer.phar	/^$data = json_decode($content);$/;"	v
data	composer.phar	/^$data = json_decode($json, true);$/;"	v
data	composer.phar	/^$data = unpack('ihash', md5(implode(',', $this->literals), true));$/;"	v
data	composer.phar	/^$this->data = $data;$/;"	v
data	composer.phar	/^private $data;$/;"	v
dataread	composer.phar	/^$dataread = null;$/;"	v
date	composer.phar	/^$date = new \\DateTime($match[1], new \\DateTimeZone('UTC'));$/;"	v
date	composer.phar	/^$date = new \\DateTime($matches[2]);$/;"	v
date	composer.phar	/^$date = new \\DateTime($this->config['time'], new \\DateTimeZone('UTC'));$/;"	v
date	composer.phar	/^$date = new \\DateTime($time, new \\DateTimeZone('UTC'));$/;"	v
date	composer.phar	/^$date = new \\DateTime('@'.trim($output), new \\DateTimeZone('UTC'));$/;"	v
date	composer.phar	/^$date = new \\DateTime(trim($output), new \\DateTimeZone('UTC'));$/;"	v
date	composer.phar	/^public function date($date)$/;"	f
dates	composer.phar	/^$this->dates = $dates;$/;"	v
dates	composer.phar	/^private $dates = array();$/;"	v
dates	composer.phar	/^protected $dates = array();$/;"	v
datetime	composer.phar	/^$datetime = new \\DateTime('@'.$match[1], new \\DateTimeZone('UTC'));$/;"	v
datetime	composer.phar	/^$datetime = new \\DateTime('@'.trim($output), new \\DateTimeZone('UTC'));$/;"	v
datetime	composer.phar	/^$datetime = null;$/;"	v
decide	composer.phar	/^public function decide($literal, $level, $why)$/;"	f
decided	composer.phar	/^public function decided($literalOrPackageId)$/;"	f
decidedInstall	composer.phar	/^public function decidedInstall($literalOrPackageId)$/;"	f
decimals1	composer.phar	/^$decimals1 = mb_strpos($number1, ".") ? mb_strlen($number1) - mb_strpos($number1, ".") - 1 : 0;$/;"	v
decimals2	composer.phar	/^$decimals2 = mb_strpos($number2, ".") ? mb_strlen($number2) - mb_strpos($number2, ".") - 1 : 0;$/;"	v
decision	composer.phar	/^$decision = $this->decisions->atOffset($decisionId);$/;"	v
decision	composer.phar	/^$decision = $this->decisions->atOffset($this->propagateIndex);$/;"	v
decision	composer.phar	/^$decision = array_pop($this->decisionQueue);$/;"	v
decisionId	composer.phar	/^$decisionId = count($this->decisions);$/;"	v
decisionLevel	composer.phar	/^$decisionLevel = $this->decisions->decisionLevel($literal);$/;"	v
decisionLevel	composer.phar	/^public function decisionLevel($literalOrPackageId)$/;"	f
decisionMap	composer.phar	/^$this->decisionMap = array();$/;"	v
decisionMap	composer.phar	/^protected $decisionMap;$/;"	v
decisionQueue	composer.phar	/^$decisionQueue = $prunedQueue;$/;"	v
decisionQueue	composer.phar	/^$decisionQueue = array();$/;"	v
decisionQueue	composer.phar	/^protected $decisionQueue = array();$/;"	v
decisionRule	composer.phar	/^public function decisionRule($literalOrPackageId)$/;"	f
decisionStart	composer.phar	/^$decisionStart = count($this->decisions) - 1;$/;"	v
decisionSupplementQueue	composer.phar	/^$decisionSupplementQueue = array();$/;"	v
decisions	composer.phar	/^$this->decisions = $decisions;$/;"	v
decisions	composer.phar	/^$this->decisions = new Decisions($this->pool);$/;"	v
decisions	composer.phar	/^protected $decisions;$/;"	v
decode	composer.phar	/^ $decode = false;$/;"	v
decode	composer.phar	/^$decode = false;$/;"	v
decode	composer.phar	/^$decode = true;$/;"	v
decoded	composer.phar	/^$decoded = JsonFile::parseJson($this->contents);$/;"	v
decorated	composer.phar	/^$decorated = $this->hasColorSupport();$/;"	v
decorated	composer.phar	/^$this->decorated = (bool) $decorated;$/;"	v
decorated	composer.phar	/^private $decorated;$/;"	v
default	composer.phar	/^$default = $question->getDefault();$/;"	v
default	composer.phar	/^$default = $this->getDefault();$/;"	v
default	composer.phar	/^$default = $values[$default];$/;"	v
default	composer.phar	/^$default = '';$/;"	v
default	composer.phar	/^$default = array();$/;"	v
default	composer.phar	/^$default = sprintf('<comment> [default: %s]<\/comment>', $this->formatDefaultValue($argument->getDefault()));$/;"	v
default	composer.phar	/^$default = sprintf('<comment> [default: %s]<\/comment>', $this->formatDefaultValue($option->getDefault()));$/;"	v
default	composer.phar	/^$this->default = $default;$/;"	v
default	composer.phar	/^$this->default = $this->acceptValue() ? $default : false;$/;"	v
default	composer.phar	/^private $default;$/;"	v
defaultActions	composer.phar	/^private $defaultActions = array($/;"	v
defaultCommand	composer.phar	/^$this->defaultCommand = $commandName;$/;"	v
defaultCommand	composer.phar	/^$this->defaultCommand = 'list';$/;"	v
defaultCommand	composer.phar	/^private $defaultCommand;$/;"	v
defaultConfig	composer.phar	/^public static $defaultConfig = array($/;"	v
defaultFormatVars	composer.phar	/^private $defaultFormatVars = array($/;"	v
defaultOptionals	composer.phar	/^$defaultOptionals = array();$/;"	v
defaultRepos	composer.phar	/^$defaultRepos = Factory::createDefaultRepositories($io);$/;"	v
defaultRepos	composer.phar	/^$defaultRepos = Factory::createDefaultRepositories($this->getIO());$/;"	v
defaultRepositories	composer.phar	/^public static $defaultRepositories = array($/;"	v
defaultUsername	composer.phar	/^$defaultUsername = $authParts;$/;"	v
defaultUsername	composer.phar	/^$defaultUsername = null;$/;"	v
defaults	composer.phar	/^$defaults = is_array($argument->getDefault()) ? $argument->getDefault() : (is_bool($argument->getDefault()) ? array(var_export($argument->getDefault(), true)) : ($argument->getDefault() ? array($argument->getDefault()) : array()));$/;"	v
defaults	composer.phar	/^$defaults = is_array($option->getDefault()) ? $option->getDefault() : (is_bool($option->getDefault()) ? array(var_export($option->getDefault(), true)) : ($option->getDefault() ? array($option->getDefault()) : array()));$/;"	v
definition	composer.phar	/^$definition = $command->getNativeDefinition();$/;"	v
definition	composer.phar	/^$definition = $this->definition;$/;"	v
definition	composer.phar	/^$definition = $this->getProperty($objectDefinition, $i);$/;"	v
definition	composer.phar	/^$definition = parent::getDefaultInputDefinition();$/;"	v
definition	composer.phar	/^$this->definition = $definition;$/;"	v
definition	composer.phar	/^$this->definition = $this->getDefaultInputDefinition();$/;"	v
definition	composer.phar	/^$this->definition = new InputDefinition();$/;"	v
definition	composer.phar	/^private $definition;$/;"	v
definition	composer.phar	/^protected $definition;$/;"	v
definitionXML	composer.phar	/^$definitionXML = $this->getInputDefinitionDocument($command->getNativeDefinition());$/;"	v
degradedMode	composer.phar	/^$this->degradedMode = true;$/;"	v
degradedMode	composer.phar	/^private $degradedMode = false;$/;"	v
deleteIterator	composer.phar	/^$deleteIterator = $iterator;$/;"	v
deleteIterator	composer.phar	/^$deleteIterator = new \\RecursiveIteratorIterator(new \\RecursiveDirectoryIterator($targetDir, $flags), \\RecursiveIteratorIterator::CHILD_FIRST);$/;"	v
dep10toOperatorMap	composer.phar	/^static $dep10toOperatorMap = array('has' => '==', 'eq' => '==', 'ge' => '>=', 'gt' => '>', 'le' => '<=', 'lt' => '<', 'not' => '!=');$/;"	v
dep20toOperatorMap	composer.phar	/^static $dep20toOperatorMap = array('has' => '==', 'min' => '>=', 'max' => '<=', 'exclude' => '!=');$/;"	v
depChannelName	composer.phar	/^$depChannelName = !empty($depItem['channel']) ? $depItem['channel'] : 'pear.php.net';$/;"	v
depChannelName	composer.phar	/^$depChannelName = $subDepItem['channel'];$/;"	v
depChannelName	composer.phar	/^$depChannelName = '';$/;"	v
depChannelName	composer.phar	/^$depChannelName = 'ext';$/;"	v
depChannelName	composer.phar	/^$depChannelName = 'php';$/;"	v
depCode	composer.phar	/^$depCode = $errors || ($publishErrors && $checkPublish) ? 2 : ($isStrict && $warnings ? 1 : 0);$/;"	v
depItem	composer.phar	/^$depItem = array($depItem);$/;"	v
depPackageName	composer.phar	/^$depPackageName = $depItem['name'];$/;"	v
depPackageName	composer.phar	/^$depPackageName = $subDepItem['name'];$/;"	v
depPackageName	composer.phar	/^$depPackageName = '';$/;"	v
depPackages	composer.phar	/^$depPackages = $pool->whatProvides($packageName);$/;"	v
depType	composer.phar	/^$depType = !empty($depItem['optional']) && 'yes' == $depItem['optional']$/;"	v
depType	composer.phar	/^$depType = 'conflicts';$/;"	v
depType	composer.phar	/^$depType = 'not' == $depItem['rel']$/;"	v
depTypeGroup	composer.phar	/^$depTypeGroup = array($depTypeGroup);$/;"	v
depVersion	composer.phar	/^$depVersion = !empty($depItem['version']) ? $this->parseVersion($depItem['version']) : '*';$/;"	v
depVersionConstraint	composer.phar	/^ $depVersionConstraint = ('has' == $depItem['rel'] || 'not' == $depItem['rel']) && '*' == $depVersion$/;"	v
depVersionConstraint	composer.phar	/^$depVersionConstraint = $this->parse20VersionConstraint($subDepItem);$/;"	v
dependencies	composer.phar	/^$dependencies = array();$/;"	v
dependencyArray	composer.phar	/^$dependencyArray = unserialize($content);$/;"	v
dependencyArray	composer.phar	/^$dependencyArray = unserialize((string) $node->d);$/;"	v
dependencyInfo	composer.phar	/^$dependencyInfo = $this->dependencyReader->buildDependencyInfo($dependencyArray);$/;"	v
dependencyInfo	composer.phar	/^$this->dependencyInfo = $dependencyInfo;$/;"	v
dependencyInfo	composer.phar	/^private $dependencyInfo;$/;"	v
dependencyPackageName	composer.phar	/^$dependencyPackageName = $this->buildComposerPackageName($dependencyConstraint->getChannelName(), $dependencyConstraint->getPackageName());$/;"	v
dependencyReader	composer.phar	/^$dependencyReader = new PackageDependencyParser();$/;"	v
dependencyReader	composer.phar	/^$this->dependencyReader = new PackageDependencyParser();$/;"	v
dependencyReader	composer.phar	/^private $dependencyReader;$/;"	v
dependencyVersion	composer.phar	/^$dependencyVersion = (string) $node->v;$/;"	v
depot	composer.phar	/^$this->depot = $this->repoConfig['depot'];$/;"	v
depot	composer.phar	/^protected $depot;$/;"	v
deps	composer.phar	/^$deps = $this->buildDepExtensionConstraints($depItem, $depType);$/;"	v
deps	composer.phar	/^$deps = $this->buildDepPackageConstraints($depItem, $depType);$/;"	v
deps	composer.phar	/^$deps = $this->buildDepPackageConstraints($depItem, 'replaces');$/;"	v
depth	composer.phar	/^ $depth = count($startPathArr) - $index;$/;"	v
depth	composer.phar	/^protected static $depth = 0;$/;"	v
depth	composer.phar	/^public function depth($level)$/;"	f
depthPath	composer.phar	/^$depthPath = '\/r\/' . strtolower($packageName) . '\/deps.' . $version . '.txt';$/;"	v
depths	composer.phar	/^private $depths = array();$/;"	v
describe	composer.phar	/^public function describe(OutputInterface $output, $object, array $options = array())$/;"	f
describe	composer.phar	/^public function describe(OutputInterface $output, $object, array $options = array());$/;"	f
describeApplication	composer.phar	/^protected function describeApplication(Application $application, array $options = array())$/;"	f
describeCommand	composer.phar	/^protected function describeCommand(Command $command, array $options = array())$/;"	f
describeInputArgument	composer.phar	/^protected function describeInputArgument(InputArgument $argument, array $options = array())$/;"	f
describeInputDefinition	composer.phar	/^protected function describeInputDefinition(InputDefinition $definition, array $options = array())$/;"	f
describeInputOption	composer.phar	/^protected function describeInputOption(InputOption $option, array $options = array())$/;"	f
describedNamespace	composer.phar	/^$describedNamespace = isset($options['namespace']) ? $options['namespace'] : null;$/;"	v
description	composer.phar	/^$description = $input->getOption('description') ?: false;$/;"	v
description	composer.phar	/^$description = $io->ask($/;"	v
description	composer.phar	/^$description = (string) $packageInfo->p->d;$/;"	v
description	composer.phar	/^$description = (string) $xml->d;$/;"	v
description	composer.phar	/^$description = new ApplicationDescription($application, $describedNamespace);$/;"	v
description	composer.phar	/^$description = new ApplicationDescription($application, $namespace);$/;"	v
description	composer.phar	/^$description = strtok($package->getDescription(), "\\r\\n");$/;"	v
description	composer.phar	/^$description = substr($description, 0, $remaining - 3) . '...';$/;"	v
description	composer.phar	/^$this->description = $description;$/;"	v
description	composer.phar	/^private $description;$/;"	v
description	composer.phar	/^protected $description;$/;"	v
descriptor	composer.phar	/^$descriptor = $this->descriptors[$options['format']];$/;"	v
descriptor	composer.phar	/^$descriptor = new TextDescriptor();$/;"	v
descriptor	composer.phar	/^$descriptor = new XmlDescriptor();$/;"	v
descriptors	composer.phar	/^ $descriptors = array_merge($descriptors, array(array('pipe', 'w')));$/;"	v
descriptors	composer.phar	/^$descriptors = $this->getDescriptors();$/;"	v
descriptors	composer.phar	/^$descriptors = $this->processPipes->getDescriptors($this->outputDisabled);$/;"	v
descriptors	composer.phar	/^private $descriptors = array();$/;"	v
descriptorspec	composer.phar	/^$descriptorspec = array(1 => array('pipe', 'w'), 2 => array('pipe', 'w'));$/;"	v
details	composer.phar	/^$this->details = $details;$/;"	v
details	composer.phar	/^protected $details;$/;"	v
detectIndenting	composer.phar	/^protected function detectIndenting()$/;"	f
determineBestFormat	composer.phar	/^private function determineBestFormat()$/;"	f
determineRequirements	composer.phar	/^protected function determineRequirements(InputInterface $input, OutputInterface $output, $requires = array(), $phpVersion = null)$/;"	f
dev	composer.phar	/^$this->dev = $this->stability === 'dev';$/;"	v
dev	composer.phar	/^protected $dev;$/;"	v
devAutoload	composer.phar	/^$this->devAutoload = $devAutoload;$/;"	v
devAutoload	composer.phar	/^protected $devAutoload = array();$/;"	v
devMode	composer.phar	/^$this->devMode = $devMode;$/;"	v
devMode	composer.phar	/^$this->devMode = (boolean) $devMode;$/;"	v
devMode	composer.phar	/^private $devMode = false;$/;"	v
devMode	composer.phar	/^private $devMode;$/;"	v
devMode	composer.phar	/^protected $devMode = false;$/;"	v
devPackages	composer.phar	/^ $devPackages = ($this->devMode || !$this->package->getDevRequires()) ? array() : null;$/;"	v
devRepo	composer.phar	/^ $devRepo = new InstalledFilesystemRepository(new JsonFile($this->config->get('vendor-dir').'\/composer\/installed_dev.json'));$/;"	v
devRequirements	composer.phar	/^$devRequirements = $this->determineRequirements($input, $output, $input->getOption('require-dev'));$/;"	v
devRequirements	composer.phar	/^$devRequirements = $this->loader->parseLinks($/;"	v
devRequirements	composer.phar	/^$devRequirements = array();$/;"	v
devRequires	composer.phar	/^$this->devRequires = $devRequires;$/;"	v
devRequires	composer.phar	/^$this->devRequires = $this->replaceSelfVersionDependencies($devRequire, 'devRequires');$/;"	v
devRequires	composer.phar	/^protected $devRequires = array();$/;"	v
devRequires	composer.phar	/^protected $devRequires;$/;"	v
diff	composer.phar	/^$diff = (float)($modulus - $number2);$/;"	v
dimensions	composer.phar	/^$dimensions = $application->getTerminalDimensions();$/;"	v
dimensions	composer.phar	/^$dimensions = $this->getTerminalDimensions();$/;"	v
dir	composer.phar	/^ $dir = realpath($dir);$/;"	v
dir	composer.phar	/^$dir = $filesystem->normalizePath($filesystem->isAbsolutePath($dir) ? $dir : $basePath.'\/'.$dir);$/;"	v
dir	composer.phar	/^$dir = dirname($filename);$/;"	v
dir	composer.phar	/^$dir = dirname($this->path);$/;"	v
dir	composer.phar	/^$dir = dirname($this->subPathname);$/;"	v
dirFiles	composer.phar	/^$dirFiles = $this->buildSourceList10($child->children(), $targetRoles, $dirSource, $dirTarget, $dirRole, $packageName);$/;"	v
dirFiles	composer.phar	/^$dirFiles = $this->buildSourceList20($child->children(), $targetRoles, $dirSource, $dirTarget, $dirRole, $packageName);$/;"	v
dirRole	composer.phar	/^$dirRole = $child['role'] ?: $role;$/;"	v
dirSource	composer.phar	/^$dirSource = $this->combine($source, $child['name']);$/;"	v
dirSource	composer.phar	/^$dirSource = $this->combine($source, (string) $child['name']);$/;"	v
dirTarget	composer.phar	/^$dirTarget = $child['baseinstalldir'] ?: $target;$/;"	v
directories	composer.phar	/^public function directories()$/;"	f
directory	composer.phar	/^$directory = getcwd() . DIRECTORY_SEPARATOR . array_pop($parts);$/;"	v
directory	composer.phar	/^$directory = new \\RecursiveDirectoryIterator($path, \\RecursiveDirectoryIterator::FOLLOW_SYMLINKS);$/;"	v
directoryName	composer.phar	/^$directoryName = dirname($stat['name']);$/;"	v
directorySeparator	composer.phar	/^$this->directorySeparator = DIRECTORY_SEPARATOR;$/;"	v
directorySeparator	composer.phar	/^private $directorySeparator = '\/';$/;"	v
directorySize	composer.phar	/^protected function directorySize($directory)$/;"	f
dirs	composer.phar	/^$dirs = array();$/;"	v
dirs	composer.phar	/^$dirs = array(PHP_BINDIR);$/;"	v
dirs	composer.phar	/^$dirs = array_merge($/;"	v
dirs	composer.phar	/^$dirs = iterator_to_array($finder);$/;"	v
dirs	composer.phar	/^$this->dirs = array_merge($this->dirs, $resolvedDirs);$/;"	v
dirs	composer.phar	/^private $dirs = array();$/;"	v
disable	composer.phar	/^public function disable()$/;"	f
disableCommand	composer.phar	/^public function disableCommand()$/;"	f
disableOutput	composer.phar	/^$this->disableOutput = (bool) $disableOutput;$/;"	v
disableOutput	composer.phar	/^private $disableOutput;$/;"	v
disableOutput	composer.phar	/^public function disableOutput()$/;"	f
disablePlugins	composer.phar	/^public function disablePlugins()$/;"	f
disableProblem	composer.phar	/^private function disableProblem(Rule $why)$/;"	f
disableRules	composer.phar	/^$disableRules = array();$/;"	v
discardChanges	composer.phar	/^$discardChanges = $this->config->get('discard-changes');$/;"	v
discardChanges	composer.phar	/^protected function discardChanges($path)$/;"	f
dispatch	composer.phar	/^public function dispatch($eventName, Event $event = null)$/;"	f
dispatchInstallerEvent	composer.phar	/^public function dispatchInstallerEvent($eventName, $devMode, PolicyInterface $policy, Pool $pool, CompositeRepository $installedRepo, Request $request, array $operations = array())$/;"	f
dispatchPackageEvent	composer.phar	/^public function dispatchPackageEvent($eventName, $devMode, PolicyInterface $policy, Pool $pool, CompositeRepository $installedRepo, Request $request, array $operations, OperationInterface $operation)$/;"	f
dispatchScript	composer.phar	/^public function dispatchScript($eventName, $devMode = false, $additionalArgs = array(), $flags = array())$/;"	f
dispatcher	composer.phar	/^ $dispatcher = new EventDispatcher($composer, $io);$/;"	v
dispatcher	composer.phar	/^$this->dispatcher = $dispatcher;$/;"	v
dispatcher	composer.phar	/^private $dispatcher;$/;"	v
display	composer.phar	/^$display = str_repeat($bar->getBarCharacter(), $completeBars);$/;"	v
display	composer.phar	/^$display = str_replace(PHP_EOL, "\\n", $display);$/;"	v
display	composer.phar	/^$display = stream_get_contents($this->output->getStream());$/;"	v
display	composer.phar	/^public function display($finish = false)$/;"	f
display	composer.phar	/^public function display()$/;"	f
displayIniMessage	composer.phar	/^$displayIniMessage = false;$/;"	v
displayIniMessage	composer.phar	/^$displayIniMessage = true;$/;"	v
distMirrors	composer.phar	/^$this->distMirrors = $mirrors;$/;"	v
distMirrors	composer.phar	/^protected $distMirrors;$/;"	v
distReference	composer.phar	/^$this->distReference = $reference;$/;"	v
distReference	composer.phar	/^protected $distReference;$/;"	v
distSha1Checksum	composer.phar	/^$this->distSha1Checksum = $sha1checksum;$/;"	v
distSha1Checksum	composer.phar	/^protected $distSha1Checksum;$/;"	v
distType	composer.phar	/^$distType = $package->getDistType();$/;"	v
distType	composer.phar	/^$this->distType = $type;$/;"	v
distType	composer.phar	/^protected $distType;$/;"	v
distUrl	composer.phar	/^$distUrl = "{$scheme}:\/\/{$packageDefinition->getChannelName()}\/get\/{$packageDefinition->getPackageName()}-{$version}.tgz";$/;"	v
distUrl	composer.phar	/^$this->distUrl = $url;$/;"	v
distUrl	composer.phar	/^protected $distUrl;$/;"	v
dm	composer.phar	/^ $dm = $this->createDownloadManager($io, $config, $dispatcher);$/;"	v
dm	composer.phar	/^$dm = $composer->getDownloadManager();$/;"	v
dm	composer.phar	/^$dm = $this->createDownloadManager($io, $config);$/;"	v
dm	composer.phar	/^$dm = new Downloader\\DownloadManager($io);$/;"	v
doAsk	composer.phar	/^public function doAsk(OutputInterface $output, Question $question)$/;"	f
doAuthDance	composer.phar	/^protected function doAuthDance()$/;"	f
doCopy	composer.phar	/^$doCopy = filemtime($originFile) > filemtime($targetFile);$/;"	v
doCopy	composer.phar	/^$doCopy = true;$/;"	v
doDispatch	composer.phar	/^protected function doDispatch(Event $event)$/;"	f
doDownload	composer.phar	/^protected function doDownload(PackageInterface $package, $path, $url)$/;"	f
doDownload	composer.phar	/^public function doDownload(PackageInterface $package, $path, $url)$/;"	f
doInstall	composer.phar	/^protected function doInstall($localRepo, $installedRepo, $platformRepo, $aliases, $withDevReqs)$/;"	f
doOverwrite	composer.phar	/^private function doOverwrite($messages, $newline, $size, $stderr)$/;"	f
doRun	composer.phar	/^public function doRun(InputInterface $input, OutputInterface $output)$/;"	f
doRunCommand	composer.phar	/^protected function doRunCommand(Command $command, InputInterface $input, OutputInterface $output)$/;"	f
doSignal	composer.phar	/^private function doSignal($signal, $throwException)$/;"	f
doUpdate	composer.phar	/^public function doUpdate(PackageInterface $initial, PackageInterface $target, $path, $url)$/;"	f
doWrite	composer.phar	/^private function doWrite($messages, $newline, $stderr)$/;"	f
doWrite	composer.phar	/^protected function doWrite($message, $newline)$/;"	f
dom	composer.phar	/^$dom = new \\DOMDocument('1.0', 'UTF-8');$/;"	v
done	composer.phar	/^$this->done = false;$/;"	v
done	composer.phar	/^$this->done = true;$/;"	v
done	composer.phar	/^private $done;$/;"	v
download	composer.phar	/^public function download(PackageInterface $package, $path)$/;"	f
download	composer.phar	/^public function download(PackageInterface $package, $path);$/;"	f
download	composer.phar	/^public function download(PackageInterface $package, $targetDir, $preferSource = null)$/;"	f
downloadManager	composer.phar	/^$downloadManager = $factory->createDownloadManager($io, $config);$/;"	v
downloadManager	composer.phar	/^$this->downloadManager = $composer->getDownloadManager();$/;"	v
downloadManager	composer.phar	/^$this->downloadManager = $dm;$/;"	v
downloadManager	composer.phar	/^$this->downloadManager = $downloadManager;$/;"	v
downloadManager	composer.phar	/^$this->downloadManager = $manager;$/;"	v
downloadManager	composer.phar	/^private $downloadManager;$/;"	v
downloadManager	composer.phar	/^protected $downloadManager;$/;"	v
downloadPath	composer.phar	/^$downloadPath = $this->getInstallPath($autoloadPackage, ($globalRepo && $globalRepo->hasPackage($autoloadPackage)));$/;"	v
downloadPath	composer.phar	/^$downloadPath = $this->getInstallPath($package);$/;"	v
downloadPath	composer.phar	/^$downloadPath = $this->getPackageBasePath($package);$/;"	v
downloader	composer.phar	/^$downloader = $dm->getDownloaderForInstalledPackage($package);$/;"	v
downloader	composer.phar	/^$downloader = $this->getDownloader($package->getDistType());$/;"	v
downloader	composer.phar	/^$downloader = $this->getDownloader($package->getSourceType());$/;"	v
downloader	composer.phar	/^$downloader = $this->getDownloaderForInstalledPackage($initial);$/;"	v
downloader	composer.phar	/^$downloader = $this->getDownloaderForInstalledPackage($package);$/;"	v
downloaders	composer.phar	/^private $downloaders = array();$/;"	v
driver	composer.phar	/^ $driver = new HgDriver(array('url' => $path), new NullIO(), $this->config, $this->process);$/;"	v
driver	composer.phar	/^$driver = $this->getDriver();$/;"	v
driver	composer.phar	/^$driver = new $class($this->repoConfig, $this->io, $this->config);$/;"	v
driver	composer.phar	/^$driver = new $driver($this->repoConfig, $this->io, $this->config);$/;"	v
drivers	composer.phar	/^$this->drivers = $drivers ?: array($/;"	v
dryRun	composer.phar	/^$this->dryRun = (boolean) $dryRun;$/;"	v
dryRun	composer.phar	/^protected $dryRun = false;$/;"	v
dt	composer.phar	/^$dt = \\DateTime::createFromFormat($format, $datetime);$/;"	v
dump	composer.phar	/^public function dump(Config $config, InstalledRepositoryInterface $localRepo, PackageInterface $mainPackage, InstallationManager $installationManager, $targetDir, $scanPsr0Packages = false, $suffix = '')$/;"	f
dump	composer.phar	/^public function dump(PackageInterface $package)$/;"	f
dump	composer.phar	/^public static function dump($dirs, $file)$/;"	f
dumpAutoloader	composer.phar	/^$this->dumpAutoloader = (boolean) $dumpAutoloader;$/;"	v
dumpAutoloader	composer.phar	/^protected $dumpAutoloader = true;$/;"	v
dumpFile	composer.phar	/^public function dumpFile($filename, $content, $mode = 0666)$/;"	f
dumpValues	composer.phar	/^private function dumpValues(PackageInterface $package, array $keys, array $data)$/;"	f
dumper	composer.phar	/^$dumper = new ArrayDumper();$/;"	v
dumper	composer.phar	/^$this->dumper = new ArrayDumper();$/;"	v
dumper	composer.phar	/^private $dumper;$/;"	v
duplicateCount	composer.phar	/^$duplicateCount = 1;$/;"	v
duplicateKey	composer.phar	/^$duplicateKey = $key . '.' . $duplicateCount++;$/;"	v
e	composer.phar	/^$e = $event->getException();$/;"	v
e	composer.phar	/^$e = new TransportException('The "'.$this->fileUrl.'" file could not be downloaded ('.$http_response_header[0].')', $errorCode);$/;"	v
e	composer.phar	/^$e = new TransportException('The "'.$this->fileUrl.'" file could not be downloaded: '.$errorMessage, $errorCode);$/;"	v
e	composer.phar	/^$e = null;$/;"	v
editor	composer.phar	/^$editor = $candidate;$/;"	v
editor	composer.phar	/^$editor = 'notepad';$/;"	v
editor	composer.phar	/^$editor = escapeshellcmd(getenv('EDITOR'));$/;"	v
elapsed	composer.phar	/^$elapsed = time() - $this->startTime;$/;"	v
element	composer.phar	/^$element = $element.' ('.$element.')';$/;"	v
element	composer.phar	/^$element = '<'.$argument->getName().'>';$/;"	v
element	composer.phar	/^$element = '['.$element.']';$/;"	v
elements	composer.phar	/^$elements = array();$/;"	v
elements	composer.phar	/^$elements = array_map(function ($element) {$/;"	v
elems	composer.phar	/^$elems = array();$/;"	v
empty	composer.phar	/^$empty = function ($x) {$/;"	v
emptyBarChar	composer.phar	/^$this->emptyBarChar = $char;$/;"	v
emptyBarChar	composer.phar	/^private $emptyBarChar = '-';$/;"	v
emptyBars	composer.phar	/^$emptyBars = $bar->getBarWidth() - $completeBars - Helper::strlenWithoutDecoration($output->getFormatter(), $bar->getProgressCharacter());$/;"	v
emptyBars	composer.phar	/^$emptyBars = $this->barWidth - $completeBars - $this->strlen($this->progressChar);$/;"	v
emptyDirectory	composer.phar	/^public function emptyDirectory($dir, $ensureDirectoryExists = true)$/;"	f
emptyStyle	composer.phar	/^$this->emptyStyle = $emptyStyle ?: new OutputFormatterStyle();$/;"	v
emptyStyle	composer.phar	/^$this->emptyStyle = $emptyStyle;$/;"	v
emptyStyle	composer.phar	/^private $emptyStyle;$/;"	v
enable	composer.phar	/^public function enable()$/;"	f
enableCommand	composer.phar	/^public function enableCommand()$/;"	f
enableDebugging	composer.phar	/^public function enableDebugging($startTime)$/;"	f
enableDisableLearnedRules	composer.phar	/^private function enableDisableLearnedRules()$/;"	f
enableOutput	composer.phar	/^public function enableOutput()$/;"	f
enabled	composer.phar	/^$this->enabled = false;$/;"	v
enabled	composer.phar	/^private $enabled = true;$/;"	v
encode	composer.phar	/^public static function encode($data, $options = 448)$/;"	f
end	composer.phar	/^$end = substr($m[1], -1);$/;"	v
end	composer.phar	/^public function end()$/;"	f
endFlag	composer.phar	/^$this->endFlag = (bool) $endFlag;$/;"	v
endFlag	composer.phar	/^private $endFlag;$/;"	v
endJoker	composer.phar	/^$this->endJoker = (bool) $endJoker;$/;"	v
endJoker	composer.phar	/^private $endJoker;$/;"	v
endPath	composer.phar	/^$endPath = str_replace('\\\\', '\/', $endPath);$/;"	v
endPathArr	composer.phar	/^$endPathArr = explode('\/', trim($endPath, '\/'));$/;"	v
endPathRemainder	composer.phar	/^$endPathRemainder = implode('\/', array_slice($endPathArr, $index));$/;"	v
enhanceSigchildCompatibility	composer.phar	/^$this->enhanceSigchildCompatibility = '\\\\' !== DIRECTORY_SEPARATOR && $this->isSigchildEnabled();$/;"	v
enhanceSigchildCompatibility	composer.phar	/^$this->enhanceSigchildCompatibility = (bool) $enhance;$/;"	v
enhanceSigchildCompatibility	composer.phar	/^private $enhanceSigchildCompatibility;$/;"	v
enhanceWindowsCompatibility	composer.phar	/^$this->enhanceWindowsCompatibility = (bool) $enhance;$/;"	v
enhanceWindowsCompatibility	composer.phar	/^$this->enhanceWindowsCompatibility = true;$/;"	v
enhanceWindowsCompatibility	composer.phar	/^private $enhanceWindowsCompatibility = true;$/;"	v
ensureDirectoryExists	composer.phar	/^public function ensureDirectoryExists($directory)$/;"	f
entries	composer.phar	/^$entries = $rarArchive->getEntries();$/;"	v
env	composer.phar	/^ $env = 'COMPOSER_' . strtoupper(strtr($key, '-', '_'));$/;"	v
env	composer.phar	/^ $env = array_filter($env, function ($value) {$/;"	v
env	composer.phar	/^ $env = array_replace($_ENV, $_SERVER, $this->env);$/;"	v
env	composer.phar	/^$env = $this->env;$/;"	v
env	composer.phar	/^$this->env = array();$/;"	v
env	composer.phar	/^$this->env = array_replace($this->env, $variables);$/;"	v
env	composer.phar	/^private $env = array();$/;"	v
env	composer.phar	/^private $env;$/;"	v
equalTo	composer.phar	/^public static function equalTo($version1, $version2)$/;"	f
equals	composer.phar	/^public function equals(InputOption $option)$/;"	f
equals	composer.phar	/^public function equals(PackageInterface $package)$/;"	f
equals	composer.phar	/^public function equals(Rule $rule)$/;"	f
errStr	composer.phar	/^$errStr = 'Parse error on line ' . ($yylineno+1) . ":\\n";$/;"	v
errStr	composer.phar	/^$errStr = null;$/;"	v
error	composer.phar	/^$error = "Could not decompress the archive, enable the PHP rar extension or install unrar.\\n"$/;"	v
error	composer.phar	/^$error = "Could not decompress the archive, enable the PHP rar extension.\\n" . $iniMessage;$/;"	v
error	composer.phar	/^$error = "Could not decompress the archive, enable the PHP zip extension or install unzip.\\n"$/;"	v
error	composer.phar	/^$error = "Could not decompress the archive, enable the PHP zip extension.\\n" . $iniMessage;$/;"	v
error	composer.phar	/^$error = $validator->getErrors();$/;"	v
error	composer.phar	/^$error = error_get_last();$/;"	v
error	composer.phar	/^$error = extension_loaded($ext) ? 'has the wrong version ('.(phpversion($ext) ?: '0').') installed' : 'is missing from your system';$/;"	v
error	composer.phar	/^$error = extension_loaded('intl') ? 'has the wrong version installed, try upgrading the intl extension.' : 'is missing from your system, make sure the intl extension is loaded.';$/;"	v
error	composer.phar	/^$error = null;$/;"	v
error	composer.phar	/^$error = sprintf('The command "%s" failed.'."\\nExit Code: %s(%s)",$/;"	v
error	composer.phar	/^public function error($message)$/;"	f
error	composer.phar	/^public function error($message);$/;"	f
errorCode	composer.phar	/^$errorCode = $match[1];$/;"	v
errorCode	composer.phar	/^$errorCode = 0;$/;"	v
errorHandler	composer.phar	/^$this->errorHandler = $errorHandler;$/;"	v
errorHandler	composer.phar	/^private $errorHandler;$/;"	v
errorLevel	composer.phar	/^ $errorLevel = error_reporting(0);$/;"	v
errorMessage	composer.phar	/^$errorMessage = $this->errorMessage;$/;"	v
errorMessage	composer.phar	/^$errorMessage = '';$/;"	v
errorMessage	composer.phar	/^$errorMessage = 'allow_url_fopen must be enabled in php.ini ('.$errorMessage.')';$/;"	v
errorMessage	composer.phar	/^$this->errorMessage = $errorMessage;$/;"	v
errorMessage	composer.phar	/^private $errorMessage = 'Value "%s" is invalid';$/;"	v
errorOutput	composer.phar	/^$errorOutput = $this->process->getErrorOutput();$/;"	v
errorOutput	composer.phar	/^$this->errorOutput = $process->getErrorOutput();$/;"	v
errorOutput	composer.phar	/^$this->errorOutput = null;$/;"	v
errorOutput	composer.phar	/^protected $errorOutput;$/;"	v
errorStream	composer.phar	/^$errorStream = $this->hasStderrSupport() ? 'php:\/\/stderr' : 'php:\/\/output';$/;"	v
errors	composer.phar	/^ $errors = array();$/;"	v
errors	composer.phar	/^$errors = $error;$/;"	v
errors	composer.phar	/^$errors = ' - ' . implode(PHP_EOL . ' - ', $e->getErrors());$/;"	v
errors	composer.phar	/^$errors = array();$/;"	v
errors	composer.phar	/^$errors = array_merge($errors, $e->getErrors());$/;"	v
errors	composer.phar	/^$errors = array_merge($errors, $lockErrors);$/;"	v
errors	composer.phar	/^$errors = array_merge($errors, $publishErrors);$/;"	v
errors	composer.phar	/^$this->errors = $errors;$/;"	v
errors	composer.phar	/^$this->errors = $initErrors;$/;"	v
errors	composer.phar	/^$this->errors = $secondErrors;$/;"	v
errors	composer.phar	/^$this->errors = $startErrors;$/;"	v
errors	composer.phar	/^$this->errors = array();$/;"	v
errors	composer.phar	/^$this->errors = array_merge($this->errors, $errors);$/;"	v
errors	composer.phar	/^private $errors;$/;"	v
errors	composer.phar	/^protected $errors = array();$/;"	v
errors	composer.phar	/^protected $errors;$/;"	v
escape	composer.phar	/^public static function escape($argument)$/;"	f
escape	composer.phar	/^public static function escape($input)$/;"	f
escape	composer.phar	/^public static function escape($text)$/;"	f
escapeArgument	composer.phar	/^public static function escapeArgument($argument)$/;"	f
escapeString	composer.phar	/^public function escapeString($str)$/;"	f
escapeToken	composer.phar	/^public function escapeToken($token)$/;"	f
escapedArgument	composer.phar	/^$escapedArgument = '"'.$escapedArgument.'"';$/;"	v
escapedArgument	composer.phar	/^$escapedArgument = '';$/;"	v
escaping	composer.phar	/^$escaping = false;$/;"	v
escaping	composer.phar	/^$escaping = true;$/;"	v
estimated	composer.phar	/^$estimated = 0;$/;"	v
estimated	composer.phar	/^$estimated = round((time() - $bar->getStartTime()) \/ $bar->getProgress() * $bar->getMaxSteps());$/;"	v
event	composer.phar	/^$event = $this->checkListenerExpectedEvent($callable, $event);$/;"	v
event	composer.phar	/^$event = $this->checkListenerExpectedEvent(array($className, $methodName), $event);$/;"	v
event	composer.phar	/^$event = 'Composer\\Installer\\PackageEvents::POST_PACKAGE_'.strtoupper($operation->getJobType());$/;"	v
event	composer.phar	/^$event = 'Composer\\Installer\\PackageEvents::PRE_PACKAGE_'.strtoupper($operation->getJobType());$/;"	v
event	composer.phar	/^$event = new ConsoleCommandEvent($command, $input, $output);$/;"	v
event	composer.phar	/^$event = new ConsoleExceptionEvent($command, $input, $output, $e, $e->getCode());$/;"	v
event	composer.phar	/^$event = new ConsoleTerminateEvent($command, $input, $output, $e->getCode());$/;"	v
event	composer.phar	/^$event = new ConsoleTerminateEvent($command, $input, $output, $exitCode);$/;"	v
event	composer.phar	/^$event = new Event($eventName);$/;"	v
event	composer.phar	/^$event = new \\Composer\\Script\\CommandEvent($/;"	v
event	composer.phar	/^$event = new \\Composer\\Script\\Event($/;"	v
event	composer.phar	/^$event = new \\Composer\\Script\\PackageEvent($/;"	v
eventDispatcher	composer.phar	/^$this->eventDispatcher = $eventDispatcher;$/;"	v
eventDispatcher	composer.phar	/^private $eventDispatcher;$/;"	v
eventDispatcher	composer.phar	/^protected $eventDispatcher;$/;"	v
eventName	composer.phar	/^ $eventName = $this->update ? ScriptEvents::POST_UPDATE_CMD : ScriptEvents::POST_INSTALL_CMD;$/;"	v
eventName	composer.phar	/^ $eventName = $this->update ? ScriptEvents::PRE_UPDATE_CMD : ScriptEvents::PRE_INSTALL_CMD;$/;"	v
exact	composer.phar	/^$exact = in_array($name, $commands, true);$/;"	v
exact	composer.phar	/^$exact = in_array($namespace, $namespaces, true);$/;"	v
exactMatch	composer.phar	/^$exactMatch = null;$/;"	v
exactMatch	composer.phar	/^$exactMatch = true;$/;"	v
exception	composer.phar	/^$this->exception = $exception;$/;"	v
exception	composer.phar	/^private $exception;$/;"	v
exceptions	composer.phar	/^$exceptions = $this->getExceptionsExpression();$/;"	v
exceptions	composer.phar	/^$exceptions = array_map('preg_quote', array_keys($this->exceptions));$/;"	v
exceptions	composer.phar	/^$exceptions = implode('|', $exceptions);$/;"	v
exceptions	composer.phar	/^$this->exceptions = json_decode($json, true);$/;"	v
exceptions	composer.phar	/^private $exceptions;$/;"	v
exceptionsExpression	composer.phar	/^$this->exceptionsExpression = $exceptions;$/;"	v
exceptionsExpression	composer.phar	/^private $exceptionsExpression;$/;"	v
exclude	composer.phar	/^$exclude = !$negate;$/;"	v
exclude	composer.phar	/^$exclude = $filter->filter($relativePath, $exclude);$/;"	v
exclude	composer.phar	/^$exclude = $this->parseAutoloadsType($sortedPackageMap, 'exclude-from-classmap', $mainPackage);$/;"	v
exclude	composer.phar	/^$exclude = false;$/;"	v
exclude	composer.phar	/^$this->exclude = $exclude;$/;"	v
exclude	composer.phar	/^$this->exclude = array_merge($this->exclude, (array) $dirs);$/;"	v
exclude	composer.phar	/^$this->exclude = array_merge($this->exclude, self::$vcsPatterns);$/;"	v
exclude	composer.phar	/^private $exclude = array();$/;"	v
exclude	composer.phar	/^protected $exclude = array();$/;"	v
exclude	composer.phar	/^public function exclude($dirs)$/;"	f
excludePatterns	composer.phar	/^$this->excludePatterns = $this->generatePatterns($excludeRules);$/;"	v
excludePatterns	composer.phar	/^$this->excludePatterns = $this->parseLines($/;"	v
excludePatterns	composer.phar	/^$this->excludePatterns = array();$/;"	v
excludePatterns	composer.phar	/^$this->excludePatterns = array_merge($/;"	v
excludePatterns	composer.phar	/^protected $excludePatterns;$/;"	v
excludedDirs	composer.phar	/^private $excludedDirs = array();$/;"	v
excludedPattern	composer.phar	/^$this->excludedPattern = '#(?:^|\/)(?:'.implode('|', $patterns).')(?:\/|$)#';$/;"	v
excludedPattern	composer.phar	/^private $excludedPattern;$/;"	v
exe	composer.phar	/^ $exe = __DIR__.'\\\\..\\\\res\\\\hiddeninput.exe';$/;"	v
exe	composer.phar	/^$exe = $tmpExe;$/;"	v
exe	composer.phar	/^$exe = __DIR__.'\/..\/Resources\/bin\/hiddeninput.exe';$/;"	v
exec	composer.phar	/^$exec = $callable . ($args === '' ? '' : ' '.$args);$/;"	v
executableFinder	composer.phar	/^$executableFinder = new PhpExecutableFinder();$/;"	v
executableFinder	composer.phar	/^$this->executableFinder = new ExecutableFinder();$/;"	v
executableFinder	composer.phar	/^private $executableFinder;$/;"	v
execute	composer.phar	/^protected function execute($baseUrl, $command, $url, $cwd = null, $path = null)$/;"	f
execute	composer.phar	/^protected function execute($command, $url)$/;"	f
execute	composer.phar	/^protected function execute(InputInterface $input, OutputInterface $output)$/;"	f
execute	composer.phar	/^public function execute($command, $url, $cwd = null, $path = null, $verbose = false)$/;"	f
execute	composer.phar	/^public function execute($command, &$output = null, $cwd = null)$/;"	f
execute	composer.phar	/^public function execute()$/;"	f
execute	composer.phar	/^public function execute(RepositoryInterface $repo, OperationInterface $operation)$/;"	f
execute	composer.phar	/^public function execute(array $input, array $options = array())$/;"	f
executeCommand	composer.phar	/^protected function executeCommand($command)$/;"	f
executeEventPhpScript	composer.phar	/^protected function executeEventPhpScript($className, $methodName, Event $event)$/;"	f
exempt	composer.phar	/^$exempt = $repo instanceof PlatformRepository || $repo instanceof InstalledRepositoryInterface;$/;"	v
exists	composer.phar	/^$exists = isset($alternatives[$collectionName]);$/;"	v
exists	composer.phar	/^public function exists($files)$/;"	f
exists	composer.phar	/^public function exists()$/;"	f
exit	composer.phar	/^$exit = $processExecutor->execute($/;"	v
exit	composer.phar	/^$exit = $processExecutor->execute(sprintf('hg identify %s', ProcessExecutor::escape($url)), $ignored);$/;"	v
exitCode	composer.phar	/^$exitCode = $command->run($input, $output);$/;"	v
exitCode	composer.phar	/^$exitCode = $e->getCode();$/;"	v
exitCode	composer.phar	/^$exitCode = $errors || ($publishErrors && $checkPublish) || ($lockErrors && $checkLock) ? 2 : ($isStrict && $warnings ? 1 : 0);$/;"	v
exitCode	composer.phar	/^$exitCode = $this->doRun($input, $output);$/;"	v
exitCode	composer.phar	/^$exitCode = $this->doRunCommand($command, $input, $output);$/;"	v
exitCode	composer.phar	/^$exitCode = $this->executeCommand($command);$/;"	v
exitCode	composer.phar	/^$exitCode = (int) $exitCode;$/;"	v
exitCode	composer.phar	/^$exitCode = 1;$/;"	v
exitCode	composer.phar	/^$exitCode = 255;$/;"	v
exitCode	composer.phar	/^$exitCode = ConsoleCommandEvent::RETURN_CODE_DISABLED;$/;"	v
exitCode	composer.phar	/^$exitCode = max($depCode, $exitCode);$/;"	v
exitCode	composer.phar	/^$this->exitCode = (int) $exitCode;$/;"	v
exitCode	composer.phar	/^private $exitCode;$/;"	v
exitCodes	composer.phar	/^public static $exitCodes = array($/;"	v
exit_code	composer.phar	/^$exit_code = $this->process->execute($command, $this->commandResult);$/;"	v
exitcode	composer.phar	/^ $this->exitcode = 128 + $this->processInformation['termsig'];$/;"	v
exitcode	composer.phar	/^$exitcode = -1;$/;"	v
exitcode	composer.phar	/^$exitcode = proc_close($this->process);$/;"	v
exitcode	composer.phar	/^$this->exitcode = $this->fallbackExitcode;$/;"	v
exitcode	composer.phar	/^$this->exitcode = $this->processInformation['exitcode'];$/;"	v
exitcode	composer.phar	/^$this->exitcode = -1 !== $exitcode ? $exitcode : (null !== $this->exitcode ? $this->exitcode : -1);$/;"	v
exitcode	composer.phar	/^$this->exitcode = null;$/;"	v
exitcode	composer.phar	/^private $exitcode;$/;"	v
expandStability	composer.phar	/^private function expandStability($stability)$/;"	f
expected	composer.phar	/^ $expected = array();$/;"	v
expected	composer.phar	/^$expected = $typehint->getName();$/;"	v
expected	composer.phar	/^$expected = null;$/;"	v
expire	composer.phar	/^$expire = new \\DateTime();$/;"	v
exportedPaths	composer.phar	/^$exportedPaths = array();$/;"	v
exportedPrefix	composer.phar	/^$exportedPrefix = var_export($namespace, true);$/;"	v
expr	composer.phar	/^$expr = Expression::create($contain);$/;"	v
expr	composer.phar	/^$expr = Expression::create($expr->getGlob()->toRegex(false));$/;"	v
expr	composer.phar	/^$expr = Expression::create($name);$/;"	v
expr	composer.phar	/^$expr = Expression::create($path);$/;"	v
expr	composer.phar	/^$expr = preg_replace_callback('{([^:]+|)}', function ($matches) { return preg_quote($matches[1]).'[^:]*'; }, $name);$/;"	v
expr	composer.phar	/^$expr = preg_replace_callback('{([^:]+|)}', function ($matches) { return preg_quote($matches[1]).'[^:]*'; }, $namespace);$/;"	v
ext	composer.phar	/^ $ext = substr($targetName, 4);$/;"	v
ext	composer.phar	/^$ext = new CompletePackage($packageName, $version, $prettyVersion);$/;"	v
ext	composer.phar	/^$ext = substr($job['packageName'], 4);$/;"	v
extra	composer.phar	/^$extra = $loader->getBranchAlias($dumper->dump($package));$/;"	v
extra	composer.phar	/^$extra = $package->getExtra();$/;"	v
extra	composer.phar	/^$extra = $target->getExtra();$/;"	v
extra	composer.phar	/^$extra = preg_replace('{^(\\d+\\.\\d+\\.\\d+)(\\.9999999)-dev$}', '$1.0', $extra, -1, $count);$/;"	v
extra	composer.phar	/^$extra = str_replace('.9999999', '.0', $extra);$/;"	v
extra	composer.phar	/^$this->extra = $extra;$/;"	v
extra	composer.phar	/^protected $extra = array();$/;"	v
extraMessage	composer.phar	/^$extraMessage = ' in "' . $fullVersion . '", the alias must be an exact version';$/;"	v
extraMessage	composer.phar	/^$extraMessage = ' in "' . $fullVersion . '", the alias source must be an exact version, if it is a branch name you should prefix it with dev-';$/;"	v
extraMessage	composer.phar	/^$extraMessage = '';$/;"	v
extraTypes	composer.phar	/^$extraTypes = PHP_VERSION_ID < 50400 ? '' : '|trait';$/;"	v
extract	composer.phar	/^protected function extract($file, $path)$/;"	f
extractAliases	composer.phar	/^private function extractAliases(array $requires, array $aliases)$/;"	f
extractAllNamespaces	composer.phar	/^private function extractAllNamespaces($name)$/;"	f
extractNamespace	composer.phar	/^public function extractNamespace($name, $limit = null)$/;"	f
extractPlatformRequirements	composer.phar	/^private function extractPlatformRequirements($links)$/;"	f
extractReferences	composer.phar	/^private function extractReferences(array $requires, array $references)$/;"	f
extractStabilityFlags	composer.phar	/^private function extractStabilityFlags(array $requires, array $stabilityFlags, $minimumStability)$/;"	f
extractTo	composer.phar	/^public function extractTo($target, array $roles = array('php' => '\/', 'script' => '\/bin'), $vars = array())$/;"	f
extractionPath	composer.phar	/^$extractionPath = $target.'\/tarball';$/;"	v
factory	composer.phar	/^$factory = new Factory();$/;"	v
factory	composer.phar	/^$factory = new Factory;$/;"	v
factory	composer.phar	/^$factory = new static();$/;"	v
factory	composer.phar	/^$factory = new static;$/;"	v
failOnBOM	composer.phar	/^private function failOnBOM($input)$/;"	f
failures	composer.phar	/^protected $failures = 0;$/;"	v
fallback	composer.phar	/^$fallback = array_pop($args);$/;"	v
fallbackCommand	composer.phar	/^$fallbackCommand = sprintf('git checkout -B %s %s --', ProcessExecutor::escape($branch), ProcessExecutor::escape('composer\/'.$branch));$/;"	v
fallbackDirsPsr0	composer.phar	/^                $this->fallbackDirsPsr0 = array_merge($/;"	v
fallbackDirsPsr0	composer.phar	/^            $this->fallbackDirsPsr0 = (array) $paths;$/;"	v
fallbackDirsPsr0	composer.phar	/^    private $fallbackDirsPsr0 = array();$/;"	v
fallbackDirsPsr0	composer.phar	/^$this->fallbackDirsPsr0 = (array) $paths;$/;"	v
fallbackDirsPsr0	composer.phar	/^$this->fallbackDirsPsr0 = array_merge($/;"	v
fallbackDirsPsr0	composer.phar	/^private $fallbackDirsPsr0 = array();$/;"	v
fallbackDirsPsr4	composer.phar	/^                $this->fallbackDirsPsr4 = array_merge($/;"	v
fallbackDirsPsr4	composer.phar	/^            $this->fallbackDirsPsr4 = (array) $paths;$/;"	v
fallbackDirsPsr4	composer.phar	/^    private $fallbackDirsPsr4 = array();$/;"	v
fallbackDirsPsr4	composer.phar	/^$this->fallbackDirsPsr4 = (array) $paths;$/;"	v
fallbackDirsPsr4	composer.phar	/^$this->fallbackDirsPsr4 = array_merge($/;"	v
fallbackDirsPsr4	composer.phar	/^private $fallbackDirsPsr4 = array();$/;"	v
fallbackExitcode	composer.phar	/^$this->fallbackExitcode = (int) $data;$/;"	v
fallbackExitcode	composer.phar	/^$this->fallbackExitcode = null;$/;"	v
fallbackExitcode	composer.phar	/^private $fallbackExitcode;$/;"	v
fetch	composer.phar	/^public function fetch()$/;"	f
fetchContentType	composer.phar	/^private function fetchContentType(array $headers)$/;"	f
fetchContentType	composer.phar	/^protected function fetchContentType($response)$/;"	f
fetchFile	composer.phar	/^protected function fetchFile($filename, $cacheKey = null, $sha256 = null)$/;"	f
fetchMessageBody	composer.phar	/^private function fetchMessageBody($response)$/;"	f
fetchRef	composer.phar	/^public function fetchRef($ref, $sourceUri)$/;"	f
fetchRootIdentifier	composer.phar	/^protected function fetchRootIdentifier()$/;"	f
fetchUri	composer.phar	/^$fetchUri = $resolver->generate($arParts);$/;"	v
fetched	composer.phar	/^$fetched = $this->bufferedOutput->fetch();$/;"	v
fh	composer.phar	/^$fh = $this->fileHandles;$/;"	v
fields	composer.phar	/^$fields = explode(' ', $changes);$/;"	v
fields	composer.phar	/^$fields = explode(' ', $line);$/;"	v
fields	composer.phar	/^$fields = explode(' ', $phrase);$/;"	v
fields	composer.phar	/^$fields = explode('=', $line);$/;"	v
file	composer.phar	/^            $file = $this->findFileWithExtension($class, '.hh');$/;"	v
file	composer.phar	/^        $file = $this->findFileWithExtension($class, '.php');$/;"	v
file	composer.phar	/^ $file = Factory::getComposerFile();$/;"	v
file	composer.phar	/^ $file = new JsonFile($config->get('home').'\/auth.json');$/;"	v
file	composer.phar	/^ $file = new JsonFile($config->get('home').'\/config.json');$/;"	v
file	composer.phar	/^$file = $input->getArgument('file');$/;"	v
file	composer.phar	/^$file = $input->getOption('auth') ? $this->authConfigFile->getPath() : $this->configFile->getPath();$/;"	v
file	composer.phar	/^$file = $path . '\/composer.json';$/;"	v
file	composer.phar	/^$file = $this->findFileWithExtension($class, '.hh');$/;"	v
file	composer.phar	/^$file = $this->findFileWithExtension($class, '.php');$/;"	v
file	composer.phar	/^$file = (string) $file;$/;"	v
file	composer.phar	/^$file = <<<HEADER$/;"	v
file	composer.phar	/^$file = Factory::getComposerFile();$/;"	v
file	composer.phar	/^$file = isset($trace[$i]['file']) ? $trace[$i]['file'] : 'n\/a';$/;"	v
file	composer.phar	/^$file = new JsonFile($localConfig, new RemoteFilesystem($io));$/;"	v
file	composer.phar	/^$file = new JsonFile('composer.json');$/;"	v
file	composer.phar	/^$file = preg_replace('{[^'.$this->whitelist.']}i', '-', $file);$/;"	v
file	composer.phar	/^$this->file = $file;$/;"	v
file	composer.phar	/^$this->file = $repositoryFile;$/;"	v
file	composer.phar	/^$this->file = sprintf('%s\/sf.%s.%s.lock', $lockPath, preg_replace('\/[^a-z0-9\\._-]+\/i', '-', $name), hash('sha256', $name));$/;"	v
file	composer.phar	/^private $file;$/;"	v
fileCopyActions	composer.phar	/^$fileCopyActions = $this->buildCopyActions($extractionPath, $roles, $vars);$/;"	v
fileHandles	composer.phar	/^$this->fileHandles = array();$/;"	v
fileHandles	composer.phar	/^private $fileHandles = array();$/;"	v
fileName	composer.phar	/^$fileName = $this->getFileName($package, $path);$/;"	v
fileName	composer.phar	/^$fileName = (string) ($child['name'] ?: $child[0]); $/;"	v
fileName	composer.phar	/^$fileName = parent::download($package, $path);$/;"	v
fileName	composer.phar	/^$this->fileName = $fileName;$/;"	v
fileName	composer.phar	/^private $fileName;$/;"	v
filePath	composer.phar	/^$filePath = $file->getRealPath();$/;"	v
fileRole	composer.phar	/^$fileRole = (string) $child['role'] ?: $role;$/;"	v
fileSource	composer.phar	/^ $fileSource = $this->combine($source, $fileName);$/;"	v
fileSource	composer.phar	/^$fileSource = $this->combine($source, (string) $child['name']);$/;"	v
fileSystem	composer.phar	/^$fileSystem = $this->getFilesystem();$/;"	v
fileSystem	composer.phar	/^$fileSystem = new Filesystem();$/;"	v
fileTarget	composer.phar	/^$fileTarget = $packageName . '\/' . $fileTarget;$/;"	v
fileTarget	composer.phar	/^$fileTarget = $this->combine((string) $child['baseinstalldir'] ?: $target, $fileName);$/;"	v
fileTarget	composer.phar	/^$fileTarget = $this->combine((string) ($child['baseinstalldir'] ?: $target), (string) $child['name']);$/;"	v
fileTasks	composer.phar	/^$fileTasks = array();$/;"	v
fileUrl	composer.phar	/^ $fileUrl = 'http:\/\/' . gethostbyname('packagist.org') . substr($fileUrl, 20);$/;"	v
fileUrl	composer.phar	/^$this->fileUrl = $fileUrl;$/;"	v
fileUrl	composer.phar	/^private $fileUrl;$/;"	v
filedate	composer.phar	/^$filedate = $fileinfo->getMTime();$/;"	v
fileinfo	composer.phar	/^$fileinfo = $this->current();$/;"	v
filename	composer.phar	/^$filename = $this->baseUrl.'\/'.$filename;$/;"	v
filename	composer.phar	/^$filename = $this->current()->getFilename();$/;"	v
filename	composer.phar	/^$filename = $this->current()->getRelativePathname();$/;"	v
filename	composer.phar	/^$filename = str_replace('\\\\', '\/', $filename);$/;"	v
filename	composer.phar	/^$filename = substr($filename, 0, $pos) . '%24' . substr($filename, $pos + 1);$/;"	v
filepath	composer.phar	/^$filepath = $iterator->current()->getPathname();$/;"	v
files	composer.phar	/^ $this->files = array($/;"	v
files	composer.phar	/^$files = $this->parseAutoloadsType($sortedPackageMap, 'files', $mainPackage);$/;"	v
files	composer.phar	/^$files = array_reverse($files);$/;"	v
files	composer.phar	/^$files = iterator_to_array($finder);$/;"	v
files	composer.phar	/^$files = iterator_to_array($this->toIterator($files));$/;"	v
files	composer.phar	/^$files = new ArchivableFilesFinder($sources, $excludes);$/;"	v
files	composer.phar	/^$files = new \\ArrayObject(is_array($files) ? $files : array($files));$/;"	v
files	composer.phar	/^$this->files = array();$/;"	v
files	composer.phar	/^private $files = array();$/;"	v
files	composer.phar	/^public function files()$/;"	f
filesCode	composer.phar	/^$filesCode = '';$/;"	v
filesize	composer.phar	/^$filesize = $fileinfo->getSize();$/;"	v
filesystem	composer.phar	/^$filesystem = new Filesystem();$/;"	v
filesystem	composer.phar	/^$this->filesystem = $filesystem ?: new Filesystem();$/;"	v
filesystem	composer.phar	/^$this->filesystem = $fs ?: new Filesystem;$/;"	v
filesystem	composer.phar	/^$this->filesystem = $fs;$/;"	v
filesystem	composer.phar	/^$this->filesystem = new Filesystem($this->process);$/;"	v
filesystem	composer.phar	/^$this->filesystem = new Filesystem();$/;"	v
filesystem	composer.phar	/^$this->filesystem = new Filesystem;$/;"	v
filesystem	composer.phar	/^private $filesystem;$/;"	v
filesystem	composer.phar	/^protected $filesystem;$/;"	v
fill	composer.phar	/^$fill = $size - strlen(strip_tags($messages));$/;"	v
fillCells	composer.phar	/^private function fillCells($row, $column)$/;"	f
fillNextRows	composer.phar	/^private function fillNextRows($rows, $line)$/;"	f
filter	composer.phar	/^$filter = $filter->bindTo(null);$/;"	v
filter	composer.phar	/^$filter = $input->getArgument('packages');$/;"	v
filter	composer.phar	/^$filter = function (\\SplFileInfo $file) use ($sources, $filters, $fs) {$/;"	v
filter	composer.phar	/^public function filter($relativePath, $exclude)$/;"	f
filter	composer.phar	/^public function filter(\\Closure $closure)$/;"	f
filterRequiredPackages	composer.phar	/^private function filterRequiredPackages(RepositoryInterface $repo, PackageInterface $package, $bucket = array())$/;"	f
filterRequires	composer.phar	/^$this->filterRequires = $filterRequires;$/;"	v
filterRequires	composer.phar	/^protected $filterRequires;$/;"	v
filterUrl	composer.phar	/^private function filterUrl($value, array $schemes = array('http', 'https'))$/;"	f
filters	composer.phar	/^$filters = array($/;"	v
filters	composer.phar	/^$this->filters = $filters;$/;"	v
filters	composer.phar	/^private $filters = array();$/;"	v
filters	composer.phar	/^protected $filters = array();$/;"	v
find	composer.phar	/^$find = $this->buildFindCommand($command, $dir);$/;"	v
find	composer.phar	/^public function find($includeArgs = true)$/;"	f
find	composer.phar	/^public function find($name)$/;"	f
find	composer.phar	/^public function find($name, $default = null, array $extraDirs = array())$/;"	f
findAlternatives	composer.phar	/^private function findAlternatives($name, $collection)$/;"	f
findArguments	composer.phar	/^public function findArguments()$/;"	f
findBestCandidate	composer.phar	/^public function findBestCandidate($packageName, $targetPackageVersion = null, $targetPhpVersion = null, $preferStable = true)$/;"	f
findBestVersionForPackage	composer.phar	/^private function findBestVersionForPackage(InputInterface $input, $name, $phpVersion)$/;"	f
findClasses	composer.phar	/^private static function findClasses($path)$/;"	f
findFile	composer.phar	/^    public function findFile($class)$/;"	f
findFile	composer.phar	/^public function findFile($class)$/;"	f
findFileWithExtension	composer.phar	/^    private function findFileWithExtension($class, $ext)$/;"	f
findFileWithExtension	composer.phar	/^private function findFileWithExtension($class, $ext)$/;"	f
findNamespace	composer.phar	/^public function findNamespace($namespace)$/;"	f
findPackage	composer.phar	/^public function findPackage($name, $constraint)$/;"	f
findPackage	composer.phar	/^public function findPackage($name, $constraint);$/;"	f
findPackages	composer.phar	/^protected function findPackages($name)$/;"	f
findPackages	composer.phar	/^public function findPackages($name, $constraint = null)$/;"	f
findPackages	composer.phar	/^public function findPackages($name, $constraint = null);$/;"	f
findPackages	composer.phar	/^public function findPackages($name, $constraint)$/;"	f
findRecommendedRequireVersion	composer.phar	/^public function findRecommendedRequireVersion(PackageInterface $package)$/;"	f
findRootPackages	composer.phar	/^protected function findRootPackages($installMap, $updateMap)$/;"	f
findShortestPath	composer.phar	/^public function findShortestPath($from, $to, $directories = false)$/;"	f
findShortestPathCode	composer.phar	/^public function findShortestPathCode($from, $to, $directories = false)$/;"	f
findUpdatePackages	composer.phar	/^public function findUpdatePackages(Pool $pool, array $installedMap, PackageInterface $package);$/;"	f
findUpdatePackages	composer.phar	/^public function findUpdatePackages(Pool $pool, array $installedMap, PackageInterface $package, $mustMatchName = false)$/;"	f
findUpdates	composer.phar	/^protected function findUpdates()$/;"	f
finder	composer.phar	/^$finder = $this->getFinder()->date('until '.$expire->format('Y-m-d H:i:s'));$/;"	v
finder	composer.phar	/^$finder = $this->getOldInstallationFinder($rollbackDir);$/;"	v
finder	composer.phar	/^$finder = Finder::create()$/;"	v
finder	composer.phar	/^$finder = new ExecutableFinder();$/;"	v
finder	composer.phar	/^$finder = new Finder();$/;"	v
finder	composer.phar	/^$finder = new PhpExecutableFinder();$/;"	v
finder	composer.phar	/^$this->finder = new Finder();$/;"	v
finder	composer.phar	/^protected $finder;$/;"	v
finish	composer.phar	/^public function finish()$/;"	f
first	composer.phar	/^        $first = $class[0];$/;"	v
first	composer.phar	/^        $first = $prefix[0];$/;"	v
first	composer.phar	/^$first = $class[0];$/;"	v
first	composer.phar	/^$first = $prefix[0];$/;"	v
firstByte	composer.phar	/^$firstByte = false;$/;"	v
firstByte	composer.phar	/^$firstByte = true;$/;"	v
fix	composer.phar	/^public function fix($packageName, ConstraintInterface $constraint = null)$/;"	f
fixHttpHeaderField	composer.phar	/^private static function fixHttpHeaderField($header)$/;"	f
fixedPackages	composer.phar	/^$fixedPackages = $platformRepo->getPackages();$/;"	v
fixedPackages	composer.phar	/^$fixedPackages = array_merge($fixedPackages, $additionalFixedPackages);$/;"	v
flag	composer.phar	/^$flag = defined('PHP_WINDOWS_VERSION_MAJOR') ? '\/D ' : '';$/;"	v
flags	composer.phar	/^$flags = "";$/;"	v
flags	composer.phar	/^$flags = $copyOnWindows ? \\FilesystemIterator::SKIP_DOTS | \\FilesystemIterator::FOLLOW_SYMLINKS : \\FilesystemIterator::SKIP_DOTS;$/;"	v
flags	composer.phar	/^$flags = $onlyName ? RepositoryInterface::SEARCH_NAME : RepositoryInterface::SEARCH_FULLTEXT;$/;"	v
flags	composer.phar	/^$flags = \\FilesystemIterator::SKIP_DOTS;$/;"	v
flags	composer.phar	/^$flags = \\RecursiveDirectoryIterator::SKIP_DOTS;$/;"	v
flags	composer.phar	/^$this->flags = $flags;$/;"	v
flags	composer.phar	/^private $flags;$/;"	v
flags	composer.phar	/^protected $flags;$/;"	v
fmod	composer.phar	/^private function fmod($number1, $number2)$/;"	f
followLinks	composer.phar	/^$this->followLinks = $followLinks;$/;"	v
followLinks	composer.phar	/^$this->followLinks = true;$/;"	v
followLinks	composer.phar	/^private $followLinks = false;$/;"	v
followLinks	composer.phar	/^protected $followLinks = false;$/;"	v
followLinks	composer.phar	/^public function followLinks()$/;"	f
foreground	composer.phar	/^$this->foreground = null;$/;"	v
foreground	composer.phar	/^$this->foreground = static::$availableForegroundColors[$color];$/;"	v
foreground	composer.phar	/^private $foreground;$/;"	v
format	composer.phar	/^$format = '%A@';$/;"	v
format	composer.phar	/^$format = '%C@';$/;"	v
format	composer.phar	/^$format = '%HT';$/;"	v
format	composer.phar	/^$format = '%T@';$/;"	v
format	composer.phar	/^$format = '%a';$/;"	v
format	composer.phar	/^$format = '%c';$/;"	v
format	composer.phar	/^$format = '%m';$/;"	v
format	composer.phar	/^$format = '%y';$/;"	v
format	composer.phar	/^$this->format = $format;$/;"	v
format	composer.phar	/^$this->format = null;$/;"	v
format	composer.phar	/^$this->format = self::FORMAT_NORMAL;$/;"	v
format	composer.phar	/^$this->format = self::FORMAT_NORMAL_NOMAX;$/;"	v
format	composer.phar	/^$this->format = self::FORMAT_QUIET;$/;"	v
format	composer.phar	/^$this->format = self::FORMAT_QUIET_NOMAX;$/;"	v
format	composer.phar	/^$this->format = self::FORMAT_VERBOSE;$/;"	v
format	composer.phar	/^$this->format = self::FORMAT_VERBOSE_NOMAX;$/;"	v
format	composer.phar	/^$this->format = self::getFormatDefinition($format);$/;"	v
format	composer.phar	/^$this->format = self::getFormatDefinition($format.'_nomax');$/;"	v
format	composer.phar	/^private $format = null;$/;"	v
format	composer.phar	/^private $format;$/;"	v
format	composer.phar	/^public function format($data, $depth = 0)$/;"	f
format	composer.phar	/^public function format($message)$/;"	f
format	composer.phar	/^public function format($message);$/;"	f
format	composer.phar	/^public static function format($json, $unescapeUnicode, $unescapeSlashes)$/;"	f
formatAuthors	composer.phar	/^protected function formatAuthors($author)$/;"	f
formatBlock	composer.phar	/^public function formatBlock($messages, $style, $large = false)$/;"	f
formatDefaultValue	composer.phar	/^private function formatDefaultValue($default)$/;"	f
formatHtml	composer.phar	/^private function formatHtml($matches)$/;"	f
formatLevelMap	composer.phar	/^$this->formatLevelMap = $formatLevelMap + $this->formatLevelMap;$/;"	v
formatLevelMap	composer.phar	/^private $formatLevelMap = array($/;"	v
formatLineCount	composer.phar	/^$this->formatLineCount = substr_count($this->format, "\\n");$/;"	v
formatLineCount	composer.phar	/^private $formatLineCount;$/;"	v
formatMemory	composer.phar	/^public static function formatMemory($memory)$/;"	f
formatPackagesUnique	composer.phar	/^protected function formatPackagesUnique($pool, array $packages)$/;"	f
formatRequirements	composer.phar	/^protected function formatRequirements(array $requirements)$/;"	f
formatSection	composer.phar	/^public function formatSection($section, $message, $style = 'info')$/;"	f
formatTime	composer.phar	/^public static function formatTime($secs)$/;"	f
formatVars	composer.phar	/^$this->formatVars = array();$/;"	v
formatVars	composer.phar	/^private $formatVars;$/;"	v
formatVersion	composer.phar	/^protected function formatVersion(PackageInterface $package)$/;"	f
formats	composer.phar	/^private static $formats;$/;"	v
formats	composer.phar	/^protected static $formats = array($/;"	v
formatted	composer.phar	/^$formatted = parent::format($message);$/;"	v
formatter	composer.phar	/^$formatter = $output->getFormatter();$/;"	v
formatter	composer.phar	/^$formatter = $this->getHelperSet()->get('debug_formatter');$/;"	v
formatter	composer.phar	/^$formatter = $this->getHelperSet()->get('formatter');$/;"	v
formatter	composer.phar	/^$formatter = new OutputFormatter(null, $styles);$/;"	v
formatter	composer.phar	/^$this->formatter = $formatter ?: new OutputFormatter();$/;"	v
formatter	composer.phar	/^$this->formatter = $formatter;$/;"	v
formatter	composer.phar	/^private $formatter;$/;"	v
formatters	composer.phar	/^private static $formatters;$/;"	v
foundDisabled	composer.phar	/^$foundDisabled = false;$/;"	v
foundDisabled	composer.phar	/^$foundDisabled = true;$/;"	v
foundFileIndex	composer.phar	/^$foundFileIndex = $this->locateFile($zip, 'composer.json');$/;"	v
from	composer.phar	/^$from = $initial->getFullPrettyVersion();$/;"	v
from	composer.phar	/^$from = $initial->getSourceReference();$/;"	v
from	composer.phar	/^$from = $this->combine($source, $file['from']);$/;"	v
from	composer.phar	/^$from = lcfirst($this->normalizePath($from));$/;"	v
from	composer.phar	/^$from = rtrim($from, '\/') . '\/dummy_file';$/;"	v
from	composer.phar	/^$from = substr($initial->getSourceReference(), 0, 7);$/;"	v
fromChangeList	composer.phar	/^$fromChangeList = $this->getChangeList($fromReference);$/;"	v
fromRevision	composer.phar	/^ $fromRevision = preg_replace('{.*@(\\d+)$}', '$1', $fromReference);$/;"	v
fs	composer.phar	/^$fs = $this->getFilesystem();$/;"	v
fs	composer.phar	/^$fs = new Filesystem();$/;"	v
fs	composer.phar	/^$fs = new Filesystem;$/;"	v
fullOutput	composer.phar	/^$fullOutput = implode("\\n", array($output, $errorOutput));$/;"	v
fullVersion	composer.phar	/^$fullVersion = $version;$/;"	v
func	composer.phar	/^$func = $mirror['preferred'] ? 'array_unshift' : 'array_push';$/;"	v
function	composer.phar	/^$function = $trace[$i]['function'];$/;"	v
gc	composer.phar	/^public function gc($ttl, $maxSize)$/;"	f
gcIsNecessary	composer.phar	/^public function gcIsNecessary()$/;"	f
generate	composer.phar	/^private function generate($finish = false)$/;"	f
generate	composer.phar	/^public function generate(array $components)$/;"	f
generateClassMap	composer.phar	/^private function generateClassMap($dir, $blacklist = null, $namespaceFilter = null)$/;"	f
generateP4Command	composer.phar	/^public function generateP4Command($command, $useClient = true)$/;"	f
generatePattern	composer.phar	/^protected function generatePattern($rule)$/;"	f
generatePatterns	composer.phar	/^protected function generatePatterns($rules)$/;"	f
generateSshUrl	composer.phar	/^protected function generateSshUrl()$/;"	f
generateUniquePerforceClientName	composer.phar	/^public function generateUniquePerforceClientName()$/;"	f
generateUnixyPhpProxyCode	composer.phar	/^private function generateUnixyPhpProxyCode()$/;"	f
generateUnixyProxyCode	composer.phar	/^protected function generateUnixyProxyCode($bin, $link)$/;"	f
generateWindowsPhpProxyCode	composer.phar	/^private function generateWindowsPhpProxyCode()$/;"	f
generateWindowsProxyCode	composer.phar	/^protected function generateWindowsProxyCode($bin, $link)$/;"	f
generator	composer.phar	/^ $generator = new AutoloadGenerator($dispatcher, $io);$/;"	v
generator	composer.phar	/^$generator = $composer->getAutoloadGenerator();$/;"	v
generator	composer.phar	/^$generator = $this->composer->getAutoloadGenerator();$/;"	v
get	composer.phar	/^protected function get($originUrl, $fileUrl, $additionalOptions = array(), $fileName = null, $progress = true)$/;"	f
get	composer.phar	/^public function get($key, $flags = 0)$/;"	f
get	composer.phar	/^public function get($label)$/;"	f
get	composer.phar	/^public function get($name)$/;"	f
getAbbreviationSuggestions	composer.phar	/^private function getAbbreviationSuggestions($abbrevs)$/;"	f
getAbbreviations	composer.phar	/^public static function getAbbreviations($names)$/;"	f
getAdapter	composer.phar	/^public function getAdapter()$/;"	f
getAdapter	composer.phar	/^public function getAdapter();$/;"	f
getAdapters	composer.phar	/^public function getAdapters()$/;"	f
getAlias	composer.phar	/^public function getAlias()$/;"	f
getAliasOf	composer.phar	/^public function getAliasOf()$/;"	f
getAliases	composer.phar	/^public function getAliases()$/;"	f
getAliases	composer.phar	/^public function getAliases();$/;"	f
getApiUrl	composer.phar	/^protected function getApiUrl()$/;"	f
getApplication	composer.phar	/^protected function getApplication()$/;"	f
getApplication	composer.phar	/^public function getApplication()$/;"	f
getApplicationDocument	composer.phar	/^public function getApplicationDocument(Application $application, $namespace = null)$/;"	f
getArchiveExcludes	composer.phar	/^public function getArchiveExcludes()$/;"	f
getArchiveExcludes	composer.phar	/^public function getArchiveExcludes();$/;"	f
getArgument	composer.phar	/^public function getArgument($name)$/;"	f
getArgument	composer.phar	/^public function getArgument($name);$/;"	f
getArgumentCount	composer.phar	/^public function getArgumentCount()$/;"	f
getArgumentDefaults	composer.phar	/^public function getArgumentDefaults()$/;"	f
getArgumentRequiredCount	composer.phar	/^public function getArgumentRequiredCount()$/;"	f
getArguments	composer.phar	/^public function getArguments()$/;"	f
getArguments	composer.phar	/^public function getArguments();$/;"	f
getAuthCache	composer.phar	/^protected function getAuthCache()$/;"	f
getAuthConfigSource	composer.phar	/^public function getAuthConfigSource()$/;"	f
getAuthentication	composer.phar	/^public function getAuthentication($repositoryName)$/;"	f
getAuthentication	composer.phar	/^public function getAuthentication($repositoryName);$/;"	f
getAuthentications	composer.phar	/^public function getAuthentications()$/;"	f
getAuthentications	composer.phar	/^public function getAuthentications();$/;"	f
getAuthors	composer.phar	/^public function getAuthors()$/;"	f
getAuthors	composer.phar	/^public function getAuthors();$/;"	f
getAutocompleterValues	composer.phar	/^public function getAutocompleterValues()$/;"	f
getAutoload	composer.phar	/^public function getAutoload()$/;"	f
getAutoload	composer.phar	/^public function getAutoload();$/;"	f
getAutoloadFile	composer.phar	/^protected function getAutoloadFile($vendorPathToTargetDirCode, $suffix)$/;"	f
getAutoloadGenerator	composer.phar	/^public function getAutoloadGenerator()$/;"	f
getAutoloadRealFile	composer.phar	/^protected function getAutoloadRealFile($useClassMap, $useIncludePath, $targetDirLoader, $useIncludeFiles, $vendorPathCode, $appBaseDirCode, $suffix, $useGlobalIncludePath, $prependAutoloader)$/;"	f
getBarCharacter	composer.phar	/^public function getBarCharacter()$/;"	f
getBarWidth	composer.phar	/^public function getBarWidth()$/;"	f
getBinaries	composer.phar	/^protected function getBinaries(PackageInterface $package)$/;"	f
getBinaries	composer.phar	/^public function getBinaries()$/;"	f
getBinaries	composer.phar	/^public function getBinaries();$/;"	f
getBorder	composer.phar	/^private function getBorder($id)$/;"	f
getBorderFormat	composer.phar	/^public function getBorderFormat()$/;"	f
getBranch	composer.phar	/^public function getBranch()$/;"	f
getBranchAlias	composer.phar	/^public function getBranchAlias(array $config)$/;"	f
getBranches	composer.phar	/^public function getBranches()$/;"	f
getBranches	composer.phar	/^public function getBranches();$/;"	f
getCacheDir	composer.phar	/^protected static function getCacheDir($home)$/;"	f
getCacheKey	composer.phar	/^private function getCacheKey(PackageInterface $package)$/;"	f
getCanonicalPackages	composer.phar	/^public function getCanonicalPackages()$/;"	f
getCanonicalPackages	composer.phar	/^public function getCanonicalPackages();$/;"	f
getCellHeaderFormat	composer.phar	/^public function getCellHeaderFormat()$/;"	f
getCellRowContentFormat	composer.phar	/^public function getCellRowContentFormat()$/;"	f
getCellRowFormat	composer.phar	/^public function getCellRowFormat()$/;"	f
getCellWidth	composer.phar	/^private function getCellWidth(array $row, $column)$/;"	f
getChangeList	composer.phar	/^protected function getChangeList($reference)$/;"	f
getChannelName	composer.phar	/^public function getChannelName()$/;"	f
getChildren	composer.phar	/^public function getChildren()$/;"	f
getChoices	composer.phar	/^public function getChoices()$/;"	f
getClassMap	composer.phar	/^    public function getClassMap()$/;"	f
getClassMap	composer.phar	/^public function getClassMap()$/;"	f
getClient	composer.phar	/^public function getClient()$/;"	f
getColspan	composer.phar	/^public function getColspan()$/;"	f
getColumnSeparatorWidth	composer.phar	/^private function getColumnSeparatorWidth()$/;"	f
getColumnWidth	composer.phar	/^private function getColumnWidth($column)$/;"	f
getColumnWidth	composer.phar	/^private function getColumnWidth(array $commands)$/;"	f
getCommand	composer.phar	/^protected function getCommand($cmd, $url, $path = null)$/;"	f
getCommand	composer.phar	/^public function getCommand($name)$/;"	f
getCommand	composer.phar	/^public function getCommand()$/;"	f
getCommandData	composer.phar	/^private function getCommandData(Command $command)$/;"	f
getCommandDocument	composer.phar	/^public function getCommandDocument(Command $command)$/;"	f
getCommandLine	composer.phar	/^public function getCommandLine()$/;"	f
getCommandName	composer.phar	/^protected function getCommandName(InputInterface $input)$/;"	f
getCommandName	composer.phar	/^public function getCommandName()$/;"	f
getCommands	composer.phar	/^public function getCommands()$/;"	f
getCommitLogs	composer.phar	/^protected function getCommitLogs($fromReference, $toReference, $path)$/;"	f
getCommitLogs	composer.phar	/^public function getCommitLogs($fromReference, $toReference)$/;"	f
getComposer	composer.phar	/^public function getComposer($required = true, $disablePlugins = false)$/;"	f
getComposer	composer.phar	/^public function getComposer()$/;"	f
getComposerEnv	composer.phar	/^private function getComposerEnv($var)$/;"	f
getComposerFile	composer.phar	/^public static function getComposerFile()$/;"	f
getComposerInformation	composer.phar	/^private function getComposerInformation(\\SplFileInfo $file)$/;"	f
getComposerInformation	composer.phar	/^public function getComposerInformation($identifier)$/;"	f
getComposerInformation	composer.phar	/^public function getComposerInformation($identifier);$/;"	f
getComposerInformationFromLabel	composer.phar	/^public function getComposerInformationFromLabel($identifier, $index)$/;"	f
getComposerInformationFromPath	composer.phar	/^public function getComposerInformationFromPath($composerJson)$/;"	f
getConfig	composer.phar	/^public function getConfig()$/;"	f
getConfigSource	composer.phar	/^public function getConfigSource()$/;"	f
getConflicts	composer.phar	/^public function getConflicts()$/;"	f
getConflicts	composer.phar	/^public function getConflicts();$/;"	f
getConsoleMode	composer.phar	/^private function getConsoleMode()$/;"	f
getConstraint	composer.phar	/^public function getConstraint()$/;"	f
getContentHash	composer.phar	/^private function getContentHash($composerFileContents)$/;"	f
getContentType	composer.phar	/^public function getContentType()$/;"	f
getContentType	composer.phar	/^public function getContentType();$/;"	f
getContentTypeMatchInHeader	composer.phar	/^protected static function getContentTypeMatchInHeader($header)$/;"	f
getContents	composer.phar	/^protected function getContents($url)$/;"	f
getContents	composer.phar	/^protected function getContents($url, $fetchingRepoData = false)$/;"	f
getContents	composer.phar	/^public function getContents($originUrl, $fileUrl, $progress = true, $options = array())$/;"	f
getContents	composer.phar	/^public function getContents($url)$/;"	f
getContents	composer.phar	/^public function getContents()$/;"	f
getContext	composer.phar	/^public static function getContext($url, array $defaultOptions = array(), array $defaultParams = array())$/;"	f
getCredentialString	composer.phar	/^protected function getCredentialString()$/;"	f
getCrossingChar	composer.phar	/^public function getCrossingChar()$/;"	f
getCurrent	composer.phar	/^public function getCurrent()$/;"	f
getCurrentPackages	composer.phar	/^private function getCurrentPackages($withDevReqs, $installedRepo)$/;"	f
getCurrentRules	composer.phar	/^private function getCurrentRules()$/;"	f
getData	composer.phar	/^public function getData()$/;"	f
getDefault	composer.phar	/^public function getDefault()$/;"	f
getDefaultCommands	composer.phar	/^protected function getDefaultCommands()$/;"	f
getDefaultHelperSet	composer.phar	/^protected function getDefaultHelperSet()$/;"	f
getDefaultInputDefinition	composer.phar	/^protected function getDefaultInputDefinition()$/;"	f
getDefaultNormalizer	composer.phar	/^private function getDefaultNormalizer()$/;"	f
getDefaultValidator	composer.phar	/^private function getDefaultValidator()$/;"	f
getDefinition	composer.phar	/^public function getDefinition()$/;"	f
getDependencyInfo	composer.phar	/^public function getDependencyInfo()$/;"	f
getDepot	composer.phar	/^public function getDepot()$/;"	f
getDescription	composer.phar	/^public function getDescription()$/;"	f
getDescription	composer.phar	/^public function getDescription();$/;"	f
getDescriptors	composer.phar	/^private function getDescriptors()$/;"	f
getDescriptors	composer.phar	/^public function getDescriptors()$/;"	f
getDescriptors	composer.phar	/^public function getDescriptors();$/;"	f
getDetails	composer.phar	/^public function getDetails()$/;"	f
getDevAutoload	composer.phar	/^public function getDevAutoload()$/;"	f
getDevAutoload	composer.phar	/^public function getDevAutoload();$/;"	f
getDevRequires	composer.phar	/^public function getDevRequires()$/;"	f
getDevRequires	composer.phar	/^public function getDevRequires();$/;"	f
getDisplay	composer.phar	/^public function getDisplay($normalize = false)$/;"	f
getDist	composer.phar	/^public function getDist($identifier)$/;"	f
getDist	composer.phar	/^public function getDist($identifier);$/;"	f
getDistMirrors	composer.phar	/^public function getDistMirrors()$/;"	f
getDistMirrors	composer.phar	/^public function getDistMirrors();$/;"	f
getDistReference	composer.phar	/^public function getDistReference()$/;"	f
getDistReference	composer.phar	/^public function getDistReference();$/;"	f
getDistSha1Checksum	composer.phar	/^public function getDistSha1Checksum()$/;"	f
getDistSha1Checksum	composer.phar	/^public function getDistSha1Checksum();$/;"	f
getDistType	composer.phar	/^public function getDistType()$/;"	f
getDistType	composer.phar	/^public function getDistType();$/;"	f
getDistUrl	composer.phar	/^public function getDistUrl()$/;"	f
getDistUrl	composer.phar	/^public function getDistUrl();$/;"	f
getDistUrls	composer.phar	/^public function getDistUrls()$/;"	f
getDistUrls	composer.phar	/^public function getDistUrls();$/;"	f
getDownloadManager	composer.phar	/^public function getDownloadManager()$/;"	f
getDownloader	composer.phar	/^public function getDownloader($type)$/;"	f
getDownloaderForInstalledPackage	composer.phar	/^public function getDownloaderForInstalledPackage(PackageInterface $package)$/;"	f
getDriver	composer.phar	/^public function getDriver()$/;"	f
getEmptyBarCharacter	composer.phar	/^public function getEmptyBarCharacter()$/;"	f
getEmptyStyle	composer.phar	/^public function getEmptyStyle()$/;"	f
getEnhanceSigchildCompatibility	composer.phar	/^public function getEnhanceSigchildCompatibility()$/;"	f
getEnhanceWindowsCompatibility	composer.phar	/^public function getEnhanceWindowsCompatibility()$/;"	f
getEnv	composer.phar	/^public function getEnv()$/;"	f
getErrorHandler	composer.phar	/^public function getErrorHandler()$/;"	f
getErrorMessage	composer.phar	/^protected function getErrorMessage($retval, $file)$/;"	f
getErrorOutput	composer.phar	/^public function getErrorOutput()$/;"	f
getErrorOutput	composer.phar	/^public function getErrorOutput();$/;"	f
getErrors	composer.phar	/^public function getErrors()$/;"	f
getErrors	composer.phar	/^public function getErrors();$/;"	f
getEventDispatcher	composer.phar	/^public function getEventDispatcher()$/;"	f
getExceededTimeout	composer.phar	/^public function getExceededTimeout()$/;"	f
getException	composer.phar	/^public function getException()$/;"	f
getExceptionByIdentifier	composer.phar	/^public function getExceptionByIdentifier($identifier)$/;"	f
getExceptionsExpression	composer.phar	/^private function getExceptionsExpression()$/;"	f
getExitCode	composer.phar	/^public function getExitCode()$/;"	f
getExitCodeText	composer.phar	/^public function getExitCodeText()$/;"	f
getExtra	composer.phar	/^public function getExtra()$/;"	f
getExtra	composer.phar	/^public function getExtra();$/;"	f
getFallbackDirs	composer.phar	/^    public function getFallbackDirs()$/;"	f
getFallbackDirs	composer.phar	/^public function getFallbackDirs()$/;"	f
getFallbackDirsPsr4	composer.phar	/^    public function getFallbackDirsPsr4()$/;"	f
getFallbackDirsPsr4	composer.phar	/^public function getFallbackDirsPsr4()$/;"	f
getFileName	composer.phar	/^protected function getFileName(PackageInterface $package, $path)$/;"	f
getFiles	composer.phar	/^public function getFiles()$/;"	f
getFiles	composer.phar	/^public function getFiles();$/;"	f
getFilesystem	composer.phar	/^public function getFilesystem()$/;"	f
getFinder	composer.phar	/^protected function getFinder()$/;"	f
getFirstArgument	composer.phar	/^public function getFirstArgument()$/;"	f
getFirstArgument	composer.phar	/^public function getFirstArgument();$/;"	f
getFlags	composer.phar	/^public function getFlags()$/;"	f
getFolderContent	composer.phar	/^private function getFolderContent($dir)$/;"	f
getFormatDefinition	composer.phar	/^public static function getFormatDefinition($name)$/;"	f
getFormatter	composer.phar	/^public function getFormatter()$/;"	f
getFormatter	composer.phar	/^public function getFormatter();$/;"	f
getFullPrettyVersion	composer.phar	/^public function getFullPrettyVersion($truncate = true)$/;"	f
getFullPrettyVersion	composer.phar	/^public function getFullPrettyVersion($truncate = true);$/;"	f
getGitConfig	composer.phar	/^protected function getGitConfig()$/;"	f
getGitHubDomainsRegex	composer.phar	/^public static function getGitHubDomainsRegex(Config $config)$/;"	f
getGithubRateLimit	composer.phar	/^private function getGithubRateLimit($domain, $token = null)$/;"	f
getGlob	composer.phar	/^public function getGlob()$/;"	f
getHash	composer.phar	/^public function getHash()$/;"	f
getHeader	composer.phar	/^protected function getHeader()$/;"	f
getHeaders	composer.phar	/^public function getHeaders()$/;"	f
getHelp	composer.phar	/^public function getHelp()$/;"	f
getHelper	composer.phar	/^public function getHelper($name)$/;"	f
getHelperSet	composer.phar	/^public function getHelperSet()$/;"	f
getHelperSet	composer.phar	/^public function getHelperSet();$/;"	f
getHiddenResponse	composer.phar	/^private function getHiddenResponse(OutputInterface $output, $inputStream)$/;"	f
getHomeDir	composer.phar	/^protected static function getHomeDir()$/;"	f
getHomepage	composer.phar	/^public function getHomepage()$/;"	f
getHomepage	composer.phar	/^public function getHomepage();$/;"	f
getHorizontalBorderChar	composer.phar	/^public function getHorizontalBorderChar()$/;"	f
getIO	composer.phar	/^public function getIO()$/;"	f
getId	composer.phar	/^public function getId()$/;"	f
getId	composer.phar	/^public function getId();$/;"	f
getIdentifierByName	composer.phar	/^public function getIdentifierByName($name)$/;"	f
getIdleTimeout	composer.phar	/^public function getIdleTimeout()$/;"	f
getIncludeFilesFile	composer.phar	/^protected function getIncludeFilesFile(array $files, Filesystem $filesystem, $basePath, $vendorPath, $vendorPathCode, $appBaseDirCode)$/;"	f
getIncludePaths	composer.phar	/^public function getIncludePaths()$/;"	f
getIncludePaths	composer.phar	/^public function getIncludePaths();$/;"	f
getIncludePathsFile	composer.phar	/^protected function getIncludePathsFile(array $packageMap, Filesystem $filesystem, $basePath, $vendorPath, $vendorPathCode, $appBaseDirCode)$/;"	f
getIncrementalErrorOutput	composer.phar	/^public function getIncrementalErrorOutput()$/;"	f
getIncrementalOutput	composer.phar	/^public function getIncrementalOutput()$/;"	f
getInitialPackage	composer.phar	/^public function getInitialPackage()$/;"	f
getInput	composer.phar	/^public function getInput()$/;"	f
getInputArgumentData	composer.phar	/^private function getInputArgumentData(InputArgument $argument)$/;"	f
getInputArgumentDocument	composer.phar	/^private function getInputArgumentDocument(InputArgument $argument)$/;"	f
getInputDefinitionData	composer.phar	/^private function getInputDefinitionData(InputDefinition $definition)$/;"	f
getInputDefinitionDocument	composer.phar	/^public function getInputDefinitionDocument(InputDefinition $definition)$/;"	f
getInputOptionData	composer.phar	/^private function getInputOptionData(InputOption $option)$/;"	f
getInputOptionDocument	composer.phar	/^private function getInputOptionDocument(InputOption $option)$/;"	f
getInputStream	composer.phar	/^public function getInputStream()$/;"	f
getInstallPath	composer.phar	/^public function getInstallPath(PackageInterface $package)$/;"	f
getInstallPath	composer.phar	/^public function getInstallPath(PackageInterface $package);$/;"	f
getInstallPath	composer.phar	/^public function getInstallPath(PackageInterface $package, $global = false)$/;"	f
getInstallationManager	composer.phar	/^public function getInstallationManager()$/;"	f
getInstallationSource	composer.phar	/^public function getInstallationSource()$/;"	f
getInstallationSource	composer.phar	/^public function getInstallationSource();$/;"	f
getInstalledRepo	composer.phar	/^public function getInstalledRepo()$/;"	f
getInstaller	composer.phar	/^public function getInstaller($type)$/;"	f
getIterator	composer.phar	/^public function getIterator()$/;"	f
getIteratorFor	composer.phar	/^public function getIteratorFor($types)$/;"	f
getIteratorWithout	composer.phar	/^public function getIteratorWithout($types)$/;"	f
getJob	composer.phar	/^public function getJob()$/;"	f
getJobType	composer.phar	/^public function getJobType()$/;"	f
getJobType	composer.phar	/^public function getJobType();$/;"	f
getJobs	composer.phar	/^public function getJobs()$/;"	f
getKeywords	composer.phar	/^public function getKeywords()$/;"	f
getKeywords	composer.phar	/^public function getKeywords();$/;"	f
getLabelFromSourceReference	composer.phar	/^private function getLabelFromSourceReference($ref)$/;"	f
getLastBackupVersion	composer.phar	/^protected function getLastBackupVersion($rollbackDir)$/;"	f
getLastHeaders	composer.phar	/^public function getLastHeaders()$/;"	f
getLicense	composer.phar	/^public function getLicense()$/;"	f
getLicense	composer.phar	/^public function getLicense();$/;"	f
getLicenseByIdentifier	composer.phar	/^public function getLicenseByIdentifier($identifier)$/;"	f
getLicensesExpression	composer.phar	/^private function getLicensesExpression()$/;"	f
getListeners	composer.phar	/^protected function getListeners(Event $event)$/;"	f
getLiterals	composer.phar	/^public function getLiterals()$/;"	f
getLoader	composer.phar	/^    public static function getLoader()$/;"	f
getLoader	composer.phar	/^public static function getLoader()$/;"	f
getLocalChanges	composer.phar	/^public function getLocalChanges(PackageInterface $package, $path)$/;"	f
getLocalChanges	composer.phar	/^public function getLocalChanges(PackageInterface $package, $path);$/;"	f
getLocalRepositories	composer.phar	/^public function getLocalRepositories()$/;"	f
getLocalRepository	composer.phar	/^public function getLocalRepository()$/;"	f
getLockData	composer.phar	/^public function getLockData()$/;"	f
getLockedRepository	composer.phar	/^public function getLockedRepository($withDevReqs = false)$/;"	f
getLocker	composer.phar	/^public function getLocker()$/;"	f
getLongVersion	composer.phar	/^public function getLongVersion()$/;"	f
getMaxAttempts	composer.phar	/^public function getMaxAttempts()$/;"	f
getMaxSteps	composer.phar	/^public function getMaxSteps()$/;"	f
getMessage	composer.phar	/^public function getMessage($name = 'message')$/;"	f
getMinimumStability	composer.phar	/^private function getMinimumStability(InputInterface $input)$/;"	f
getMinimumStability	composer.phar	/^public function getMinimumStability()$/;"	f
getMinimumStability	composer.phar	/^public function getMinimumStability();$/;"	f
getName	composer.phar	/^public function getName()$/;"	f
getName	composer.phar	/^public function getName();$/;"	f
getNames	composer.phar	/^public function getNames()$/;"	f
getNames	composer.phar	/^public function getNames();$/;"	f
getNamespaces	composer.phar	/^public function getNamespaces()$/;"	f
getNativeDefinition	composer.phar	/^public function getNativeDefinition()$/;"	f
getNewWorkingDir	composer.phar	/^private function getNewWorkingDir(InputInterface $input)$/;"	f
getNextPage	composer.phar	/^protected function getNextPage()$/;"	f
getNormalizer	composer.phar	/^public function getNormalizer()$/;"	f
getNotificationUrl	composer.phar	/^public function getNotificationUrl()$/;"	f
getNotificationUrl	composer.phar	/^public function getNotificationUrl();$/;"	f
getNumberOfColumns	composer.phar	/^private function getNumberOfColumns(array $row)$/;"	f
getOldInstallationFinder	composer.phar	/^protected function getOldInstallationFinder($rollbackDir)$/;"	f
getOperation	composer.phar	/^public function getOperation()$/;"	f
getOperations	composer.phar	/^public function getOperations()$/;"	f
getOperator	composer.phar	/^public function getOperator()$/;"	f
getOption	composer.phar	/^public function getOption($name)$/;"	f
getOption	composer.phar	/^public function getOption($name);$/;"	f
getOptionDefaults	composer.phar	/^public function getOptionDefaults()$/;"	f
getOptionForShortcut	composer.phar	/^public function getOptionForShortcut($shortcut)$/;"	f
getOptionals	composer.phar	/^public function getOptionals()$/;"	f
getOptions	composer.phar	/^public function getOptions()$/;"	f
getOptions	composer.phar	/^public function getOptions();$/;"	f
getOptionsForUrl	composer.phar	/^protected function getOptionsForUrl($originUrl, $additionalOptions)$/;"	f
getOtherWatch	composer.phar	/^public function getOtherWatch($literal)$/;"	f
getOutput	composer.phar	/^protected function getOutput()$/;"	f
getOutput	composer.phar	/^public function getOutput()$/;"	f
getP4ClientSpec	composer.phar	/^public function getP4ClientSpec()$/;"	f
getP4variable	composer.phar	/^protected function getP4variable($name)$/;"	f
getPackage	composer.phar	/^protected function getPackage(RepositoryInterface $installedRepo, RepositoryInterface $repos, $name, $version = null)$/;"	f
getPackage	composer.phar	/^public function getPackage()$/;"	f
getPackageBasePath	composer.phar	/^protected function getPackageBasePath(PackageInterface $package)$/;"	f
getPackageFilename	composer.phar	/^public function getPackageFilename(PackageInterface $package)$/;"	f
getPackageList	composer.phar	/^protected function getPackageList($packages)$/;"	f
getPackageName	composer.phar	/^public function getPackageName()$/;"	f
getPackageTime	composer.phar	/^private function getPackageTime(PackageInterface $package)$/;"	f
getPackages	composer.phar	/^public function getPackages()$/;"	f
getPackages	composer.phar	/^public function getPackages();$/;"	f
getPadType	composer.phar	/^public function getPadType()$/;"	f
getPaddingChar	composer.phar	/^public function getPaddingChar()$/;"	f
getParameterOption	composer.phar	/^public function getParameterOption($values, $default = false)$/;"	f
getParameterOption	composer.phar	/^public function getParameterOption($values, $default = false);$/;"	f
getParser	composer.phar	/^private function getParser()$/;"	f
getPassword	composer.phar	/^protected function getPassword()$/;"	f
getPastInput	composer.phar	/^public function getPastInput()$/;"	f
getPath	composer.phar	/^protected function getPath()$/;"	f
getPath	composer.phar	/^public function getPath()$/;"	f
getPath	composer.phar	/^public function getPath();$/;"	f
getPathCode	composer.phar	/^protected function getPathCode(Filesystem $filesystem, $basePath, $vendorPath, $path)$/;"	f
getPid	composer.phar	/^public function getPid()$/;"	f
getPlaceholderFormatterDefinition	composer.phar	/^public static function getPlaceholderFormatterDefinition($name)$/;"	f
getPlatformOverrides	composer.phar	/^public function getPlatformOverrides()$/;"	f
getPlatformPath	composer.phar	/^public static function getPlatformPath($path)$/;"	f
getPlatformRequirements	composer.phar	/^public function getPlatformRequirements($withDevReqs = false)$/;"	f
getPluginApiVersion	composer.phar	/^protected function getPluginApiVersion()$/;"	f
getPluginManager	composer.phar	/^public function getPluginManager()$/;"	f
getPlugins	composer.phar	/^public function getPlugins()$/;"	f
getPolicy	composer.phar	/^public function getPolicy()$/;"	f
getPool	composer.phar	/^private function getPool(InputInterface $input)$/;"	f
getPool	composer.phar	/^public function getPool()$/;"	f
getPort	composer.phar	/^protected function getPort()$/;"	f
getPreferLowest	composer.phar	/^public function getPreferLowest()$/;"	f
getPreferStable	composer.phar	/^public function getPreferStable()$/;"	f
getPreferStable	composer.phar	/^public function getPreferStable();$/;"	f
getPrefixes	composer.phar	/^    public function getPrefixes()$/;"	f
getPrefixes	composer.phar	/^public function getPrefixes()$/;"	f
getPrefixesPsr4	composer.phar	/^    public function getPrefixesPsr4()$/;"	f
getPrefixesPsr4	composer.phar	/^public function getPrefixesPsr4()$/;"	f
getPrettyConstraint	composer.phar	/^public function getPrettyConstraint()$/;"	f
getPrettyName	composer.phar	/^public function getPrettyName()$/;"	f
getPrettyName	composer.phar	/^public function getPrettyName();$/;"	f
getPrettyString	composer.phar	/^public function getPrettyString()$/;"	f
getPrettyString	composer.phar	/^public function getPrettyString();$/;"	f
getPrettyString	composer.phar	/^public function getPrettyString(PackageInterface $sourcePackage)$/;"	f
getPrettyString	composer.phar	/^public function getPrettyString(Pool $pool = null)$/;"	f
getPrettyString	composer.phar	/^public function getPrettyString(Pool $pool, array $installedMap = array())$/;"	f
getPrettyString	composer.phar	/^public function getPrettyString(array $installedMap = array())$/;"	f
getPrettyVersion	composer.phar	/^public function getPrettyVersion()$/;"	f
getPrettyVersion	composer.phar	/^public function getPrettyVersion();$/;"	f
getPriority	composer.phar	/^public function getPriority(Pool $pool, PackageInterface $package)$/;"	f
getPriority	composer.phar	/^public function getPriority(RepositoryInterface $repo)$/;"	f
getProblems	composer.phar	/^public function getProblems()$/;"	f
getProcess	composer.phar	/^protected function getProcess()$/;"	f
getProcess	composer.phar	/^public function getProcess()$/;"	f
getProcessIsolation	composer.phar	/^public function getProcessIsolation()$/;"	f
getProcessedHelp	composer.phar	/^public function getProcessedHelp()$/;"	f
getProcessedUrl	composer.phar	/^public function getProcessedUrl()$/;"	f
getProgress	composer.phar	/^public function getProgress()$/;"	f
getProgressBar	composer.phar	/^private function getProgressBar()$/;"	f
getProgressCharacter	composer.phar	/^public function getProgressCharacter()$/;"	f
getProgressPercent	composer.phar	/^public function getProgressPercent()$/;"	f
getPrompt	composer.phar	/^protected function getPrompt()$/;"	f
getPrompt	composer.phar	/^public function getPrompt()$/;"	f
getProperty	composer.phar	/^protected function getProperty($element, $property, $fallback = null)$/;"	f
getProviderNames	composer.phar	/^public function getProviderNames()$/;"	f
getProvides	composer.phar	/^public function getProvides()$/;"	f
getProvides	composer.phar	/^public function getProvides();$/;"	f
getQuestion	composer.phar	/^public function getQuestion()$/;"	f
getRateLimit	composer.phar	/^protected function getRateLimit(array $headers)$/;"	f
getReason	composer.phar	/^public function getReason()$/;"	f
getReason	composer.phar	/^public function getReason();$/;"	f
getReasonData	composer.phar	/^public function getReasonData()$/;"	f
getReasons	composer.phar	/^public function getReasons()$/;"	f
getReferences	composer.phar	/^public function getReferences()$/;"	f
getReferences	composer.phar	/^public function getReferences();$/;"	f
getRegex	composer.phar	/^public function getRegex()$/;"	f
getRelativePath	composer.phar	/^public function getRelativePath()$/;"	f
getRelativePathname	composer.phar	/^public function getRelativePathname()$/;"	f
getReleaseDate	composer.phar	/^public function getReleaseDate()$/;"	f
getReleaseDate	composer.phar	/^public function getReleaseDate();$/;"	f
getReleases	composer.phar	/^public function getReleases()$/;"	f
getRemoteFilesystem	composer.phar	/^public function getRemoteFilesystem()$/;"	f
getReplacementPackage	composer.phar	/^public function getReplacementPackage()$/;"	f
getReplacementPackage	composer.phar	/^public function getReplacementPackage();$/;"	f
getReplaces	composer.phar	/^public function getReplaces()$/;"	f
getReplaces	composer.phar	/^public function getReplaces();$/;"	f
getRepoConfig	composer.phar	/^private function getRepoConfig(VcsRepository $repository)$/;"	f
getRepoConfig	composer.phar	/^public function getRepoConfig()$/;"	f
getRepos	composer.phar	/^protected function getRepos()$/;"	f
getRepositories	composer.phar	/^public function getRepositories()$/;"	f
getRepositories	composer.phar	/^public function getRepositories();$/;"	f
getRepository	composer.phar	/^public function getRepository()$/;"	f
getRepository	composer.phar	/^public function getRepository();$/;"	f
getRepositoryManager	composer.phar	/^public function getRepositoryManager()$/;"	f
getRepositoryUrl	composer.phar	/^public function getRepositoryUrl()$/;"	f
getRequest	composer.phar	/^public function getRequest()$/;"	f
getRequiredPackage	composer.phar	/^public function getRequiredPackage()$/;"	f
getRequires	composer.phar	/^public function getRequires()$/;"	f
getRequires	composer.phar	/^public function getRequires();$/;"	f
getResourcesDir	composer.phar	/^public static function getResourcesDir()$/;"	f
getResponse	composer.phar	/^public function getResponse()$/;"	f
getRoot	composer.phar	/^public function getRoot()$/;"	f
getRootAliases	composer.phar	/^private function getRootAliases()$/;"	f
getRootIdentifier	composer.phar	/^public function getRootIdentifier()$/;"	f
getRootIdentifier	composer.phar	/^public function getRootIdentifier();$/;"	f
getRowColumns	composer.phar	/^private function getRowColumns($row)$/;"	f
getRowspan	composer.phar	/^public function getRowspan()$/;"	f
getRule	composer.phar	/^public function getRule()$/;"	f
getRuleSetSize	composer.phar	/^public function getRuleSetSize()$/;"	f
getRules	composer.phar	/^public function getRules()$/;"	f
getRulesFor	composer.phar	/^public function getRulesFor($jobs, $installedMap, $ignorePlatformReqs = false)$/;"	f
getScheme	composer.phar	/^protected function getScheme()$/;"	f
getScriptListeners	composer.phar	/^protected function getScriptListeners(Event $event)$/;"	f
getScripts	composer.phar	/^public function getScripts()$/;"	f
getScripts	composer.phar	/^public function getScripts();$/;"	f
getShell	composer.phar	/^private function getShell()$/;"	f
getShortDescription	composer.phar	/^public function getShortDescription()$/;"	f
getShortcut	composer.phar	/^public function getShortcut()$/;"	f
getSource	composer.phar	/^public function getSource($identifier)$/;"	f
getSource	composer.phar	/^public function getSource($identifier);$/;"	f
getSource	composer.phar	/^public function getSource()$/;"	f
getSourceMirrors	composer.phar	/^public function getSourceMirrors()$/;"	f
getSourceMirrors	composer.phar	/^public function getSourceMirrors();$/;"	f
getSourceReference	composer.phar	/^public function getSourceReference()$/;"	f
getSourceReference	composer.phar	/^public function getSourceReference();$/;"	f
getSourceType	composer.phar	/^public function getSourceType()$/;"	f
getSourceType	composer.phar	/^public function getSourceType();$/;"	f
getSourceUrl	composer.phar	/^public function getSourceUrl()$/;"	f
getSourceUrl	composer.phar	/^public function getSourceUrl();$/;"	f
getSourceUrls	composer.phar	/^public function getSourceUrls()$/;"	f
getSourceUrls	composer.phar	/^public function getSourceUrls();$/;"	f
getStability	composer.phar	/^public function getStability()$/;"	f
getStability	composer.phar	/^public function getStability();$/;"	f
getStabilityFlags	composer.phar	/^public function getStabilityFlags()$/;"	f
getStabilityFlags	composer.phar	/^public function getStabilityFlags();$/;"	f
getStabilityPriority	composer.phar	/^public function getStabilityPriority()$/;"	f
getStartTime	composer.phar	/^public function getStartTime()$/;"	f
getStatus	composer.phar	/^public function getStatus()$/;"	f
getStatusCode	composer.phar	/^public function getStatusCode()$/;"	f
getStdin	composer.phar	/^public function getStdin()$/;"	f
getStep	composer.phar	/^public function getStep()$/;"	f
getStepWidth	composer.phar	/^public function getStepWidth()$/;"	f
getStopSignal	composer.phar	/^public function getStopSignal()$/;"	f
getStream	composer.phar	/^public function getStream()$/;"	f
getStreamWithoutLabel	composer.phar	/^public function getStreamWithoutLabel($stream)$/;"	f
getSttyColumns	composer.phar	/^private function getSttyColumns()$/;"	f
getStyle	composer.phar	/^public function getStyle($name)$/;"	f
getStyle	composer.phar	/^public function getStyle($name);$/;"	f
getStyle	composer.phar	/^public function getStyle()$/;"	f
getStyleDefinition	composer.phar	/^public static function getStyleDefinition($name)$/;"	f
getStyleStack	composer.phar	/^public function getStyleStack()$/;"	f
getSubPath	composer.phar	/^public function getSubPath()$/;"	f
getSubPathname	composer.phar	/^public function getSubPathname()$/;"	f
getSubscribedEvents	composer.phar	/^public static function getSubscribedEvents();$/;"	f
getSuggests	composer.phar	/^public function getSuggests()$/;"	f
getSuggests	composer.phar	/^public function getSuggests();$/;"	f
getSupport	composer.phar	/^public function getSupport()$/;"	f
getSupport	composer.phar	/^public function getSupport();$/;"	f
getSupportedOperators	composer.phar	/^public static function getSupportedOperators()$/;"	f
getSynopsis	composer.phar	/^public function getSynopsis($short = false)$/;"	f
getTags	composer.phar	/^public function getTags()$/;"	f
getTags	composer.phar	/^public function getTags();$/;"	f
getTarget	composer.phar	/^public function getTarget()$/;"	f
getTargetDir	composer.phar	/^public function getTargetDir()$/;"	f
getTargetDir	composer.phar	/^public function getTargetDir();$/;"	f
getTargetPackage	composer.phar	/^public function getTargetPackage()$/;"	f
getTermSignal	composer.phar	/^public function getTermSignal()$/;"	f
getTerminalDimensions	composer.phar	/^public function getTerminalDimensions()$/;"	f
getTerminalHeight	composer.phar	/^protected function getTerminalHeight()$/;"	f
getTerminalWidth	composer.phar	/^private function getTerminalWidth()$/;"	f
getTerminalWidth	composer.phar	/^protected function getTerminalWidth()$/;"	f
getTimeout	composer.phar	/^public function getTimeout()$/;"	f
getTimeout	composer.phar	/^public static function getTimeout()$/;"	f
getTransportOptions	composer.phar	/^public function getTransportOptions()$/;"	f
getTransportOptions	composer.phar	/^public function getTransportOptions();$/;"	f
getType	composer.phar	/^public function getType()$/;"	f
getType	composer.phar	/^public function getType();$/;"	f
getTypes	composer.phar	/^public function getTypes()$/;"	f
getUniqueName	composer.phar	/^public function getUniqueName()$/;"	f
getUniqueName	composer.phar	/^public function getUniqueName();$/;"	f
getUpcomingInput	composer.phar	/^public function getUpcomingInput()$/;"	f
getUriRetriever	composer.phar	/^public function getUriRetriever()$/;"	f
getUrl	composer.phar	/^public function getUrl()$/;"	f
getUrl	composer.phar	/^public function getUrl();$/;"	f
getUrlMatches	composer.phar	/^private function getUrlMatches()$/;"	f
getUrls	composer.phar	/^protected function getUrls($url, $mirrors, $ref, $type, $urlType)$/;"	f
getUsages	composer.phar	/^public function getUsages()$/;"	f
getUseIncludePath	composer.phar	/^    public function getUseIncludePath()$/;"	f
getUseIncludePath	composer.phar	/^public function getUseIncludePath()$/;"	f
getUser	composer.phar	/^public function getUser()$/;"	f
getUsername	composer.phar	/^protected function getUsername()$/;"	f
getValidator	composer.phar	/^public function getValidator()$/;"	f
getVerbosity	composer.phar	/^public function getVerbosity()$/;"	f
getVerbosity	composer.phar	/^public function getVerbosity();$/;"	f
getVersion	composer.phar	/^public function getVersion()$/;"	f
getVersion	composer.phar	/^public function getVersion();$/;"	f
getVerticalBorderChar	composer.phar	/^public function getVerticalBorderChar()$/;"	f
getWarnings	composer.phar	/^public function getWarnings()$/;"	f
getWorkingDirectory	composer.phar	/^public function getWorkingDirectory()$/;"	f
getter	composer.phar	/^$getter = 'get'.ucfirst($method);$/;"	v
git	composer.phar	/^$git = $this->getGitConfig();$/;"	v
gitBin	composer.phar	/^$gitBin = $finder->find('git');$/;"	v
gitConfig	composer.phar	/^$this->gitConfig = array();$/;"	v
gitConfig	composer.phar	/^private $gitConfig;$/;"	v
gitDriver	composer.phar	/^$this->gitDriver = new GitDriver($/;"	v
gitDriver	composer.phar	/^$this->gitDriver = null;$/;"	v
gitDriver	composer.phar	/^protected $gitDriver;$/;"	v
gitHubUtil	composer.phar	/^$gitHubUtil = new GitHub($this->io, $this->config, $this->process);$/;"	v
gitHubUtil	composer.phar	/^$gitHubUtil = new GitHub($this->io, $this->config, $this->process, $this->remoteFilesystem);$/;"	v
gitHubUtil	composer.phar	/^$gitHubUtil = new GitHub($this->io, $this->config, null);$/;"	v
gitRef	composer.phar	/^ $gitRef = $reference;$/;"	v
gitUtil	composer.phar	/^$gitUtil = new GitUtil($this->io, $this->config, $this->process, $fs);$/;"	v
gitUtil	composer.phar	/^$this->gitUtil = new GitUtil($this->io, $this->config, $this->process, $this->filesystem);$/;"	v
gitUtil	composer.phar	/^private $gitUtil;$/;"	v
givenArguments	composer.phar	/^$givenArguments = $this->arguments;$/;"	v
globalCommands	composer.phar	/^$globalCommands = array();$/;"	v
globalComposer	composer.phar	/^$globalComposer = $this->createGlobalComposer($io, $config, $disablePlugins);$/;"	v
globalComposer	composer.phar	/^$this->globalComposer = $globalComposer;$/;"	v
globalComposer	composer.phar	/^protected $globalComposer;$/;"	v
globalRepo	composer.phar	/^$globalRepo = $this->globalComposer ? $this->globalComposer->getRepositoryManager()->getLocalRepository() : null;$/;"	v
greaterThan	composer.phar	/^public static function greaterThan($version1, $version2)$/;"	f
greaterThanOrEqualTo	composer.phar	/^public static function greaterThanOrEqualTo($version1, $version2)$/;"	f
grep	composer.phar	/^$grep = $command->ins('grep');$/;"	v
groupLiteralsByNamePreferInstalled	composer.phar	/^protected function groupLiteralsByNamePreferInstalled(Pool $pool, array $installedMap, $literals)$/;"	f
groupName	composer.phar	/^$groupName = $depItem['attribs']['name'];$/;"	v
guessFeatureVersion	composer.phar	/^private function guessFeatureVersion(array $packageConfig, $version, array $branches, $scmCmdline, $path)$/;"	f
guessGitVersion	composer.phar	/^private function guessGitVersion(array $packageConfig, $path)$/;"	f
guessHgVersion	composer.phar	/^private function guessHgVersion(array $packageConfig, $path)$/;"	f
guessSvnVersion	composer.phar	/^private function guessSvnVersion(array $packageConfig, $path)$/;"	f
guessType	composer.phar	/^private function guessType()$/;"	f
guessVersion	composer.phar	/^public function guessVersion(array $packageConfig, $path)$/;"	f
guesser	composer.phar	/^$guesser = new VersionGuesser($config, new ProcessExecutor($io), $parser);$/;"	v
hadInvalidBranches	composer.phar	/^public function hadInvalidBranches()$/;"	f
handle	composer.phar	/^ $this->handle = fopen($this->file, 'r');$/;"	v
handle	composer.phar	/^$handle = fopen($bin, 'r');$/;"	v
handle	composer.phar	/^$this->handle = null;$/;"	v
handle	composer.phar	/^private $handle;$/;"	v
handle	composer.phar	/^public static function handle($level, $message, $file, $line)$/;"	f
handlePackage	composer.phar	/^private function handlePackage(CompletePackageInterface $package, $showHomepage, $showOnly)$/;"	f
handled	composer.phar	/^$handled = false;$/;"	v
handled	composer.phar	/^$handled = true;$/;"	v
handler	composer.phar	/^$handler = function ($type, $buffer) use (&$output, $io, $verbose) {$/;"	v
has	composer.phar	/^public function has($key)$/;"	f
has	composer.phar	/^public function has($name)$/;"	f
hasAnArrayArgument	composer.phar	/^$this->hasAnArrayArgument = false;$/;"	v
hasAnArrayArgument	composer.phar	/^$this->hasAnArrayArgument = true;$/;"	v
hasAnArrayArgument	composer.phar	/^private $hasAnArrayArgument = false;$/;"	v
hasArgument	composer.phar	/^public function hasArgument($name)$/;"	f
hasArgument	composer.phar	/^public function hasArgument($name);$/;"	f
hasAuth	composer.phar	/^$this->hasAuth = true;$/;"	v
hasAuth	composer.phar	/^protected $hasAuth;$/;"	v
hasAuth	composer.phar	/^protected function hasAuth()$/;"	f
hasAuthentication	composer.phar	/^public function hasAuthentication($repositoryName)$/;"	f
hasAuthentication	composer.phar	/^public function hasAuthentication($repositoryName);$/;"	f
hasBeenSignaled	composer.phar	/^public function hasBeenSignaled()$/;"	f
hasBeenStopped	composer.phar	/^public function hasBeenStopped()$/;"	f
hasChildren	composer.phar	/^public function hasChildren()$/;"	f
hasColorSupport	composer.phar	/^protected function hasColorSupport()$/;"	f
hasComposerFile	composer.phar	/^public function hasComposerFile($identifier)$/;"	f
hasComposerFile	composer.phar	/^public function hasComposerFile($identifier);$/;"	f
hasEndFlag	composer.phar	/^public function hasEndFlag()$/;"	f
hasEndJoker	composer.phar	/^public function hasEndJoker()$/;"	f
hasEventListeners	composer.phar	/^public function hasEventListeners(Event $event)$/;"	f
hasIssues	composer.phar	/^$this->hasIssues = !empty($repoData['has_issues']);$/;"	v
hasIssues	composer.phar	/^protected $hasIssues;$/;"	v
hasListeners	composer.phar	/^$hasListeners = $composer->getEventDispatcher()->hasEventListeners(new CommandEvent($script, $composer, $this->getIO()));$/;"	v
hasLocalAlias	composer.phar	/^$hasLocalAlias = false;$/;"	v
hasLocalAlias	composer.phar	/^$hasLocalAlias = true;$/;"	v
hasOption	composer.phar	/^public function hasOption($name)$/;"	f
hasOption	composer.phar	/^public function hasOption($name);$/;"	f
hasOption	composer.phar	/^public function hasOption($option)$/;"	f
hasOptional	composer.phar	/^$this->hasOptional = false;$/;"	v
hasOptional	composer.phar	/^$this->hasOptional = true;$/;"	v
hasOptional	composer.phar	/^private $hasOptional;$/;"	v
hasPackage	composer.phar	/^public function hasPackage(PackageInterface $package)$/;"	f
hasPackage	composer.phar	/^public function hasPackage(PackageInterface $package);$/;"	f
hasParameterOption	composer.phar	/^public function hasParameterOption($values)$/;"	f
hasParameterOption	composer.phar	/^public function hasParameterOption($values);$/;"	f
hasProviders	composer.phar	/^$this->hasProviders = true;$/;"	v
hasProviders	composer.phar	/^protected $hasProviders = false;$/;"	v
hasProviders	composer.phar	/^public function hasProviders()$/;"	f
hasReadline	composer.phar	/^$this->hasReadline = function_exists('readline');$/;"	v
hasReadline	composer.phar	/^private $hasReadline;$/;"	v
hasShortcut	composer.phar	/^public function hasShortcut($name)$/;"	f
hasStartFlag	composer.phar	/^public function hasStartFlag()$/;"	f
hasStartJoker	composer.phar	/^public function hasStartJoker()$/;"	f
hasStashedChanges	composer.phar	/^$this->hasStashedChanges = false;$/;"	v
hasStashedChanges	composer.phar	/^$this->hasStashedChanges = true;$/;"	v
hasStashedChanges	composer.phar	/^private $hasStashedChanges = false;$/;"	v
hasStderrSupport	composer.phar	/^protected function hasStderrSupport()$/;"	f
hasStdoutSupport	composer.phar	/^protected function hasStdoutSupport()$/;"	f
hasSttyAvailable	composer.phar	/^private function hasSttyAvailable()$/;"	f
hasStyle	composer.phar	/^public function hasStyle($name)$/;"	f
hasStyle	composer.phar	/^public function hasStyle($name);$/;"	f
hasSystemCallBeenInterrupted	composer.phar	/^protected function hasSystemCallBeenInterrupted()$/;"	f
hasVcs	composer.phar	/^$hasVcs = $installedFromVcs;$/;"	v
hasVcs	composer.phar	/^$hasVcs = false;$/;"	v
hasVendorIgnore	composer.phar	/^protected function hasVendorIgnore($ignoreFile, $vendor = 'vendor')$/;"	f
hash	composer.phar	/^$hash = $hash['sha256'];$/;"	v
hash	composer.phar	/^$hash = $rule->getHash();$/;"	v
hash	composer.phar	/^$hash = $this->providerListing[$name]['sha256'];$/;"	v
hash	composer.phar	/^$hash = $this->providerListing[$url]['sha256'];$/;"	v
hash	composer.phar	/^$hash = null;$/;"	v
hash	composer.phar	/^$hash = reset($json['provider-includes']);$/;"	v
hash	composer.phar	/^$this->hash = md5($composerFileContents);$/;"	v
hash	composer.phar	/^private $hash;$/;"	v
haystack	composer.phar	/^$haystack = '.' . trim($host, '.') . '.';$/;"	v
header	composer.phar	/^$header = explode("\\r\\n", $header);$/;"	v
header	composer.phar	/^$header = trim($header);$/;"	v
headers	composer.phar	/^$headers = $this->remoteFilesystem->getLastHeaders();$/;"	v
headers	composer.phar	/^$headers = array($/;"	v
headers	composer.phar	/^$headers = array($headers);$/;"	v
headers	composer.phar	/^$headers = array_map(function ($value) { return sprintf('<info>%s<\/>', $value); }, $headers);$/;"	v
headers	composer.phar	/^$headers = array_values($headers);$/;"	v
headers	composer.phar	/^$this->headers = $headers;$/;"	v
headers	composer.phar	/^$this->headers = $this->buildTableRows($this->headers);$/;"	v
headers	composer.phar	/^private $headers = array();$/;"	v
headers	composer.phar	/^protected $headers;$/;"	v
help	composer.phar	/^$this->help = $help;$/;"	v
help	composer.phar	/^private $help;$/;"	v
helpCommand	composer.phar	/^$helpCommand = $this->get('help');$/;"	v
helper	composer.phar	/^$helper = $this->helperSet->get('question');$/;"	v
helper	composer.phar	/^$helper = new DescriptorHelper();$/;"	v
helperSet	composer.phar	/^$this->helperSet = $helperSet;$/;"	v
helperSet	composer.phar	/^$this->helperSet = $this->getDefaultHelperSet();$/;"	v
helperSet	composer.phar	/^$this->helperSet = null;$/;"	v
helperSet	composer.phar	/^private $helperSet;$/;"	v
helperSet	composer.phar	/^protected $helperSet = null;$/;"	v
helperSet	composer.phar	/^protected $helperSet;$/;"	v
helpers	composer.phar	/^private $helpers = array();$/;"	v
hhvm	composer.phar	/^$hhvm = new CompletePackage('hhvm', $version, $prettyVersion);$/;"	v
hidden	composer.phar	/^$this->hidden = (bool) $hidden;$/;"	v
hidden	composer.phar	/^private $hidden = false;$/;"	v
hiddenFallback	composer.phar	/^$this->hiddenFallback = (bool) $fallback;$/;"	v
hiddenFallback	composer.phar	/^private $hiddenFallback = true;$/;"	v
hiddenPrompt	composer.phar	/^public static function hiddenPrompt($allowFallback = false)$/;"	f
high	composer.phar	/^ $high = $i | (~$mask & 0xFFFFFFFF);$/;"	v
highMatch	composer.phar	/^$highMatch = array('', $matches[10], $matches[11], $matches[12], $matches[13]);$/;"	v
highPosition	composer.phar	/^ $highPosition = max(1, $position - 1);$/;"	v
highVersion	composer.phar	/^ $highVersion = $this->manipulateVersionString($matches, $position, 1) . '-dev';$/;"	v
highVersion	composer.phar	/^$highVersion = $this->manipulateVersionString($highMatch, $empty($matches[11]) ? 1 : 2, 1) . '-dev';$/;"	v
highVersion	composer.phar	/^$highVersion = $this->manipulateVersionString($matches, $highPosition, 1) . '-dev';$/;"	v
highVersion	composer.phar	/^$highVersion = $this->manipulateVersionString($matches, $position, 1) . '-dev';$/;"	v
highVersion	composer.phar	/^$highVersion = $this->normalize($matches['to']);$/;"	v
history	composer.phar	/^$this->history = getenv('HOME').'\/.history_'.$application->getName();$/;"	v
history	composer.phar	/^private $history;$/;"	v
home	composer.phar	/^ $home = self::getHomeDir();$/;"	v
home	composer.phar	/^$home = getenv('COMPOSER_HOME');$/;"	v
home	composer.phar	/^$home = rtrim(getenv('HOME'), '\/') . '\/.composer';$/;"	v
home	composer.phar	/^$home = strtr(getenv('APPDATA'), '\\\\', '\/') . '\/Composer';$/;"	v
homepage	composer.phar	/^$this->homepage = $homepage;$/;"	v
homepage	composer.phar	/^protected $homepage;$/;"	v
horizontalBorderChar	composer.phar	/^$this->horizontalBorderChar = $horizontalBorderChar;$/;"	v
horizontalBorderChar	composer.phar	/^private $horizontalBorderChar = '-';$/;"	v
host	composer.phar	/^$host = parse_url($this->url, PHP_URL_HOST);$/;"	v
host	composer.phar	/^$host = parse_url($url, PHP_URL_HOST);$/;"	v
hostname	composer.phar	/^$hostname = parse_url($filename, PHP_URL_HOST) ?: $filename;$/;"	v
hostname	composer.phar	/^$hostname = parse_url($processedUrl, PHP_URL_HOST);$/;"	v
hostname	composer.phar	/^$hostname = parse_url($url, PHP_URL_HOST) ?: $url;$/;"	v
humaneTime	composer.phar	/^private function humaneTime($secs)$/;"	f
i	composer.phar	/^ $i = ($a << 24) + ($b << 16) + ($c << 8) + $d;$/;"	v
i	composer.phar	/^$i = 0;$/;"	v
i	composer.phar	/^$i = is_null($i) ? "" : $i;$/;"	v
i	composer.phar	/^$i = strlen($ret);$/;"	v
id	composer.phar	/^$id = $fields[1];$/;"	v
id	composer.phar	/^$this->id = $id;$/;"	v
id	composer.phar	/^$this->id = -1;$/;"	v
id	composer.phar	/^protected $id = 1;$/;"	v
id	composer.phar	/^public $id;$/;"	v
identifier	composer.phar	/^$identifier = '\/' . trim($identifier, '\/') . '\/';$/;"	v
idleTimeout	composer.phar	/^$this->idleTimeout = $this->validateTimeout($timeout);$/;"	v
idleTimeout	composer.phar	/^private $idleTimeout;$/;"	v
ignore	composer.phar	/^$this->ignore = static::IGNORE_VCS_FILES | static::IGNORE_DOT_FILES;$/;"	v
ignore	composer.phar	/^private $ignore = 0;$/;"	v
ignoreDotFiles	composer.phar	/^public function ignoreDotFiles($ignoreDotFiles)$/;"	f
ignoreFile	composer.phar	/^$ignoreFile = realpath('.') . '\/.gitignore';$/;"	v
ignoreFile	composer.phar	/^$ignoreFile = realpath('.gitignore');$/;"	v
ignorePlatformReqs	composer.phar	/^$this->ignorePlatformReqs = (boolean) $ignorePlatformReqs;$/;"	v
ignorePlatformReqs	composer.phar	/^protected $ignorePlatformReqs = false;$/;"	v
ignoreUnreadableDirs	composer.phar	/^$this->ignoreUnreadableDirs = $ignoreUnreadableDirs;$/;"	v
ignoreUnreadableDirs	composer.phar	/^$this->ignoreUnreadableDirs = (bool) $ignore;$/;"	v
ignoreUnreadableDirs	composer.phar	/^private $ignoreUnreadableDirs = false;$/;"	v
ignoreUnreadableDirs	composer.phar	/^private $ignoreUnreadableDirs;$/;"	v
ignoreUnreadableDirs	composer.phar	/^protected $ignoreUnreadableDirs = false;$/;"	v
ignoreUnreadableDirs	composer.phar	/^public function ignoreUnreadableDirs($ignore = true)$/;"	f
ignoreUnreadableDirs	composer.phar	/^public function ignoreUnreadableDirs($ignore = true);$/;"	f
ignoreVCS	composer.phar	/^public function ignoreVCS($ignoreVCS)$/;"	f
ignoreValidationErrors	composer.phar	/^$this->ignoreValidationErrors = true;$/;"	v
ignoreValidationErrors	composer.phar	/^private $ignoreValidationErrors = false;$/;"	v
ignoreValidationErrors	composer.phar	/^public function ignoreValidationErrors()$/;"	f
illegalChars	composer.phar	/^$illegalChars = preg_replace('{[A-Za-z0-9_.\/-]+}', '', $job['packageName']);$/;"	v
im	composer.phar	/^ $im = $this->createInstallationManager();$/;"	v
im	composer.phar	/^$im = $composer->getInstallationManager();$/;"	v
im	composer.phar	/^$im = $this->createInstallationManager();$/;"	v
impossible	composer.phar	/^$impossible = ($/;"	v
in	composer.phar	/^public function in($dirs)$/;"	f
inCIDRBlock	composer.phar	/^private static function inCIDRBlock($cidr, $ip)$/;"	f
inCurlies	composer.phar	/^$inCurlies = 0;$/;"	v
includeFile	composer.phar	/^function includeFile($file)$/;"	f
includeFilesFilePath	composer.phar	/^$includeFilesFilePath = $targetDir.'\/autoload_files.php';$/;"	v
includeIfExists	composer.phar	/^function includeIfExists($file)$/;"	f
includePath	composer.phar	/^$includePath = trim($includePath, '\/');$/;"	v
includePathFilePath	composer.phar	/^$includePathFilePath = $targetDir.'\/include_paths.php';$/;"	v
includePaths	composer.phar	/^        $includePaths = require __DIR__ . '\/include_paths.php';$/;"	v
includePaths	composer.phar	/^$includePaths = array();$/;"	v
includePaths	composer.phar	/^$this->includePaths = $includePaths;$/;"	v
includePaths	composer.phar	/^protected $includePaths = array();$/;"	v
includePathsCode	composer.phar	/^$includePathsCode = '';$/;"	v
includedData	composer.phar	/^$includedData = $this->fetchFile($include);$/;"	v
includedData	composer.phar	/^$includedData = $this->fetchFile($include, null, $metadata['sha256']);$/;"	v
includedData	composer.phar	/^$includedData = $this->fetchFile($url, $cacheKey, $metadata['sha256']);$/;"	v
includedData	composer.phar	/^$includedData = json_decode($this->cache->read($cacheKey), true);$/;"	v
includedData	composer.phar	/^$includedData = json_decode($this->cache->read($include), true);$/;"	v
includes	composer.phar	/^ $includes = $data['providers-includes'];$/;"	v
includes	composer.phar	/^$includes = $data['provider-includes'];$/;"	v
incrementPath	composer.phar	/^protected function incrementPath($path, $i)$/;"	f
incrementalErrorOutputOffset	composer.phar	/^$this->incrementalErrorOutputOffset = 0;$/;"	v
incrementalErrorOutputOffset	composer.phar	/^$this->incrementalErrorOutputOffset = strlen($data);$/;"	v
incrementalErrorOutputOffset	composer.phar	/^private $incrementalErrorOutputOffset = 0;$/;"	v
incrementalOutputOffset	composer.phar	/^$this->incrementalOutputOffset = 0;$/;"	v
incrementalOutputOffset	composer.phar	/^$this->incrementalOutputOffset = strlen($data);$/;"	v
incrementalOutputOffset	composer.phar	/^private $incrementalOutputOffset = 0;$/;"	v
indent	composer.phar	/^$indent = $tree ? '  ' : '';$/;"	v
indent	composer.phar	/^$this->indent = $match[1];$/;"	v
indent	composer.phar	/^$this->indent = '    ';$/;"	v
indent	composer.phar	/^private $indent;$/;"	v
indentStr	composer.phar	/^$indentStr = '    ';$/;"	v
indentedChanges	composer.phar	/^$indentedChanges = implode("\\n", array_map(function ($line) {$/;"	v
index	composer.phar	/^ $index = 0;$/;"	v
index	composer.phar	/^$index = 2;$/;"	v
index	composer.phar	/^$index = 5;$/;"	v
index	composer.phar	/^$index = strpos($errorOutput, $this->getUser());$/;"	v
index	composer.phar	/^$index = strpos($errorOutput, 'p4');$/;"	v
index	composer.phar	/^$index = strpos($fields[1], ' ');$/;"	v
index	composer.phar	/^$index = strpos($fromReference, '@');$/;"	v
index	composer.phar	/^$index = strpos($identifier, '@');$/;"	v
index	composer.phar	/^$index = strpos($line, 'Depot');$/;"	v
index	composer.phar	/^$index = strpos($line, 'Label');$/;"	v
index	composer.phar	/^$index = strpos($reference, '@');$/;"	v
index	composer.phar	/^$index = strpos($result, '{');$/;"	v
index	composer.phar	/^$index = strpos($stream, '@');$/;"	v
index	composer.phar	/^$index = strrpos($stream, '\/');$/;"	v
index2	composer.phar	/^$index2 = strpos($result, 'no such file(s).');$/;"	v
index3	composer.phar	/^$index3 = strpos($result, 'change');$/;"	v
indexOfShortestMatch	composer.phar	/^$indexOfShortestMatch = $i;$/;"	v
indexOfShortestMatch	composer.phar	/^$indexOfShortestMatch = false;$/;"	v
info	composer.phar	/^$info = readline_info();$/;"	v
info	composer.phar	/^$info = stream_get_contents($pipes[1]);$/;"	v
infoCache	composer.phar	/^protected $infoCache = array();$/;"	v
infos	composer.phar	/^$infos = stream_get_meta_data($stream);$/;"	v
inheritEnv	composer.phar	/^$this->inheritEnv = $inheritEnv;$/;"	v
inheritEnv	composer.phar	/^private $inheritEnv = true;$/;"	v
inheritEnvironmentVariables	composer.phar	/^public function inheritEnvironmentVariables($inheritEnv = true)$/;"	f
iniMessage	composer.phar	/^$iniMessage = 'A php.ini file does not exist. You will have to create one.';$/;"	v
iniMessage	composer.phar	/^$iniMessage = 'The php.ini used by your command-line PHP is: ' . $iniPath;$/;"	v
iniMessage	composer.phar	/^$iniMessage = PHP_EOL.PHP_EOL.'A php.ini file does not exist. You will have to create one.';$/;"	v
iniMessage	composer.phar	/^$iniMessage = PHP_EOL.PHP_EOL.'The php.ini used by your command-line PHP is: ' . $iniPath;$/;"	v
iniPath	composer.phar	/^ $iniPath = php_ini_loaded_file();$/;"	v
iniPath	composer.phar	/^$iniPath = php_ini_loaded_file();$/;"	v
initErrors	composer.phar	/^$initErrors = $this->getErrors();$/;"	v
initFormats	composer.phar	/^private static function initFormats()$/;"	f
initPerforce	composer.phar	/^private function initPerforce($repoConfig)$/;"	f
initPerforce	composer.phar	/^public function initPerforce($package, $path, $url)$/;"	f
initPlaceholderFormatters	composer.phar	/^private static function initPlaceholderFormatters()$/;"	f
initStyles	composer.phar	/^private static function initStyles()$/;"	f
initial	composer.phar	/^$initial = $operation->getInitialPackage();$/;"	v
initialDownloadPath	composer.phar	/^$initialDownloadPath = $this->getInstallPath($initial);$/;"	v
initialPackage	composer.phar	/^$this->initialPackage = $initial;$/;"	v
initialPackage	composer.phar	/^protected $initialPackage;$/;"	v
initialType	composer.phar	/^$initialType = $initial->getDistType();$/;"	v
initialType	composer.phar	/^$initialType = $initial->getSourceType();$/;"	v
initialType	composer.phar	/^$initialType = $initial->getType();$/;"	v
initialize	composer.phar	/^private function initialize()$/;"	f
initialize	composer.phar	/^protected function initialize()$/;"	f
initialize	composer.phar	/^protected function initialize(InputInterface $input, OutputInterface $output)$/;"	f
initialize	composer.phar	/^public function initialize($repoConfig)$/;"	f
initialize	composer.phar	/^public function initialize()$/;"	f
initialize	composer.phar	/^public function initialize();$/;"	f
initializeBinDir	composer.phar	/^protected function initializeBinDir()$/;"	f
initializeDepotAndBranch	composer.phar	/^public function initializeDepotAndBranch($depot, $branch)$/;"	f
initializePath	composer.phar	/^public function initializePath($path)$/;"	f
initializeRepos	composer.phar	/^private function initializeRepos()$/;"	f
initializeVendorDir	composer.phar	/^protected function initializeVendorDir()$/;"	f
inlineSchemaProperty	composer.phar	/^protected $inlineSchemaProperty = '$schema';$/;"	v
innerIterator	composer.phar	/^$innerIterator = $iterator->getInnerIterator();$/;"	v
input	composer.phar	/^ $input = new StringInput(preg_replace('{\\bg(?:l(?:o(?:b(?:a(?:l)?)?)?)?)?\\b}', '', $input->__toString(), 1));$/;"	v
input	composer.phar	/^ $this->input = null;$/;"	v
input	composer.phar	/^$input = '',$/;"	v
input	composer.phar	/^$input = array_merge(array('command' => $this->command->getName()), $input);$/;"	v
input	composer.phar	/^$input = new ArgvInput();$/;"	v
input	composer.phar	/^$input = new ArrayInput(array('command' => $this->defaultCommand));$/;"	v
input	composer.phar	/^$input = new ArrayInput(array('command' => 'help'));$/;"	v
input	composer.phar	/^$input = new StringInput($input);$/;"	v
input	composer.phar	/^$input = strtolower(substr(trim($value), 0, 1));$/;"	v
input	composer.phar	/^$input = trim($input);$/;"	v
input	composer.phar	/^$this->input = $input;$/;"	v
input	composer.phar	/^$this->input = ProcessUtils::validateInput(sprintf('%s::%s', __CLASS__, __FUNCTION__), $input);$/;"	v
input	composer.phar	/^$this->input = new ArrayInput($input);$/;"	v
input	composer.phar	/^$this->input = substr($this->input, strlen($match[0]));$/;"	v
input	composer.phar	/^private $input;$/;"	v
input	composer.phar	/^protected $input;$/;"	v
inputArguments	composer.phar	/^$inputArguments = array();$/;"	v
inputBuffer	composer.phar	/^$this->inputBuffer = $input;$/;"	v
inputBuffer	composer.phar	/^$this->inputBuffer = (string) $input;$/;"	v
inputBuffer	composer.phar	/^$this->inputBuffer = (string) substr($this->inputBuffer, $written);$/;"	v
inputBuffer	composer.phar	/^protected $inputBuffer = '';$/;"	v
inputOptions	composer.phar	/^$inputOptions = array();$/;"	v
inputStream	composer.phar	/^$inputStream = $this->getHelperSet()->get('question')->getInputStream();$/;"	v
inputStream	composer.phar	/^$inputStream = $this->inputStream ?: STDIN;$/;"	v
inputStream	composer.phar	/^$this->inputStream = $stream;$/;"	v
inputStream	composer.phar	/^private $inputStream;$/;"	v
ins	composer.phar	/^public function ins($label)$/;"	f
insert	composer.phar	/^public function insert(RuleWatchNode $node)$/;"	f
inspectApplication	composer.phar	/^private function inspectApplication()$/;"	f
install	composer.phar	/^$install = Installer::create($io, $composer);$/;"	v
install	composer.phar	/^protected function install($package, $reason)$/;"	f
install	composer.phar	/^public function install($packageName, ConstraintInterface $constraint = null)$/;"	f
install	composer.phar	/^public function install(InstalledRepositoryInterface $repo, PackageInterface $package)$/;"	f
install	composer.phar	/^public function install(InstalledRepositoryInterface $repo, PackageInterface $package);$/;"	f
install	composer.phar	/^public function install(RepositoryInterface $repo, InstallOperation $operation)$/;"	f
installBinaries	composer.phar	/^protected function installBinaries(PackageInterface $package)$/;"	f
installCode	composer.phar	/^protected function installCode(PackageInterface $package)$/;"	f
installFromLock	composer.phar	/^ $installFromLock = !$this->update && $this->locker->isLocked();$/;"	v
installFullBinaries	composer.phar	/^protected function installFullBinaries($binPath, $link, $bin, PackageInterface $package)$/;"	f
installMap	composer.phar	/^$installMap = array();$/;"	v
installMeansUpdateMap	composer.phar	/^$installMeansUpdateMap = $this->findUpdates();$/;"	v
installMeansUpdateMap	composer.phar	/^$installMeansUpdateMap = array();$/;"	v
installPath	composer.phar	/^$installPath = $this->getInstallPath($package);$/;"	v
installPath	composer.phar	/^$installPath = $this->installPath;$/;"	v
installPath	composer.phar	/^$installPath = substr($installPath, 0, -strlen('\/'.$package->getTargetDir()));$/;"	v
installPath	composer.phar	/^$this->installPath = rtrim(strtr($installPath, '\\\\', '\/'), '\/').'\/';$/;"	v
installPath	composer.phar	/^private $installPath;$/;"	v
installProject	composer.phar	/^public function installProject(IOInterface $io, Config $config, $packageName, $directory = null, $packageVersion = null, $stability = 'stable', $preferSource = false, $preferDist = false, $installDevPackages = false, $repositoryUrl = null, $disablePlugins = false, $noScripts = false, $keepVcs = false, $noProgress = false, $noInstall = false, $ignorePlatformReqs = false, InputInterface $input)$/;"	f
installRootPackage	composer.phar	/^protected function installRootPackage(IOInterface $io, Config $config, $packageName, $directory = null, $packageVersion = null, $stability = 'stable', $preferSource = false, $preferDist = false, $installDevPackages = false, $repositoryUrl = null, $disablePlugins = false, $noScripts = false, $keepVcs = false, $noProgress = false)$/;"	f
installSymlinkBinaries	composer.phar	/^protected function installSymlinkBinaries($binPath, $link)$/;"	f
installUnixyProxyBinaries	composer.phar	/^protected function installUnixyProxyBinaries($binPath, $link)$/;"	f
installationManager	composer.phar	/^$installationManager = $composer->getInstallationManager();$/;"	v
installationManager	composer.phar	/^$this->installationManager = $composer->getInstallationManager();$/;"	v
installationManager	composer.phar	/^$this->installationManager = $installationManager;$/;"	v
installationManager	composer.phar	/^$this->installationManager = $manager;$/;"	v
installationManager	composer.phar	/^private $installationManager;$/;"	v
installationManager	composer.phar	/^protected $installationManager;$/;"	v
installationSource	composer.phar	/^$installationSource = $initial->getInstallationSource();$/;"	v
installationSource	composer.phar	/^$installationSource = $package->getInstallationSource();$/;"	v
installationSource	composer.phar	/^$this->installationSource = $type;$/;"	v
installationSource	composer.phar	/^protected $installationSource;$/;"	v
installed	composer.phar	/^$this->installed = $installed;$/;"	v
installed	composer.phar	/^protected $installed;$/;"	v
installedFromVcs	composer.phar	/^$installedFromVcs = $this->installRootPackage($io, $config, $packageName, $directory, $packageVersion, $stability, $preferSource, $preferDist, $installDevPackages, $repositoryUrl, $disablePlugins, $noScripts, $keepVcs, $noProgress);$/;"	v
installedFromVcs	composer.phar	/^$installedFromVcs = 'source' === $package->getInstallationSource();$/;"	v
installedFromVcs	composer.phar	/^$installedFromVcs = false;$/;"	v
installedMap	composer.phar	/^$this->installedMap = $installedMap;$/;"	v
installedMap	composer.phar	/^$this->installedMap = array();$/;"	v
installedMap	composer.phar	/^protected $installedMap;$/;"	v
installedPos	composer.phar	/^$installedPos = 0;$/;"	v
installedRepo	composer.phar	/^$installedRepo = $composer->getRepositoryManager()->getLocalRepository();$/;"	v
installedRepo	composer.phar	/^$installedRepo = $platformRepo;$/;"	v
installedRepo	composer.phar	/^$installedRepo = new CompositeRepository($repos);$/;"	v
installedRepo	composer.phar	/^$installedRepo = new CompositeRepository(array($localRepo, $platformRepo));$/;"	v
installedRepo	composer.phar	/^$this->installedRepo = $installedRepo;$/;"	v
installedRepo	composer.phar	/^private $installedRepo;$/;"	v
installedRootPackage	composer.phar	/^ $installedRootPackage = clone $this->package;$/;"	v
installedVersion	composer.phar	/^$installedVersion = $package->getPrettyVersion();$/;"	v
installer	composer.phar	/^$installer = $this->getInstaller($initialType);$/;"	v
installer	composer.phar	/^$installer = $this->getInstaller($package->getType());$/;"	v
installer	composer.phar	/^$installer = Installer::create($io, $composer);$/;"	v
installer	composer.phar	/^$installer = new $class($this->io, $this->composer);$/;"	v
installerOps	composer.phar	/^$installerOps = array();$/;"	v
installers	composer.phar	/^private $installers = array();$/;"	v
instructions	composer.phar	/^$instructions = 'To initialize a project, please create a composer.json file as described in the https:\/\/getcomposer.org\/ "Getting Started" section';$/;"	v
interact	composer.phar	/^protected function interact(InputInterface $input, OutputInterface $output)$/;"	f
interactive	composer.phar	/^$this->interactive = (bool) $interactive;$/;"	v
interactive	composer.phar	/^protected $interactive = true;$/;"	v
internalFormat	composer.phar	/^$this->internalFormat = $format;$/;"	v
internalFormat	composer.phar	/^private $internalFormat;$/;"	v
interpolate	composer.phar	/^private function interpolate($message, array $context)$/;"	f
interviewer	composer.phar	/^$interviewer = function () use ($output, $question, $default, $autocomplete, $that) {$/;"	v
interviewer	composer.phar	/^$interviewer = function () use ($output, $question, $fallback, $that) {$/;"	v
interviewer	composer.phar	/^$interviewer = function () use ($output, $question, $that) {$/;"	v
invalidEntries	composer.phar	/^$invalidEntries = preg_grep('\/^\\s*[-a-z]+\\s*:\\s*.+$\/i', $properties, PREG_GREP_INVERT);$/;"	v
io	composer.phar	/^$io = $this->getIO();$/;"	v
io	composer.phar	/^$io = $this->io;$/;"	v
io	composer.phar	/^$io = new IO\\NullIO();$/;"	v
io	composer.phar	/^$this->io = $application->getIO();$/;"	v
io	composer.phar	/^$this->io = $io;$/;"	v
io	composer.phar	/^$this->io = new ConsoleIO($input, $output, $this->getHelperSet());$/;"	v
io	composer.phar	/^$this->io = new NullIO();$/;"	v
io	composer.phar	/^private $io;$/;"	v
io	composer.phar	/^private static $io;$/;"	v
io	composer.phar	/^protected $io;$/;"	v
ip	composer.phar	/^$ip = gethostbyname($host);$/;"	v
isAbandoned	composer.phar	/^public function isAbandoned()$/;"	f
isAbandoned	composer.phar	/^public function isAbandoned();$/;"	f
isAbsolutePath	composer.phar	/^public function isAbsolutePath($file)$/;"	f
isAbsolutePath	composer.phar	/^public function isAbsolutePath($path)$/;"	f
isAlias	composer.phar	/^$isAlias = $candidate instanceof AliasPackage;$/;"	v
isArray	composer.phar	/^public function isArray()$/;"	f
isAssertion	composer.phar	/^public function isAssertion()$/;"	f
isAssoc	composer.phar	/^$isAssoc = $this->isAssoc($choices);$/;"	v
isAssoc	composer.phar	/^protected function isAssoc($array)$/;"	f
isAuthenticationFailure	composer.phar	/^private function isAuthenticationFailure($url, &$match)$/;"	f
isCaseSensitive	composer.phar	/^public function isCaseSensitive()$/;"	f
isCaseSensitive	composer.phar	/^public function isCaseSensitive();$/;"	f
isClassMapAuthoritative	composer.phar	/^    public function isClassMapAuthoritative()$/;"	f
isClassMapAuthoritative	composer.phar	/^public function isClassMapAuthoritative()$/;"	f
isDebug	composer.phar	/^public function isDebug()$/;"	f
isDebug	composer.phar	/^public function isDebug();$/;"	f
isDecorated	composer.phar	/^$isDecorated = $formatter->isDecorated();$/;"	v
isDecorated	composer.phar	/^public function isDecorated()$/;"	f
isDecorated	composer.phar	/^public function isDecorated();$/;"	f
isDev	composer.phar	/^$isDev = $candidate->getStability() === 'dev';$/;"	v
isDev	composer.phar	/^public function isDev()$/;"	f
isDev	composer.phar	/^public function isDev();$/;"	f
isDevMode	composer.phar	/^public function isDevMode()$/;"	f
isDirEmpty	composer.phar	/^public function isDirEmpty($dir)$/;"	f
isDisabled	composer.phar	/^public function isDisabled()$/;"	f
isDryRun	composer.phar	/^public function isDryRun()$/;"	f
isEmpty	composer.phar	/^public function isEmpty()$/;"	f
isEnabled	composer.phar	/^public function isEnabled()$/;"	f
isEqualOp	composer.phar	/^$isEqualOp = self::OP_EQ === $this->operator;$/;"	v
isExpandable	composer.phar	/^public function isExpandable()$/;"	f
isFeatureBranch	composer.phar	/^$isFeatureBranch = 0 === strpos($version, 'dev-');$/;"	v
isFeatureBranch	composer.phar	/^$isFeatureBranch = false;$/;"	v
isFeatureBranch	composer.phar	/^$isFeatureBranch = true;$/;"	v
isFresh	composer.phar	/^public function isFresh()$/;"	f
isGeneralTimeout	composer.phar	/^public function isGeneralTimeout()$/;"	f
isGlob	composer.phar	/^public function isGlob()$/;"	f
isHash	composer.phar	/^private function isHash(array $array)$/;"	f
isHidden	composer.phar	/^public function isHidden()$/;"	f
isHiddenFallback	composer.phar	/^public function isHiddenFallback()$/;"	f
isIdleTimeout	composer.phar	/^public function isIdleTimeout()$/;"	f
isInstalled	composer.phar	/^ $isInstalled = (isset($this->installedMap[$package->id]));$/;"	v
isInstalled	composer.phar	/^public function isInstalled(InstalledRepositoryInterface $repo, PackageInterface $package)$/;"	f
isInstalled	composer.phar	/^public function isInstalled(InstalledRepositoryInterface $repo, PackageInterface $package);$/;"	f
isInteractive	composer.phar	/^public function isInteractive()$/;"	f
isInteractive	composer.phar	/^public function isInteractive();$/;"	f
isLocalPath	composer.phar	/^public static function isLocalPath($path)$/;"	f
isLocked	composer.phar	/^$isLocked = $this->isLocked();$/;"	v
isLocked	composer.phar	/^$isLocked = false;$/;"	v
isLocked	composer.phar	/^public function isLocked()$/;"	f
isLoggedIn	composer.phar	/^public function isLoggedIn()$/;"	f
isNonEqualOp	composer.phar	/^$isNonEqualOp = self::OP_NE === $this->operator;$/;"	v
isOsiApprovedByIdentifier	composer.phar	/^public function isOsiApprovedByIdentifier($identifier)$/;"	f
isOutputDisabled	composer.phar	/^public function isOutputDisabled()$/;"	f
isPackageAcceptable	composer.phar	/^public function isPackageAcceptable($name, $stability)$/;"	f
isPackageInstalled	composer.phar	/^public function isPackageInstalled(InstalledRepositoryInterface $repo, PackageInterface $package)$/;"	f
isPhpScript	composer.phar	/^protected function isPhpScript($callable)$/;"	f
isPlatform	composer.phar	/^public function isPlatform()$/;"	f
isPrivate	composer.phar	/^$this->isPrivate = !empty($repoData['private']);$/;"	v
isPrivate	composer.phar	/^$this->isPrivate = true;$/;"	v
isPrivate	composer.phar	/^protected $isPrivate = false;$/;"	v
isPropagationStopped	composer.phar	/^public function isPropagationStopped()$/;"	f
isProviderEqualOp	composer.phar	/^$isProviderEqualOp = self::OP_EQ === $provider->operator;$/;"	v
isProviderNonEqualOp	composer.phar	/^$isProviderNonEqualOp = self::OP_NE === $provider->operator;$/;"	v
isPty	composer.phar	/^public function isPty()$/;"	f
isPtySupported	composer.phar	/^public static function isPtySupported()$/;"	f
isQuiet	composer.phar	/^public function isQuiet()$/;"	f
isRecursive	composer.phar	/^$this->isRecursive = $iterator instanceof \\RecursiveIterator;$/;"	v
isRecursive	composer.phar	/^private $isRecursive;$/;"	v
isRegex	composer.phar	/^protected function isRegex($str)$/;"	f
isRegex	composer.phar	/^public function isRegex()$/;"	f
isRequired	composer.phar	/^public function isRequired()$/;"	f
isRewindable	composer.phar	/^public function isRewindable()$/;"	f
isRootPackageAlias	composer.phar	/^public function isRootPackageAlias()$/;"	f
isRunning	composer.phar	/^public function isRunning()$/;"	f
isRunningOS400	composer.phar	/^private function isRunningOS400()$/;"	f
isSigchildEnabled	composer.phar	/^protected function isSigchildEnabled()$/;"	f
isStarted	composer.phar	/^public function isStarted()$/;"	f
isStream	composer.phar	/^public function isStream()$/;"	f
isStrict	composer.phar	/^$isStrict = $input->getOption('strict');$/;"	v
isSuccessful	composer.phar	/^public function isSuccessful()$/;"	f
isSupported	composer.phar	/^public function isSupported()$/;"	f
isSupported	composer.phar	/^public function isSupported();$/;"	f
isSurroundedBy	composer.phar	/^private static function isSurroundedBy($arg, $char)$/;"	f
isSymlinkedDirectory	composer.phar	/^public function isSymlinkedDirectory($directory)$/;"	f
isTerminated	composer.phar	/^public function isTerminated()$/;"	f
isTty	composer.phar	/^public function isTty()$/;"	f
isUpdateable	composer.phar	/^private function isUpdateable(PackageInterface $package)$/;"	f
isValid	composer.phar	/^$isValid = $isValid && (count($this->getErrors()) == count($initErrors));$/;"	v
isValid	composer.phar	/^$isValid = $this->validateType($value, $type);$/;"	v
isValid	composer.phar	/^$isValid = false;$/;"	v
isValid	composer.phar	/^$isValid = true;$/;"	v
isValid	composer.phar	/^public function isValid($uri)$/;"	f
isValid	composer.phar	/^public function isValid()$/;"	f
isValid	composer.phar	/^public function isValid();$/;"	f
isValidEmail	composer.phar	/^protected function isValidEmail($email)$/;"	f
isValidLicenseString	composer.phar	/^private function isValidLicenseString($license)$/;"	f
isValueOptional	composer.phar	/^public function isValueOptional()$/;"	f
isValueRequired	composer.phar	/^public function isValueRequired()$/;"	f
isVerbose	composer.phar	/^public function isVerbose()$/;"	f
isVerbose	composer.phar	/^public function isVerbose();$/;"	f
isVeryVerbose	composer.phar	/^public function isVeryVerbose()$/;"	f
isVeryVerbose	composer.phar	/^public function isVeryVerbose();$/;"	f
isWindows	composer.phar	/^$isWindows = defined('PHP_WINDOWS_VERSION_BUILD');$/;"	v
it	composer.phar	/^$it = new RecursiveDirectoryIterator($directory, RecursiveDirectoryIterator::SKIP_DOTS);$/;"	v
it	composer.phar	/^$it = new RecursiveDirectoryIterator($source, RecursiveDirectoryIterator::SKIP_DOTS);$/;"	v
it	composer.phar	/^$it = new \\ArrayIterator();$/;"	v
iterator	composer.phar	/^$iterator = $iterator->getInnerIterator();$/;"	v
iterator	composer.phar	/^$iterator = $iteratorAggregate->getIterator();$/;"	v
iterator	composer.phar	/^$iterator = $this->getFinder()->sortByAccessedTime()->getIterator();$/;"	v
iterator	composer.phar	/^$iterator = $this->rules->getIteratorFor(RuleSet::TYPE_JOB);$/;"	v
iterator	composer.phar	/^$iterator = $this;$/;"	v
iterator	composer.phar	/^$iterator = new Iterator\\CustomFilterIterator($iterator, $this->filters);$/;"	v
iterator	composer.phar	/^$iterator = new Iterator\\DateRangeFilterIterator($iterator, $this->dates);$/;"	v
iterator	composer.phar	/^$iterator = new Iterator\\DepthRangeFilterIterator($iterator, $this->minDepth, $this->maxDepth);$/;"	v
iterator	composer.phar	/^$iterator = new Iterator\\ExcludeDirectoryFilterIterator($iterator, $this->exclude);$/;"	v
iterator	composer.phar	/^$iterator = new Iterator\\FilePathsIterator($paths, $dir);$/;"	v
iterator	composer.phar	/^$iterator = new Iterator\\FileTypeFilterIterator($iterator, $this->mode);$/;"	v
iterator	composer.phar	/^$iterator = new Iterator\\FilecontentFilterIterator($iterator, $this->contains, $this->notContains);$/;"	v
iterator	composer.phar	/^$iterator = new Iterator\\FilenameFilterIterator($iterator, $this->names, $this->notNames);$/;"	v
iterator	composer.phar	/^$iterator = new Iterator\\PathFilterIterator($iterator, $this->paths, $this->notPaths);$/;"	v
iterator	composer.phar	/^$iterator = new Iterator\\RecursiveDirectoryIterator($dir, $flags, $this->ignoreUnreadableDirs);$/;"	v
iterator	composer.phar	/^$iterator = new Iterator\\SizeRangeFilterIterator($iterator, $this->sizes);$/;"	v
iterator	composer.phar	/^$iterator = new \\AppendIterator();$/;"	v
iterator	composer.phar	/^$iterator = new \\RecursiveIteratorIterator($directory);$/;"	v
iterator	composer.phar	/^$iterator = new \\RecursiveIteratorIterator($iterator, \\RecursiveIteratorIterator::SELF_FIRST);$/;"	v
iterator	composer.phar	/^$iterator = new \\RecursiveIteratorIterator(new \\RecursiveDirectoryIterator($originDir, $flags), \\RecursiveIteratorIterator::SELF_FIRST);$/;"	v
iterator	composer.phar	/^$this->iterator = $iterator;$/;"	v
iterator	composer.phar	/^private $iterator;$/;"	v
iteratorAggregate	composer.phar	/^$iteratorAggregate = new Iterator\\SortableIterator($iterator, $this->sort);$/;"	v
iterators	composer.phar	/^private $iterators = array();$/;"	v
job	composer.phar	/^$job = $reason['job'];$/;"	v
job	composer.phar	/^$job = $why->getJob();$/;"	v
job	composer.phar	/^$this->job = $job;$/;"	v
jobToText	composer.phar	/^protected function jobToText($job)$/;"	f
jobs	composer.phar	/^$this->jobs = $jobs;$/;"	v
jobs	composer.phar	/^$this->jobs = $request->getJobs();$/;"	v
jobs	composer.phar	/^$this->jobs = array();$/;"	v
jobs	composer.phar	/^protected $jobs;$/;"	v
join	composer.phar	/^public function join()$/;"	f
json	composer.phar	/^$json = $file->encode($options);$/;"	v
json	composer.phar	/^$json = $preFileDownloadEvent->getRemoteFilesystem()->getContents($hostname, $filename, false);$/;"	v
json	composer.phar	/^$json = $this->rfs->getContents($domain, $url, false, array('retry-auth-failure' => false));$/;"	v
json	composer.phar	/^$json = $this->rfs->getContents($hostname, $url, false);$/;"	v
json	composer.phar	/^$json = $this->rfs->getContents($this->path, $this->path, false);$/;"	v
json	composer.phar	/^$json = file_get_contents($composerFile);$/;"	v
json	composer.phar	/^$json = file_get_contents($composerFilePath);$/;"	v
json	composer.phar	/^$json = file_get_contents($this->path);$/;"	v
json	composer.phar	/^$json = file_get_contents(self::getResourcesDir() . '\/' . self::EXCEPTIONS_FILE);$/;"	v
json	composer.phar	/^$json = file_get_contents(self::getResourcesDir() . '\/' . self::LICENSES_FILE);$/;"	v
json	composer.phar	/^$json = json_decode($this->rfs->getContents('packagist.org', $protocol . ':\/\/packagist.org\/packages.json', false), true);$/;"	v
json	composer.phar	/^$json = json_encode($data);$/;"	v
json	composer.phar	/^$json = json_encode($data, $options);$/;"	v
json	composer.phar	/^$json = new JsonConfigSource($jsonFile);$/;"	v
json	composer.phar	/^$json = new JsonFile($file);$/;"	v
json	composer.phar	/^$json = new JsonFile($file, new RemoteFilesystem($this->io));$/;"	v
json	composer.phar	/^$json = new JsonFile($repositoryUrl, new RemoteFilesystem($io, $config));$/;"	v
json	composer.phar	/^$json = preg_replace('\/\\[\\s+\\]\/', '[]', $json);$/;"	v
json	composer.phar	/^$json = preg_replace('\/\\{\\s+\\}\/', '{}', $json);$/;"	v
jsonData	composer.phar	/^$jsonData = $jsonFile->read();$/;"	v
jsonFile	composer.phar	/^$jsonFile = new JsonFile($composerJsonPath);$/;"	v
jsonFile	composer.phar	/^$jsonFile = new JsonFile($file);$/;"	v
jsonSchema	composer.phar	/^ $jsonSchema = $this->resolvePointer($jsonSchema, $resolvedUri);$/;"	v
jsonSchema	composer.phar	/^$jsonSchema = $jsonSchema->$pathElement;$/;"	v
jsonSchema	composer.phar	/^$jsonSchema = $retriever->retrieve($ref, $sourceUri);$/;"	v
jsonSchema	composer.phar	/^$jsonSchema = $retriever->retrieve($schemaId, $schemaUri);$/;"	v
jsonSchema	composer.phar	/^$jsonSchema = $this->loadSchema($fetchUri);$/;"	v
jsonSchema	composer.phar	/^$jsonSchema = $this->uriRetriever->retrieve($uri);$/;"	v
jsonSchema	composer.phar	/^$jsonSchema = json_decode($contents);$/;"	v
jsonSchema	composer.phar	/^$jsonSchema = null;$/;"	v
jsonUrl	composer.phar	/^$jsonUrl = $this->url . '\/packages.json';$/;"	v
jsonUrl	composer.phar	/^$jsonUrl = $this->url;$/;"	v
jsonUrlParts	composer.phar	/^$jsonUrlParts = parse_url($this->url);$/;"	v
k	composer.phar	/^$k = $origK;$/;"	v
key	composer.phar	/^$key = $duplicateKey;$/;"	v
key	composer.phar	/^$key = $short ? 'short' : 'long';$/;"	v
key	composer.phar	/^$key = $this->application->extractNamespace($name, 1);$/;"	v
key	composer.phar	/^$key = $tokens[$len][0] === '' ? '_empty_' : $tokens[$len][0];$/;"	v
key	composer.phar	/^$key = $tokens[$len][0];$/;"	v
key	composer.phar	/^$key = ((int) $mustMatchName).$constraint;$/;"	v
key	composer.phar	/^$key = array_search($installedVersion, $versions);$/;"	v
key	composer.phar	/^$key = isset($key) ? $key.'.'.$bit : $bit;$/;"	v
key	composer.phar	/^public function key()$/;"	f
keys	composer.phar	/^$keys = array($/;"	v
keywords	composer.phar	/^$this->keywords = $keywords;$/;"	v
keywords	composer.phar	/^protected $keywords;$/;"	v
l	composer.phar	/^$l = $this->decisions->decisionLevel($literal);$/;"	v
l	composer.phar	/^$l = 0;$/;"	v
l	composer.phar	/^$l = strlen($match[1]);$/;"	v
l1num	composer.phar	/^$l1num = 0;$/;"	v
l1retry	composer.phar	/^$l1retry = false;$/;"	v
l1retry	composer.phar	/^$l1retry = true;$/;"	v
label	composer.phar	/^$label = $this->getLabelFromSourceReference($ref);$/;"	v
label	composer.phar	/^$label = array_search($identifier, $this->getTags()) ?: array_search($identifier, $this->getBranches()) ?: $identifier;$/;"	v
label	composer.phar	/^$label = substr($reference, $index);$/;"	v
labels	composer.phar	/^private $labels = array();$/;"	v
lastBranchIndex	composer.phar	/^$lastBranchIndex = $i;$/;"	v
lastBranchIndex	composer.phar	/^$lastBranchIndex = 0;$/;"	v
lastBranchOffset	composer.phar	/^$lastBranchOffset = $offset;$/;"	v
lastBranchOffset	composer.phar	/^$lastBranchOffset = 0;$/;"	v
lastCommit	composer.phar	/^$lastCommit = $resArray[0];$/;"	v
lastCommitArr	composer.phar	/^$lastCommitArr = explode(' ', $lastCommit);$/;"	v
lastCommitNum	composer.phar	/^$lastCommitNum = $lastCommitArr[1];$/;"	v
lastError	composer.phar	/^$lastError = error_get_last();$/;"	v
lastHeaders	composer.phar	/^$this->lastHeaders = $http_response_header;$/;"	v
lastHeaders	composer.phar	/^$this->lastHeaders = array();$/;"	v
lastHeaders	composer.phar	/^private $lastHeaders;$/;"	v
lastLevel	composer.phar	/^$lastLevel = $l;$/;"	v
lastLevel	composer.phar	/^$lastLevel = null;$/;"	v
lastLiteral	composer.phar	/^$lastLiteral = $literal;$/;"	v
lastLiteral	composer.phar	/^$lastLiteral = null;$/;"	v
lastLiteral	composer.phar	/^public function lastLiteral()$/;"	f
lastMessage	composer.phar	/^$this->lastMessage = $messages;$/;"	v
lastMessage	composer.phar	/^$this->lastMessage = join($newline ? "\\n" : '', (array) $messages);$/;"	v
lastMessage	composer.phar	/^protected $lastMessage;$/;"	v
lastMessageErr	composer.phar	/^$this->lastMessageErr = $messages;$/;"	v
lastMessageErr	composer.phar	/^$this->lastMessageErr = join($newline ? "\\n" : '', (array) $messages);$/;"	v
lastMessageErr	composer.phar	/^protected $lastMessageErr;$/;"	v
lastMessagesLength	composer.phar	/^$this->lastMessagesLength = $len;$/;"	v
lastMessagesLength	composer.phar	/^$this->lastMessagesLength = $this->strlen($message);$/;"	v
lastMessagesLength	composer.phar	/^$this->lastMessagesLength = 0;$/;"	v
lastMessagesLength	composer.phar	/^private $lastMessagesLength = 0;$/;"	v
lastMessagesLength	composer.phar	/^private $lastMessagesLength;$/;"	v
lastOutputTime	composer.phar	/^$this->lastOutputTime = microtime(true);$/;"	v
lastOutputTime	composer.phar	/^private $lastOutputTime;$/;"	v
lastProgress	composer.phar	/^$this->lastProgress = $progression;$/;"	v
lastProgress	composer.phar	/^$this->lastProgress = null;$/;"	v
lastProgress	composer.phar	/^private $lastProgress;$/;"	v
lastReason	composer.phar	/^public function lastReason()$/;"	f
laterOptions	composer.phar	/^$laterOptions = array();$/;"	v
latest	composer.phar	/^$latest = substr($data, $this->incrementalErrorOutputOffset);$/;"	v
latest	composer.phar	/^$latest = substr($data, $this->incrementalOutputOffset);$/;"	v
latest	composer.phar	/^$latest = trim($this->rfs->getContents('getcomposer.org', $protocol . ':\/\/getcomposer.org\/version', false));$/;"	v
latestSignal	composer.phar	/^$this->latestSignal = $signal;$/;"	v
latestSignal	composer.phar	/^$this->latestSignal = null;$/;"	v
latestSignal	composer.phar	/^private $latestSignal;$/;"	v
latestVersion	composer.phar	/^$latestVersion = trim($remoteFilesystem->getContents(self::HOMEPAGE, $baseUrl. '\/version', false));$/;"	v
laxValid	composer.phar	/^ $laxValid = false;$/;"	v
laxValid	composer.phar	/^$laxValid = true;$/;"	v
lazyProvidersUrl	composer.phar	/^$this->lazyProvidersUrl = $this->canonicalizeUrl($data['providers-lazy-url']);$/;"	v
lazyProvidersUrl	composer.phar	/^protected $lazyProvidersUrl;$/;"	v
learnedLiterals	composer.phar	/^$learnedLiterals = array(null);$/;"	v
learnedPool	composer.phar	/^protected $learnedPool = array();$/;"	v
learnedWhy	composer.phar	/^$learnedWhy = $this->learnedWhy[$why];$/;"	v
learnedWhy	composer.phar	/^protected $learnedWhy = array();$/;"	v
len	composer.phar	/^ $len = $this->productions_[$action[1]][1];$/;"	v
len	composer.phar	/^ $len = count($tokens) - 1;$/;"	v
len	composer.phar	/^$len = $this->stringWidth($title);$/;"	v
len	composer.phar	/^$len = 0;$/;"	v
len	composer.phar	/^$len = Helper::strlenWithoutDecoration($this->output->getFormatter(), $line);$/;"	v
len	composer.phar	/^$len = max($lineLength, $len);$/;"	v
len	composer.phar	/^$len = max($this->strlen($message) + ($large ? 4 : 2), $len);$/;"	v
len	composer.phar	/^$len = null;$/;"	v
len	composer.phar	/^$len = strlen($name);$/;"	v
length	composer.phar	/^            $length = strlen($prefix);$/;"	v
length	composer.phar	/^ $length = strlen($prefix);$/;"	v
length	composer.phar	/^$length = $this->strlen($message);$/;"	v
length	composer.phar	/^$length = PHP_INT_MAX;$/;"	v
length	composer.phar	/^$length = strlen($input);$/;"	v
length	composer.phar	/^$length = strlen($output);$/;"	v
length	composer.phar	/^$length = strlen($prefix);$/;"	v
length	composer.phar	/^$length = strlen($stat['name']);$/;"	v
length	composer.phar	/^public function length()$/;"	f
lengthOfShortestMatch	composer.phar	/^$lengthOfShortestMatch = $length;$/;"	v
lengthOfShortestMatch	composer.phar	/^$lengthOfShortestMatch = -1;$/;"	v
lessThan	composer.phar	/^public static function lessThan($version1, $version2)$/;"	f
lessThanOrEqualTo	composer.phar	/^public static function lessThanOrEqualTo($version1, $version2)$/;"	f
lev	composer.phar	/^$lev = levenshtein($name, $item);$/;"	v
lev	composer.phar	/^$lev = levenshtein($subname, $parts[$i]);$/;"	v
level	composer.phar	/^$level = $decisions->decisionLevel($literal);$/;"	v
level	composer.phar	/^$level = $lastLevel;$/;"	v
level	composer.phar	/^$level = $newLevel;$/;"	v
level	composer.phar	/^$level = $this->selectAndInstall($level, $decisionQueue, $disableRules, $rule);$/;"	v
level	composer.phar	/^$level = $this->setPropagateLearn($level, $lastLiteral, $disableRules, $why);$/;"	v
level	composer.phar	/^$level = 1;$/;"	v
level	composer.phar	/^$level = error_reporting(0);$/;"	v
levels	composer.phar	/^$levels = count(explode('\/', $filesystem->normalizePath($mainPackage->getTargetDir())));$/;"	v
lex	composer.phar	/^private function lex()$/;"	f
lex	composer.phar	/^public function lex()$/;"	f
lexer	composer.phar	/^$this->lexer = new Lexer();$/;"	v
lexer	composer.phar	/^private $lexer;$/;"	v
lib	composer.phar	/^ $lib = substr($targetName, 4);$/;"	v
lib	composer.phar	/^$lib = new CompletePackage('lib-'.$name, $version, $prettyVersion);$/;"	v
license	composer.phar	/^$license = $count > 1 ? '(' . implode(' OR ', $license) . ')' : (string) reset($license);$/;"	v
license	composer.phar	/^$license = $input->getOption('license') ?: false;$/;"	v
license	composer.phar	/^$license = $io->ask($/;"	v
license	composer.phar	/^$license = $spdxLicenses->getLicenseByIdentifier($licenseId); $/;"	v
license	composer.phar	/^$license = $this->exceptions[$identifier];$/;"	v
license	composer.phar	/^$license = $this->licenses[$identifier];$/;"	v
license	composer.phar	/^$license = (string) $packageInfo->p->l;$/;"	v
license	composer.phar	/^$license = (string) $xml->l;$/;"	v
license	composer.phar	/^$this->license = $license;$/;"	v
license	composer.phar	/^private $license;$/;"	v
license	composer.phar	/^protected $license = array();$/;"	v
licenseValidator	composer.phar	/^$licenseValidator = new SpdxLicenses();$/;"	v
licenses	composer.phar	/^$licenses = $package->getLicense();$/;"	v
licenses	composer.phar	/^$licenses = $this->getLicensesExpression();$/;"	v
licenses	composer.phar	/^$licenses = array_map('preg_quote', array_keys($this->licenses));$/;"	v
licenses	composer.phar	/^$licenses = implode('|', $licenses);$/;"	v
licenses	composer.phar	/^$this->licenses = json_decode($json, true);$/;"	v
licenses	composer.phar	/^private $licenses;$/;"	v
licensesExpression	composer.phar	/^$this->licensesExpression = $licenses;$/;"	v
licensesExpression	composer.phar	/^private $licensesExpression;$/;"	v
line	composer.phar	/^$line = $char;$/;"	v
line	composer.phar	/^$line = '';$/;"	v
line	composer.phar	/^$line = (false === $line || '' === $line) ? false : rtrim($line);$/;"	v
line	composer.phar	/^$line = fgets($handle);$/;"	v
line	composer.phar	/^$line = fgets($pipe);$/;"	v
line	composer.phar	/^$line = fgets(STDIN, 1024);$/;"	v
line	composer.phar	/^$line = isset($trace[$i]['line']) ? $trace[$i]['line'] : 'n\/a';$/;"	v
line	composer.phar	/^$line = new TableCell($line, array('colspan' => $cell->getColspan()));$/;"	v
line	composer.phar	/^$line = readline($this->getPrompt());$/;"	v
line	composer.phar	/^$line = sprintf('%s%s', $prefix, $line);$/;"	v
line	composer.phar	/^$line = sprintf('<%s>%s<\/>', $style, $line);$/;"	v
line	composer.phar	/^$line = trim($line);$/;"	v
lineLength	composer.phar	/^ $lineLength = $this->stringWidth(preg_replace('\/\\[[^m]*m\/', '', $formatter->format($line))) + 4;$/;"	v
lineLength	composer.phar	/^ $this->lineLength = min($this->getTerminalWidth() - (int) (DIRECTORY_SEPARATOR === '\\\\'), self::MAX_LINE_LENGTH);$/;"	v
lineLength	composer.phar	/^private $lineLength;$/;"	v
lines	composer.phar	/^$lines = $lines[0];$/;"	v
lines	composer.phar	/^$lines = array($cell);$/;"	v
lines	composer.phar	/^$lines = array();$/;"	v
lines	composer.phar	/^$lines = array_merge($lines, explode(PHP_EOL, wordwrap($message, $this->lineLength - Helper::strlen($prefix), PHP_EOL, true)));$/;"	v
lines	composer.phar	/^$lines = explode("\\n", $cell);$/;"	v
lines	composer.phar	/^$lines = explode("\\n", $message);$/;"	v
lines	composer.phar	/^$lines = file($ignoreFile, FILE_IGNORE_NEW_LINES);$/;"	v
lines	composer.phar	/^$lines = null;$/;"	v
link	composer.phar	/^$link = $this->binDir.'\/'.basename($bin);$/;"	v
link	composer.phar	/^$link = new Link($composerPackageName, $dependencyPackageName, $constraint, $dependencyConstraint->getType(), $dependencyConstraint->getConstraint());$/;"	v
linkConstraint	composer.phar	/^$linkConstraint = $this->versionParser->parseConstraints($constraint);$/;"	v
linkInfo	composer.phar	/^$linkInfo = BasePackage::$supportedLinkTypes[$linkType];$/;"	v
linkTypes	composer.phar	/^$linkTypes = $this->linkTypes;$/;"	v
linkTypes	composer.phar	/^protected $linkTypes = array($/;"	v
links	composer.phar	/^ $links = '{' . $this->newline .$/;"	v
links	composer.phar	/^ $links = preg_replace($/;"	v
links	composer.phar	/^ $links = preg_replace('{"'.$packageRegex.'"(\\s*:\\s*)'.self::$JSON_STRING.'}i', addcslashes(JsonFile::encode($package).'${1}"'.$constraint.'"', '\\\\'), $links);$/;"	v
links	composer.phar	/^$links = $aliasOf->{'get' . ucfirst($type)}();$/;"	v
links	composer.phar	/^$links = $matches[3];$/;"	v
links	composer.phar	/^$links = $this->format($requirements);$/;"	v
links	composer.phar	/^$links = $this->package->getRequires();$/;"	v
links	composer.phar	/^$links = array();$/;"	v
links	composer.phar	/^$links = array_merge($links, $newLinks);$/;"	v
links	composer.phar	/^$links = array_merge($this->package->getRequires(), $this->package->getDevRequires());$/;"	v
links	composer.phar	/^$links = explode(',', substr($header, 5));$/;"	v
lint	composer.phar	/^public function lint($input)$/;"	f
list	composer.phar	/^$list = array('--help');$/;"	v
listConfiguration	composer.phar	/^protected function listConfiguration(array $contents, array $rawContents, OutputInterface $output, $k = null)$/;"	f
listScripts	composer.phar	/^protected function listScripts()$/;"	f
listeners	composer.phar	/^$listeners = $this->getListeners($event);$/;"	v
listeners	composer.phar	/^$listeners = $this->listeners;$/;"	v
listeners	composer.phar	/^protected $listeners;$/;"	v
listing	composer.phar	/^public function listing(array $elements)$/;"	f
listing	composer.phar	/^public function listing(array $elements);$/;"	f
literal	composer.phar	/^ $literal = -$decidedLiteral;$/;"	v
literal	composer.phar	/^$literal = $decision[Decisions::DECISION_LITERAL];$/;"	v
literal	composer.phar	/^$literal = $literals[0];$/;"	v
literal	composer.phar	/^$literal = $this->decisions->lastLiteral();$/;"	v
literalString	composer.phar	/^$literalString = $this->pool->literalToString($literal);$/;"	v
literalToPackage	composer.phar	/^public function literalToPackage($literal)$/;"	f
literalToPrettyString	composer.phar	/^public function literalToPrettyString($literal, $installedMap)$/;"	f
literals	composer.phar	/^ $literals = $this->policy->selectPreferredPackages($this->pool, $this->installedMap, $decisionQueue, $rule->getRequiredPackage());$/;"	v
literals	composer.phar	/^$literals = $conflictRule->literals;$/;"	v
literals	composer.phar	/^$literals = $rule->literals;$/;"	v
literals	composer.phar	/^$literals = $this->literals;$/;"	v
literals	composer.phar	/^$literals = $this->pruneRemoteAliases($pool, $literals);$/;"	v
literals	composer.phar	/^$literals = $this->pruneToBestVersion($pool, $literals);$/;"	v
literals	composer.phar	/^$literals = $this->pruneToHighestPriorityOrInstalled($pool, $installedMap, $literals);$/;"	v
literals	composer.phar	/^$literals = $this->rule->literals;$/;"	v
literals	composer.phar	/^$literals = $why->literals;$/;"	v
literals	composer.phar	/^$literals = array($package->id);$/;"	v
literals	composer.phar	/^$literals = array();$/;"	v
literals	composer.phar	/^$literals = array(-$package->id);$/;"	v
literals	composer.phar	/^$this->literals = $literals;$/;"	v
literals	composer.phar	/^public $literals;$/;"	v
load	composer.phar	/^public function load($json)$/;"	f
load	composer.phar	/^public function load(array $config, $class = 'Composer\\Package\\CompletePackage')$/;"	f
load	composer.phar	/^public function load(array $config, $class = 'Composer\\Package\\RootPackage')$/;"	f
load	composer.phar	/^public function load(array $package, $class = 'Composer\\Package\\CompletePackage');$/;"	f
loadClass	composer.phar	/^    public function loadClass($class)$/;"	f
loadClass	composer.phar	/^public function loadClass($class)$/;"	f
loadClassLoader	composer.phar	/^    public static function loadClassLoader(\\$class)$/;"	f
loadClassLoader	composer.phar	/^public static function loadClassLoader($class)$/;"	f
loadConfiguration	composer.phar	/^public function loadConfiguration(Config $config)$/;"	f
loadConfiguration	composer.phar	/^public function loadConfiguration(Config $config);$/;"	f
loadDataFromServer	composer.phar	/^protected function loadDataFromServer()$/;"	f
loadExceptions	composer.phar	/^private function loadExceptions()$/;"	f
loadIncludes	composer.phar	/^protected function loadIncludes($data)$/;"	f
loadInstalledPlugins	composer.phar	/^public function loadInstalledPlugins()$/;"	f
loadLicenses	composer.phar	/^private function loadLicenses()$/;"	f
loadOptions	composer.phar	/^$this->loadOptions = $loadOptions;$/;"	v
loadOptions	composer.phar	/^protected $loadOptions;$/;"	v
loadProviderListings	composer.phar	/^protected function loadProviderListings($data)$/;"	f
loadRepository	composer.phar	/^public function loadRepository(RepositoryInterface $repo)$/;"	f
loadRootServerFile	composer.phar	/^protected function loadRootServerFile()$/;"	f
loadSchema	composer.phar	/^protected function loadSchema($fetchUri)$/;"	f
loadedExtensions	composer.phar	/^$loadedExtensions = get_loaded_extensions();$/;"	v
loader	composer.phar	/^$loader = new ArrayLoader($this->getParser());$/;"	v
loader	composer.phar	/^$loader = new ArrayLoader(null, true);$/;"	v
loader	composer.phar	/^$loader = new ClassLoader();$/;"	v
loader	composer.phar	/^$loader = new Package\\Loader\\RootPackageLoader($rm, $config, $parser, $guesser);$/;"	v
loader	composer.phar	/^$loader = new ValidatingArrayLoader(new ArrayLoader(), true, null, $arrayLoaderValidationFlags);$/;"	v
loader	composer.phar	/^$loader = new ValidatingArrayLoader(new ArrayLoader, false);$/;"	v
loader	composer.phar	/^$this->loader = $generator->createLoader($map);$/;"	v
loader	composer.phar	/^$this->loader = $loader;$/;"	v
loader	composer.phar	/^$this->loader = new ArrayLoader($this->versionParser);$/;"	v
loader	composer.phar	/^$this->loader = new ArrayLoader();$/;"	v
loader	composer.phar	/^$this->loader = new ArrayLoader(null, true);$/;"	v
loader	composer.phar	/^private $loader;$/;"	v
loader	composer.phar	/^private static $loader;$/;"	v
loader	composer.phar	/^protected $loader;$/;"	v
localAuthFile	composer.phar	/^$localAuthFile = new JsonFile(dirname(realpath($composerFile)) . '\/auth.json');$/;"	v
localConfig	composer.phar	/^$localConfig = $file->read();$/;"	v
localConfig	composer.phar	/^$localConfig = static::getComposerFile();$/;"	v
localFilename	composer.phar	/^$localFilename = realpath($_SERVER['argv'][0]) ?: $_SERVER['argv'][0];$/;"	v
localRepo	composer.phar	/^ $localRepo = $this->repositoryManager->getLocalRepository();$/;"	v
localRepo	composer.phar	/^$localRepo = $composer->getRepositoryManager()->getLocalRepository();$/;"	v
localRepo	composer.phar	/^$localRepo = $this->composer->getRepositoryManager()->getLocalRepository();$/;"	v
localRepository	composer.phar	/^$this->localRepository = $repository;$/;"	v
localRepository	composer.phar	/^private $localRepository;$/;"	v
locateFile	composer.phar	/^private function locateFile(\\ZipArchive $zip, $filename)$/;"	f
lock	composer.phar	/^$lock = $this->getComposer()->getLocker()->getLockData();$/;"	v
lock	composer.phar	/^$lock = $this->lockFile->read();$/;"	v
lock	composer.phar	/^$lock = array($/;"	v
lock	composer.phar	/^public function lock($blocking = false)$/;"	f
lockData	composer.phar	/^$lockData = $this->getLockData();$/;"	v
lockDataCache	composer.phar	/^$this->lockDataCache = null;$/;"	v
lockDataCache	composer.phar	/^private $lockDataCache;$/;"	v
lockErrors	composer.phar	/^$lockErrors = array();$/;"	v
lockFile	composer.phar	/^$lockFile = "json" === pathinfo($composerFile, PATHINFO_EXTENSION)$/;"	v
lockFile	composer.phar	/^$this->lockFile = $lockFile;$/;"	v
lockFile	composer.phar	/^private $lockFile;$/;"	v
lockPackages	composer.phar	/^private function lockPackages(array $packages)$/;"	f
lockPath	composer.phar	/^$lockPath = $lockPath ?: sys_get_temp_dir();$/;"	v
locked	composer.phar	/^$locked = array();$/;"	v
lockedPackages	composer.phar	/^$lockedPackages = $lockData['packages'];$/;"	v
lockedPackages	composer.phar	/^$lockedPackages = array_merge($lockedPackages, $lockData['packages-dev']);$/;"	v
lockedRepository	composer.phar	/^ $lockedRepository = $this->locker->getLockedRepository();$/;"	v
lockedRepository	composer.phar	/^ $lockedRepository = null;$/;"	v
lockedRepository	composer.phar	/^$lockedRepository = $this->locker->getLockedRepository($withDevReqs);$/;"	v
locker	composer.phar	/^$locker = $composer->getLocker();$/;"	v
locker	composer.phar	/^$locker = new Package\\Locker($io, new JsonFile($lockFile, new RemoteFilesystem($io, $config)), $rm, $im, file_get_contents($composerFile));$/;"	v
locker	composer.phar	/^$this->locker = $locker;$/;"	v
locker	composer.phar	/^private $locker;$/;"	v
locker	composer.phar	/^protected $locker;$/;"	v
log	composer.phar	/^public function log($level, $message, array $context = array())$/;"	f
logicalPathPsr0	composer.phar	/^            $logicalPathPsr0 = strtr($class, '_', DIRECTORY_SEPARATOR) . $ext;$/;"	v
logicalPathPsr0	composer.phar	/^            $logicalPathPsr0 = substr($logicalPathPsr4, 0, $pos + 1)$/;"	v
logicalPathPsr0	composer.phar	/^ $logicalPathPsr0 = strtr($class, '_', DIRECTORY_SEPARATOR) . $ext;$/;"	v
logicalPathPsr0	composer.phar	/^ $logicalPathPsr0 = substr($logicalPathPsr4, 0, $pos + 1)$/;"	v
logicalPathPsr4	composer.phar	/^        $logicalPathPsr4 = strtr($class, '\\\\', DIRECTORY_SEPARATOR) . $ext;$/;"	v
logicalPathPsr4	composer.phar	/^ $logicalPathPsr4 = strtr($class, '\\\\', DIRECTORY_SEPARATOR) . $ext;$/;"	v
logo	composer.phar	/^private static $logo = '   ______$/;"	v
logs	composer.phar	/^ $logs = str_replace('<', '\\<', $logs);$/;"	v
logs	composer.phar	/^$logs = $this->getCommitLogs($initial->getSourceReference(), $target->getSourceReference(), $path);$/;"	v
logs	composer.phar	/^$logs = $this->getCommitLogs($target->getSourceReference(), $initial->getSourceReference(), $path);$/;"	v
logs	composer.phar	/^$logs = implode("\\n", array_map(function ($line) {$/;"	v
lookup	composer.phar	/^$this->lookup = $repoConfig['url'];$/;"	v
lookup	composer.phar	/^protected $lookup;$/;"	v
lookupInstalledPackage	composer.phar	/^protected function lookupInstalledPackage(Pool $pool, Link $link)$/;"	f
low	composer.phar	/^ $low = $i & $mask;$/;"	v
lowMatches	composer.phar	/^protected $lowMatches = array();$/;"	v
lowStabilitySuffix	composer.phar	/^ $lowStabilitySuffix = '';$/;"	v
lowStabilitySuffix	composer.phar	/^$lowStabilitySuffix = '-dev';$/;"	v
lowVersion	composer.phar	/^$lowVersion = $this->manipulateVersionString($matches, $position) . '-dev';$/;"	v
lowVersion	composer.phar	/^$lowVersion = $this->manipulateVersionString($matches, $position, 0) . $stabilitySuffix;$/;"	v
lowVersion	composer.phar	/^$lowVersion = $this->normalize($matches['from']);$/;"	v
lowVersion	composer.phar	/^$lowVersion = $this->normalize(substr($constraint . $stabilitySuffix, 1));$/;"	v
lowerBound	composer.phar	/^$lowerBound = new Constraint('>=', $lowVersion . $lowStabilitySuffix);$/;"	v
lowerBound	composer.phar	/^$lowerBound = new Constraint('>=', $lowVersion);$/;"	v
lstack	composer.phar	/^ private $lstack; $/;"	v
lstack	composer.phar	/^$this->lstack = array();$/;"	v
lstack	composer.phar	/^$this->lstack = array_slice($this->lstack, 0, - $n);$/;"	v
main	composer.phar	/^$main = substr($fromReference, 0, $index) . '\/...';$/;"	v
mainAutoload	composer.phar	/^$mainAutoload = $mainPackage->getAutoload();$/;"	v
mainPackageMap	composer.phar	/^$mainPackageMap = array_shift($packageMap);$/;"	v
makeAssertionRuleDecisions	composer.phar	/^private function makeAssertionRuleDecisions()$/;"	f
makePathRelative	composer.phar	/^public function makePathRelative($endPath, $startPath)$/;"	f
manager	composer.phar	/^$this->manager = $manager;$/;"	v
manager	composer.phar	/^private $manager;$/;"	v
manifest	composer.phar	/^$manifest = $json->read();$/;"	v
manipulateJson	composer.phar	/^protected function manipulateJson($method, $args, $fallback)$/;"	f
manipulateVersionString	composer.phar	/^private function manipulateVersionString($matches, $position, $increment = 0, $pad = '0')$/;"	f
manipulator	composer.phar	/^$manipulator = new JsonManipulator($contents);$/;"	v
map	composer.phar	/^        $map = require __DIR__ . '\/autoload_namespaces.php';$/;"	v
map	composer.phar	/^        $map = require __DIR__ . '\/autoload_psr4.php';$/;"	v
map	composer.phar	/^$map = $generator->parseAutoloads($autoloads, new Package('dummy', '1.0.0.0', '1.0.0'));$/;"	v
map	composer.phar	/^$map = $generator->parseAutoloads($packageMap, $package);$/;"	v
map	composer.phar	/^$map = array();$/;"	v
map	composer.phar	/^$map = require __DIR__ . '\/autoload_namespaces.php';$/;"	v
map	composer.phar	/^$map = require __DIR__ . '\/autoload_psr4.php';$/;"	v
maps	composer.phar	/^$maps = array();$/;"	v
maps	composer.phar	/^$maps = array_merge($maps, static::createMap($dir));$/;"	v
markAliasInstalled	composer.phar	/^protected function markAliasInstalled($package, $reason)$/;"	f
markAliasInstalled	composer.phar	/^public function markAliasInstalled(RepositoryInterface $repo, MarkAliasInstalledOperation $operation)$/;"	f
markAliasUninstalled	composer.phar	/^protected function markAliasUninstalled($package, $reason)$/;"	f
markAliasUninstalled	composer.phar	/^public function markAliasUninstalled(RepositoryInterface $repo, MarkAliasUninstalledOperation $operation)$/;"	f
markForNotification	composer.phar	/^private function markForNotification(PackageInterface $package)$/;"	f
markup	composer.phar	/^$markup = $this->style->getCrossingChar();$/;"	v
mask	composer.phar	/^$mask = $bits == 0 ? 0 : (~0 << (32 - $bits));$/;"	v
match	composer.phar	/^ $match = false;$/;"	v
match	composer.phar	/^ $match = self::inCIDRBlock($ruleHost, $ip);$/;"	v
match	composer.phar	/^ $match = true;$/;"	v
match	composer.phar	/^$match = $ip === $ruleHost;$/;"	v
match	composer.phar	/^$match = false;$/;"	v
match	composer.phar	/^$match = null;$/;"	v
match	composer.phar	/^$match = preg_match($regex, $license);$/;"	v
match	composer.phar	/^$match = stripos(strrev($haystack), strrev($needle)) === 0;$/;"	v
match	composer.phar	/^$match = true;$/;"	v
match	composer.phar	/^$this->match = '';$/;"	v
match	composer.phar	/^private function match($candidate, $name, ConstraintInterface $constraint = null)$/;"	f
match	composer.phar	/^public $match;$/;"	v
matchRegexps	composer.phar	/^protected $matchRegexps = array();$/;"	v
matchSpecific	composer.phar	/^public function matchSpecific(Constraint $provider, $compareBranches = false)$/;"	f
matched	composer.phar	/^private $matched;$/;"	v
matchedPackage	composer.phar	/^$matchedPackage = $package;$/;"	v
matchedPackage	composer.phar	/^$matchedPackage = $pool->literalToPackage($preferred[0]);$/;"	v
matchedPackage	composer.phar	/^$matchedPackage = null;$/;"	v
matchedSchemas	composer.phar	/^$matchedSchemas = 0;$/;"	v
matches	composer.phar	/^ $matches = $pool->whatProvides($package->getName(), new Constraint('=', $package->getVersion()));$/;"	v
matches	composer.phar	/^$matches = $autocomplete;$/;"	v
matches	composer.phar	/^$matches = $pool->whatProvides($name, $constraint);$/;"	v
matches	composer.phar	/^$matches = $provideMatches = array();$/;"	v
matches	composer.phar	/^$matches = $this->findPackages($package);$/;"	v
matches	composer.phar	/^$matches = $this->validatePatternProperties($element, $path, $patternProperties);$/;"	v
matches	composer.phar	/^$matches = array();$/;"	v
matches	composer.phar	/^protected $matches;$/;"	v
matches	composer.phar	/^public function matches(ConstraintInterface $provider)$/;"	f
matches	composer.phar	/^public function matches(ConstraintInterface $provider);$/;"	f
max	composer.phar	/^$this->max = $step;$/;"	v
max	composer.phar	/^$this->max = $this->step;$/;"	v
max	composer.phar	/^$this->max = (int) $max;$/;"	v
max	composer.phar	/^$this->max = max(0, (int) $max);$/;"	v
max	composer.phar	/^private $max;$/;"	v
maxDepth	composer.phar	/^$this->maxDepth = $comparator->getTarget() - 1;$/;"	v
maxDepth	composer.phar	/^$this->maxDepth = $comparator->getTarget();$/;"	v
maxDepth	composer.phar	/^$this->maxDepth = PHP_INT_MAX;$/;"	v
maxDepth	composer.phar	/^protected $maxDepth = PHP_INT_MAX;$/;"	v
maxDepth	composer.phar	/^public static $maxDepth = 7;$/;"	v
memoryInBytes	composer.phar	/^    $memoryInBytes = function ($value) {$/;"	v
memoryLimit	composer.phar	/^    $memoryLimit = trim(ini_get('memory_limit'));$/;"	v
memoryUsage	composer.phar	/^$memoryUsage = memory_get_usage() \/ 1024 \/ 1024;$/;"	v
merge	composer.phar	/^public function merge($config)$/;"	f
mergeApplicationDefinition	composer.phar	/^public function mergeApplicationDefinition($mergeArgs = true)$/;"	f
message	composer.phar	/^$message = "Invalid string";$/;"	v
message	composer.phar	/^$message = "Script %s handling the %s event terminated with an exception";$/;"	v
message	composer.phar	/^$message = "The '" . $this->fileUrl . "' URL could not be accessed: " . $reason;$/;"	v
message	composer.phar	/^$message = "The '" . $this->fileUrl . "' URL required authentication.\\nYou must be using the interactive console to authenticate";$/;"	v
message	composer.phar	/^$message = "\\n".'Could not fetch '.$this->fileUrl.', please create a GitHub OAuth token '.($httpStatus === 404 ? 'to access private repos' : 'to go over the API rate limit');$/;"	v
message	composer.phar	/^$message = $e->getMessage() . ':' . PHP_EOL . $errors;$/;"	v
message	composer.phar	/^$message = $process->isSuccessful() ? 'Command ran successfully' : sprintf('%s Command did not run successfully', $process->getExitCode());$/;"	v
message	composer.phar	/^$message = $property.' : invalid value ('.$this->config[$property].'), must match '.$regex;$/;"	v
message	composer.phar	/^$message = $question->getPrompt();$/;"	v
message	composer.phar	/^$message = $question->getQuestion();$/;"	v
message	composer.phar	/^$message = $this->format;$/;"	v
message	composer.phar	/^$message = $this->formatter->format($message);$/;"	v
message	composer.phar	/^$message = $this->getHelperSet()->get('formatter')->formatBlock($error->getMessage(), 'error');$/;"	v
message	composer.phar	/^$message = '';$/;"	v
message	composer.phar	/^$message = '<error>'.$error->getMessage().'<\/error>';$/;"	v
message	composer.phar	/^$message = 'Cloning failed using an ssh key for authentication, enter your GitHub credentials to access private repos';$/;"	v
message	composer.phar	/^$message = 'Composer could not find a composer.json file in '.$cwd;$/;"	v
message	composer.phar	/^$message = 'Composer could not find the config file: '.$localConfig;$/;"	v
message	composer.phar	/^$message = 'Control character error, possibly incorrectly encoded';$/;"	v
message	composer.phar	/^$message = 'Could not delete '.$path.': ' . @$error['message'];$/;"	v
message	composer.phar	/^$message = 'Could not parse version constraint ' . $constraint;$/;"	v
message	composer.phar	/^$message = 'File could not be found.';$/;"	v
message	composer.phar	/^$message = 'Invalid or malformed JSON';$/;"	v
message	composer.phar	/^$message = 'JSON syntax is malformed';$/;"	v
message	composer.phar	/^$message = 'Malformed UTF-8 characters, possibly incorrectly encoded';$/;"	v
message	composer.phar	/^$message = 'Pulling in changes:';$/;"	v
message	composer.phar	/^$message = 'Rolling back changes:';$/;"	v
message	composer.phar	/^$message = 'Syntax error';$/;"	v
message	composer.phar	/^$message = 'The maximum stack depth has been exceeded';$/;"	v
message	composer.phar	/^$message = (string) $message;$/;"	v
message	composer.phar	/^$message = OutputFormatter::escape($message);$/;"	v
message	composer.phar	/^$message = null;$/;"	v
message	composer.phar	/^$message = sprintf("%s%s<bg=red;fg=white> %s <\/> <fg=red>%s<\/>\\n", $trailingEOL, $this->getBorder($id), $prefix, $message);$/;"	v
message	composer.phar	/^$message = sprintf("Could not create archive '%s' from '%s': %s",$/;"	v
message	composer.phar	/^$message = sprintf($/;"	v
message	composer.phar	/^$message = sprintf('Command "%s" is not defined.', $name);$/;"	v
message	composer.phar	/^$message = sprintf('File "%s" could not be found.', $path);$/;"	v
message	composer.phar	/^$message = sprintf('There are no commands defined in the "%s" namespace.', $namespace);$/;"	v
message	composer.phar	/^$message = str_pad($message, $this->lastMessagesLength, "\\x20", STR_PAD_RIGHT);$/;"	v
message	composer.phar	/^$message = str_replace("%{$name}%", $value, $message);$/;"	v
message	composer.phar	/^$message = strip_tags($this->formatter->format($message));$/;"	v
messageBody	composer.phar	/^$this->messageBody = $match[1];$/;"	v
messageBody	composer.phar	/^$this->messageBody = $response;$/;"	v
messageBody	composer.phar	/^protected $messageBody;$/;"	v
messages	composer.phar	/^ $messages = join($newline ? "\\n" : '', (array) $messages);$/;"	v
messages	composer.phar	/^$messages = $large ? array(str_repeat(' ', $len)) : array();$/;"	v
messages	composer.phar	/^$messages = $this->messages;$/;"	v
messages	composer.phar	/^$messages = (array) $messages;$/;"	v
messages	composer.phar	/^$messages = (array) $question->getQuestion();$/;"	v
messages	composer.phar	/^$messages = (array) $question;$/;"	v
messages	composer.phar	/^$messages = array($/;"	v
messages	composer.phar	/^$messages = array($messages);$/;"	v
messages	composer.phar	/^$messages = array('', '');$/;"	v
messages	composer.phar	/^$messages = array();$/;"	v
messages	composer.phar	/^$messages = array_map(function ($message) use ($memoryUsage, $timeSpent) {$/;"	v
messages	composer.phar	/^$messages = is_array($messages) ? array_values($messages) : array($messages);$/;"	v
messages	composer.phar	/^private $messages;$/;"	v
method	composer.phar	/^$method = $key;$/;"	v
method	composer.phar	/^$method = $operation->getJobType();$/;"	v
method	composer.phar	/^$method = 'addSubNode';$/;"	v
method	composer.phar	/^$method = 'get'.ucfirst($linkInfo['method']);$/;"	v
method	composer.phar	/^$method = 'removeSubNode';$/;"	v
method	composer.phar	/^$method = 'set'.ucfirst($opts['method']);$/;"	v
methodName	composer.phar	/^$methodName = substr($callable, strpos($callable, '::') + 2);$/;"	v
minDepth	composer.phar	/^$this->minDepth = $comparator->getTarget() + 1;$/;"	v
minDepth	composer.phar	/^$this->minDepth = $comparator->getTarget();$/;"	v
minDepth	composer.phar	/^$this->minDepth = $minDepth;$/;"	v
minDepth	composer.phar	/^$this->minDepth = $this->maxDepth = $comparator->getTarget();$/;"	v
minDepth	composer.phar	/^$this->minDepth = 0;$/;"	v
minDepth	composer.phar	/^private $minDepth = 0;$/;"	v
minDepth	composer.phar	/^protected $minDepth = 0;$/;"	v
minSpaceFree	composer.phar	/^$minSpaceFree = 1024 * 1024;$/;"	v
minimumStability	composer.phar	/^ $minimumStability = $this->locker->getMinimumStability();$/;"	v
minimumStability	composer.phar	/^$minimumStability = $input->getOption('stability') ?: null;$/;"	v
minimumStability	composer.phar	/^$minimumStability = $io->askAndValidate($/;"	v
minimumStability	composer.phar	/^$minimumStability = $package->getMinimumStability();$/;"	v
minimumStability	composer.phar	/^$minimumStability = $stabilities[$minimumStability];$/;"	v
minimumStability	composer.phar	/^$minimumStability = $this->package->getMinimumStability();$/;"	v
minimumStability	composer.phar	/^$this->minimumStability = $minimumStability;$/;"	v
minimumStability	composer.phar	/^protected $minimumStability = 'stable';$/;"	v
mins	composer.phar	/^$mins = (int) round((time() - $date->getTarget()) \/ 60);$/;"	v
mirror	composer.phar	/^public function mirror($originDir, $targetDir, \\Traversable $iterator = null, $options = array())$/;"	f
mirrorUrl	composer.phar	/^$mirrorUrl = ComposerMirror::processGitUrl($mirror['url'], $this->name, $url, $type);$/;"	v
mirrorUrl	composer.phar	/^$mirrorUrl = ComposerMirror::processHgUrl($mirror['url'], $this->name, $url, $type);$/;"	v
mirrorUrl	composer.phar	/^$mirrorUrl = ComposerMirror::processUrl($mirror['url'], $this->name, $this->version, $ref, $type);$/;"	v
missingArguments	composer.phar	/^$missingArguments = array_filter(array_keys($definition->getArguments()), function ($argument) use ($definition, $givenArguments) {$/;"	v
mkdir	composer.phar	/^public function mkdir($dirs, $mode = 0777)$/;"	f
mockLocalRepositories	composer.phar	/^private function mockLocalRepositories(RepositoryManager $rm)$/;"	f
mode	composer.phar	/^$mode = self::OPTIONAL;$/;"	v
mode	composer.phar	/^$mode = self::VALUE_NONE;$/;"	v
mode	composer.phar	/^$this->mode = $mode;$/;"	v
mode	composer.phar	/^$this->mode = Iterator\\FileTypeFilterIterator::ONLY_DIRECTORIES;$/;"	v
mode	composer.phar	/^$this->mode = Iterator\\FileTypeFilterIterator::ONLY_FILES;$/;"	v
mode	composer.phar	/^private $mode = 0;$/;"	v
mode	composer.phar	/^private $mode;$/;"	v
mode	composer.phar	/^protected $mode = 0;$/;"	v
modifierRegex	composer.phar	/^private static $modifierRegex = '[._-]?(?:(stable|beta|b|RC|alpha|a|patch|pl|p)(?:[.-]?(\\d+))?)?([.-]?dev)?';$/;"	v
modulus	composer.phar	/^$modulus = fmod($number1, $number2);$/;"	v
more	composer.phar	/^$this->more = false;$/;"	v
more	composer.phar	/^private $more;$/;"	v
movePluginsToFront	composer.phar	/^private function movePluginsToFront(array $operations)$/;"	f
moveUninstallsToFront	composer.phar	/^private function moveUninstallsToFront(array $operations)$/;"	f
moveWatch	composer.phar	/^protected function moveWatch($fromLiteral, $toLiteral, $node)$/;"	f
moveWatch	composer.phar	/^public function moveWatch($from, $to)$/;"	f
msg	composer.phar	/^$msg = "\\n    - This package requires ".$job['packageName'].$this->constraintToText($job['constraint']).' but ';$/;"	v
msg	composer.phar	/^$msg = 'Malformed UTF-8 characters, possibly incorrectly encoded';$/;"	v
msg	composer.phar	/^$msg = 'Maximum stack depth exceeded';$/;"	v
msg	composer.phar	/^$msg = 'Reading composer.json of <info>' . ($this->packageName ?: $this->url) . '<\/info> (<comment>' . $branch . '<\/comment>)';$/;"	v
msg	composer.phar	/^$msg = 'Reading composer.json of <info>' . ($this->packageName ?: $this->url) . '<\/info> (<comment>' . $tag . '<\/comment>)';$/;"	v
msg	composer.phar	/^$msg = 'Underflow or the modes mismatch';$/;"	v
msg	composer.phar	/^$msg = 'Unexpected control character found';$/;"	v
msg	composer.phar	/^$msg = 'Unknown error';$/;"	v
multiConfigValues	composer.phar	/^$multiConfigValues = array($/;"	v
multiselect	composer.phar	/^$multiselect = $this->multiselect;$/;"	v
multiselect	composer.phar	/^$this->multiselect = $multiselect;$/;"	v
multiselect	composer.phar	/^private $multiselect = false;$/;"	v
multiselectChoices	composer.phar	/^$multiselectChoices = array();$/;"	v
mustRun	composer.phar	/^public function mustRun($callback = null)$/;"	f
mustRun	composer.phar	/^public function mustRun(OutputInterface $output, $cmd, $error = null, $callback = null)$/;"	f
n	composer.phar	/^ $n = -1;$/;"	v
name	composer.phar	/^ $name = $name . '\/' . $name;$/;"	v
name	composer.phar	/^ $name = $package->getName();$/;"	v
name	composer.phar	/^ $name = 'xhp'.substr(str_replace(array('-', ':'), array('_', '__'), $name), 1);$/;"	v
name	composer.phar	/^ $name = rtrim($name, ':');$/;"	v
name	composer.phar	/^ $name = strtolower($name);$/;"	v
name	composer.phar	/^$name = $_SERVER['USERNAME'] . '\/' . $name;$/;"	v
name	composer.phar	/^$name = $git['github.user'] . '\/' . $name;$/;"	v
name	composer.phar	/^$name = $io->askAndValidate($/;"	v
name	composer.phar	/^$name = $matches['name'][$i];$/;"	v
name	composer.phar	/^$name = $package->getName();$/;"	v
name	composer.phar	/^$name = $package->getPrettyName();$/;"	v
name	composer.phar	/^$name = $target->getName();$/;"	v
name	composer.phar	/^$name = $this->defaultCommand;$/;"	v
name	composer.phar	/^$name = $this->getCommandName($input);$/;"	v
name	composer.phar	/^$name = $this->getName();$/;"	v
name	composer.phar	/^$name = $this->name;$/;"	v
name	composer.phar	/^$name = 'ICU';$/;"	v
name	composer.phar	/^$name = 'help';$/;"	v
name	composer.phar	/^$name = (string) $action['name'];$/;"	v
name	composer.phar	/^$name = basename($cwd);$/;"	v
name	composer.phar	/^$name = get_current_user() . '\/' . $name;$/;"	v
name	composer.phar	/^$name = implode('-', array_filter($nameParts, function ($p) {$/;"	v
name	composer.phar	/^$name = is_int($index) && isset($repo['url']) ? preg_replace('{^https?:\/\/}i', '', $repo['url']) : $index;$/;"	v
name	composer.phar	/^$name = preg_replace('{(?:([a-z])([A-Z])|([A-Z])([A-Z][a-z]))}', '\\\\1\\\\3-\\\\2\\\\4', $name);$/;"	v
name	composer.phar	/^$name = strtolower($name);$/;"	v
name	composer.phar	/^$name = strtolower($reqName);$/;"	v
name	composer.phar	/^$name = strtolower($requirements[0]['name']);$/;"	v
name	composer.phar	/^$name = substr($branch['ref'], 11);$/;"	v
name	composer.phar	/^$name = substr($name, 2);$/;"	v
name	composer.phar	/^$name = substr($token, 1);$/;"	v
name	composer.phar	/^$name = substr($token, 2);$/;"	v
name	composer.phar	/^$name = trim($name);$/;"	v
name	composer.phar	/^$this->name = $name;$/;"	v
name	composer.phar	/^$this->name = strtolower($name);$/;"	v
name	composer.phar	/^private $name;$/;"	v
name	composer.phar	/^protected $name;$/;"	v
name	composer.phar	/^public function name($pattern)$/;"	f
nameLength	composer.phar	/^ $nameLength = 1 + max(strlen($option->getShortcut()), 1) + 4 + strlen($option->getName());$/;"	v
nameLength	composer.phar	/^$nameLength = $versionLength = 0;$/;"	v
nameLength	composer.phar	/^$nameLength = max($nameLength, $package);$/;"	v
nameLength	composer.phar	/^$nameLength = max($nameLength, strlen($package->getPrettyName()));$/;"	v
nameMatch	composer.phar	/^$nameMatch = false;$/;"	v
nameMatch	composer.phar	/^$nameMatch = true;$/;"	v
nameMatchesRequiredPackage	composer.phar	/^$nameMatchesRequiredPackage = in_array($packageName, $requiredPackageNames, true);$/;"	v
nameMatchesRequiredPackage	composer.phar	/^$nameMatchesRequiredPackage = true;$/;"	v
nameParts	composer.phar	/^$nameParts = array(preg_replace('#[^a-z0-9-_]#i', '-', $package->getName()));$/;"	v
nameParts	composer.phar	/^$nameParts = array_merge($nameParts, array($package->getDistReference(), $package->getDistType()));$/;"	v
nameParts	composer.phar	/^$nameParts = array_merge($nameParts, array($package->getPrettyVersion(), $package->getDistReference()));$/;"	v
names	composer.phar	/^$names = $package->getNames();$/;"	v
names	composer.phar	/^$names = array($/;"	v
names	composer.phar	/^$names = array();$/;"	v
names	composer.phar	/^$this->names = $names;$/;"	v
names	composer.phar	/^private $names = array();$/;"	v
names	composer.phar	/^protected $names = array();$/;"	v
namespace	composer.phar	/^$namespace = '';$/;"	v
namespace	composer.phar	/^$namespace = str_replace(array(' ', "\\t", "\\r", "\\n"), '', $matches['nsname'][$i]) . '\\\\';$/;"	v
namespace	composer.phar	/^$this->namespace = $namespace;$/;"	v
namespace	composer.phar	/^private $namespace;$/;"	v
namespaceFilter	composer.phar	/^$namespaceFilter = $namespace === '' ? null : $namespace;$/;"	v
namespacedCommands	composer.phar	/^$namespacedCommands = array();$/;"	v
namespacedCommands	composer.phar	/^$namespacedCommands = array_merge($globalCommands, $namespacedCommands);$/;"	v
namespaces	composer.phar	/^$namespaces = $package->getNamespaces();$/;"	v
namespaces	composer.phar	/^$namespaces = array();$/;"	v
namespaces	composer.phar	/^$namespaces = array_merge($namespaces, $this->extractAllNamespaces($alias));$/;"	v
namespaces	composer.phar	/^$namespaces = array_merge($namespaces, $this->extractAllNamespaces($command->getName()));$/;"	v
namespaces	composer.phar	/^$namespaces = preg_grep('{^'.$expr.'}', $allNamespaces);$/;"	v
namespaces	composer.phar	/^$this->namespaces = array();$/;"	v
namespaces	composer.phar	/^private $namespaces;$/;"	v
namespacesFile	composer.phar	/^$namespacesFile = <<<EOF$/;"	v
namespacesToScan	composer.phar	/^$namespacesToScan = array();$/;"	v
nbLines	composer.phar	/^$nbLines = $cell->getRowspan() - 1;$/;"	v
nbLines	composer.phar	/^$nbLines = count($lines) > $nbLines ? substr_count($cell, "\\n") : $nbLines;$/;"	v
needle	composer.phar	/^$needle = $input->getArgument('package');$/;"	v
needle	composer.phar	/^$needle = '.'. trim($ruleHost, '.') .'.';$/;"	v
negate	composer.phar	/^$negate = false;$/;"	v
negate	composer.phar	/^$negate = true;$/;"	v
newFile	composer.phar	/^$newFile = !$this->file->exists();$/;"	v
newLine	composer.phar	/^$newLine = "\\n";$/;"	v
newLine	composer.phar	/^public function newLine($count = 1)$/;"	f
newLine	composer.phar	/^public function newLine($count = 1);$/;"	f
newLinks	composer.phar	/^$newLinks = array();$/;"	v
newPackage	composer.phar	/^$newPackage = $pool->literalToPackage($matches[0]);$/;"	v
newRepos	composer.phar	/^$newRepos = array_reverse($config['repositories'], true);$/;"	v
newRule	composer.phar	/^$newRule = new Rule($learnedLiterals, Rule::RULE_LEARNED, $why);$/;"	v
newSourceUrl	composer.phar	/^$newSourceUrl = $newPackage->getSourceUrl();$/;"	v
newState	composer.phar	/^$newState = $this->table[$this->stack[count($this->stack)-2]][$this->stack[count($this->stack)-1]];$/;"	v
newState	composer.phar	/^$newState = null;$/;"	v
newline	composer.phar	/^$this->newline = false !== strpos($contents, "\\r\\n") ? "\\r\\n" : "\\n";$/;"	v
newline	composer.phar	/^private $newline;$/;"	v
newlyCreated	composer.phar	/^$newlyCreated = !file_exists($file);$/;"	v
next	composer.phar	/^ $next = array_shift($this->parsed);$/;"	v
next	composer.phar	/^$next = $this->match;$/;"	v
next	composer.phar	/^private function next()$/;"	f
next	composer.phar	/^public function next()$/;"	f
nextRuleId	composer.phar	/^$this->nextRuleId = 0;$/;"	v
nextRuleId	composer.phar	/^protected $nextRuleId;$/;"	v
nextSection	composer.phar	/^public function nextSection()$/;"	f
noEqualOp	composer.phar	/^$noEqualOp = str_replace('=', '', self::$transOpInt[$this->operator]);$/;"	v
noMatchRegexps	composer.phar	/^protected $noMatchRegexps = array();$/;"	v
node	composer.phar	/^$node = $chain->current();$/;"	v
nodeRegex	composer.phar	/^ $nodeRegex = '{^(\\s*\\{\\s*(?:'.self::$JSON_STRING.'\\s*:\\s*'.self::$JSON_VALUE.'\\s*,\\s*)*?)'.$/;"	v
noescape	composer.phar	/^$noescape = '\\\\' === $char ? !$noescape : true;$/;"	v
noescape	composer.phar	/^$noescape = true;$/;"	v
nonFeatureBranches	composer.phar	/^$nonFeatureBranches = '';$/;"	v
nonFeatureBranches	composer.phar	/^$nonFeatureBranches = implode('|', $packageConfig['non-feature-branches']);$/;"	v
noneSatisfied	composer.phar	/^$noneSatisfied = false;$/;"	v
noneSatisfied	composer.phar	/^$noneSatisfied = true;$/;"	v
normalize	composer.phar	/^public function normalize($version, $fullVersion = null)$/;"	f
normalizeBranch	composer.phar	/^public function normalizeBranch($name)$/;"	f
normalizePath	composer.phar	/^private static function normalizePath($path)$/;"	f
normalizePath	composer.phar	/^protected function normalizePath($path)$/;"	f
normalizePath	composer.phar	/^public function normalizePath($path)$/;"	f
normalizeRequirements	composer.phar	/^protected function normalizeRequirements(array $requirements)$/;"	f
normalizeStability	composer.phar	/^public static function normalizeStability($stability)$/;"	f
normalizeUrl	composer.phar	/^protected static function normalizeUrl($url)$/;"	f
normalized	composer.phar	/^$normalized = array();$/;"	v
normalizedAliases	composer.phar	/^$normalizedAliases = array();$/;"	v
normalizedVersion	composer.phar	/^$normalizedVersion = $versionParser->normalize($version);$/;"	v
normalizer	composer.phar	/^$this->normalizer = $normalizer;$/;"	v
normalizer	composer.phar	/^private $normalizer;$/;"	v
notContains	composer.phar	/^$this->notContains = $notContains;$/;"	v
notContains	composer.phar	/^private $notContains = array();$/;"	v
notContains	composer.phar	/^protected $notContains = array();$/;"	v
notContains	composer.phar	/^public function notContains($pattern)$/;"	f
notEqualTo	composer.phar	/^public static function notEqualTo($version1, $version2)$/;"	f
notFoundRetries	composer.phar	/^$notFoundRetries = 2;$/;"	v
notName	composer.phar	/^public function notName($pattern)$/;"	f
notNames	composer.phar	/^$this->notNames = $notNames;$/;"	v
notNames	composer.phar	/^private $notNames = array();$/;"	v
notNames	composer.phar	/^protected $notNames = array();$/;"	v
notPath	composer.phar	/^public function notPath($pattern)$/;"	f
notPaths	composer.phar	/^$this->notPaths = $notPaths;$/;"	v
notPaths	composer.phar	/^private $notPaths = array();$/;"	v
notPaths	composer.phar	/^protected $notPaths = array();$/;"	v
note	composer.phar	/^$note = 'Composer';$/;"	v
note	composer.phar	/^public function note($message)$/;"	f
note	composer.phar	/^public function note($message);$/;"	f
notifiablePackages	composer.phar	/^$this->notifiablePackages = array();$/;"	v
notifiablePackages	composer.phar	/^private $notifiablePackages = array();$/;"	v
notificationUrl	composer.phar	/^$this->notificationUrl = $notificationUrl;$/;"	v
notificationUrl	composer.phar	/^protected $notificationUrl;$/;"	v
notifyInstalls	composer.phar	/^public function notifyInstalls(IOInterface $io)$/;"	f
notifyUrl	composer.phar	/^ $this->notifyUrl = $this->canonicalizeUrl($data['notify_batch']);$/;"	v
notifyUrl	composer.phar	/^$this->notifyUrl = $this->canonicalizeUrl($data['notify']);$/;"	v
notifyUrl	composer.phar	/^$this->notifyUrl = $this->canonicalizeUrl($data['notify-batch']);$/;"	v
notifyUrl	composer.phar	/^protected $notifyUrl;$/;"	v
nullstream	composer.phar	/^$nullstream = fopen('NUL', 'c');$/;"	v
nullstream	composer.phar	/^$nullstream = fopen('\/dev\/null', 'c');$/;"	v
num	composer.phar	/^$num = 0;$/;"	v
numLevelUp	composer.phar	/^$numLevelUp = strlen($match[0]) \/3 + 1;$/;"	v
numMatches	composer.phar	/^$numMatches = 0;$/;"	v
numMatches	composer.phar	/^$numMatches = count($matches);$/;"	v
numberOfColumns	composer.phar	/^$this->numberOfColumns = null;$/;"	v
numberOfColumns	composer.phar	/^private $numberOfColumns;$/;"	v
oLevel	composer.phar	/^$oLevel = $level;$/;"	v
obsoleteImpossibleForAlias	composer.phar	/^protected function obsoleteImpossibleForAlias($package, $provider)$/;"	f
obsoleteProviders	composer.phar	/^$obsoleteProviders = $this->pool->whatProvides($link->getTarget(), $link->getConstraint());$/;"	v
obsoleteProviders	composer.phar	/^$obsoleteProviders = $this->pool->whatProvides($package->getName(), null);$/;"	v
obsoleteProviders	composer.phar	/^$obsoleteProviders = $this->pool->whatProvides($package->getName(), null, true);$/;"	v
offset	composer.phar	/^$offset = $pos + strlen($text);$/;"	v
offset	composer.phar	/^$offset = $this->key();$/;"	v
offset	composer.phar	/^$offset = 0;$/;"	v
offset	composer.phar	/^protected $offset = 0;$/;"	v
ofs	composer.phar	/^$ofs = ($numMatches + $ofs) % $numMatches;$/;"	v
ofs	composer.phar	/^$ofs = -1;$/;"	v
ofs	composer.phar	/^$ofs = 0;$/;"	v
ok	composer.phar	/^$ok = false;$/;"	v
ok	composer.phar	/^$ok = true;$/;"	v
old	composer.phar	/^$old = $rollbackDir . '\/' . $rollbackVersion . self::OLD_INSTALL_EXT;$/;"	v
oldCwd	composer.phar	/^$oldCwd = getcwd();$/;"	v
oldFile	composer.phar	/^$oldFile = $rollbackDir . "\/{$rollbackVersion}" . self::OLD_INSTALL_EXT;$/;"	v
oldInstallerPlugin	composer.phar	/^$oldInstallerPlugin = ($package->getType() === 'composer-installer');$/;"	v
oldWorkingDir	composer.phar	/^$oldWorkingDir = getcwd();$/;"	v
onlyName	composer.phar	/^$onlyName = $input->getOption('only-name');$/;"	v
onlyName	composer.phar	/^protected $onlyName;$/;"	v
openBrowser	composer.phar	/^private function openBrowser($url)$/;"	f
openErrorStream	composer.phar	/^private function openErrorStream()$/;"	f
openOutputStream	composer.phar	/^private function openOutputStream()$/;"	f
operation	composer.phar	/^$this->operation = $operation;$/;"	v
operation	composer.phar	/^private $operation;$/;"	v
operations	composer.phar	/^ $operations = $this->processDevPackages($localRepo, $pool, $policy, $repositories, $installedRepo, $lockedRepository, $installFromLock, $withDevReqs, 'force-updates', $operations);$/;"	v
operations	composer.phar	/^$operations = $solver->solve($request, $this->ignorePlatformReqs);$/;"	v
operations	composer.phar	/^$operations = $this->movePluginsToFront($operations);$/;"	v
operations	composer.phar	/^$operations = $this->moveUninstallsToFront($operations);$/;"	v
operations	composer.phar	/^$operations = array();$/;"	v
operations	composer.phar	/^$this->operations = $operations;$/;"	v
operations	composer.phar	/^private $operations;$/;"	v
operator	composer.phar	/^$operator = $this->preferLowest ? '<' : '>';$/;"	v
operator	composer.phar	/^$operator = '<';$/;"	v
operator	composer.phar	/^$operator = '==';$/;"	v
operator	composer.phar	/^$operator = '>';$/;"	v
operator	composer.phar	/^$operator = isset($matches[1]) ? $matches[1] : '==';$/;"	v
operator	composer.phar	/^$this->operator = $operator;$/;"	v
operator	composer.phar	/^$this->operator = self::$transOpStr[$operator];$/;"	v
operator	composer.phar	/^private $operator = '==';$/;"	v
operator	composer.phar	/^protected $operator;$/;"	v
ops	composer.phar	/^$ops = $solver->solve($request, $this->ignorePlatformReqs);$/;"	v
optimize	composer.phar	/^$optimize = $input->getOption('optimize') || $config->get('optimize-autoloader');$/;"	v
optimize	composer.phar	/^$optimize = $input->getOption('optimize-autoloader') || $composer->getConfig()->get('optimize-autoloader');$/;"	v
optimize	composer.phar	/^$optimize = $input->getOption('optimize-autoloader') || $config->get('optimize-autoloader');$/;"	v
optimizeAutoloader	composer.phar	/^$this->optimizeAutoloader = (boolean) $optimizeAutoloader;$/;"	v
optimizeAutoloader	composer.phar	/^protected $optimizeAutoloader = false;$/;"	v
option	composer.phar	/^$option = $this->definition->getOption($name);$/;"	v
option	composer.phar	/^$option = $this->definition->getOptionForShortcut($name[$i]);$/;"	v
optionals	composer.phar	/^$optionals = array();$/;"	v
optionals	composer.phar	/^$this->optionals = $optionals;$/;"	v
optionals	composer.phar	/^private $optionals;$/;"	v
options	composer.phar	/^$options = $this->getOptionsForUrl($originUrl, $additionalOptions);$/;"	v
options	composer.phar	/^$options = $this->options;$/;"	v
options	composer.phar	/^$options = array('http' => array($/;"	v
options	composer.phar	/^$options = array();$/;"	v
options	composer.phar	/^$options = array_filter(array_intersect_key($input->getOptions(), array_flip($whitelist)));$/;"	v
options	composer.phar	/^$options = array_merge(array($/;"	v
options	composer.phar	/^$options = array_replace_recursive($options, $defaultOptions);$/;"	v
options	composer.phar	/^$options = array_replace_recursive($this->options, $additionalOptions);$/;"	v
options	composer.phar	/^$this->options = $options;$/;"	v
options	composer.phar	/^$this->options = $repoConfig['options'];$/;"	v
options	composer.phar	/^$this->options = array();$/;"	v
options	composer.phar	/^$this->options = array_merge($this->options, $options);$/;"	v
options	composer.phar	/^$this->options = array_replace(array('suppress_errors' => true, 'binary_pipes' => true), $options);$/;"	v
options	composer.phar	/^$this->options = str_replace($option, '', $this->options);$/;"	v
options	composer.phar	/^private $options = array($/;"	v
options	composer.phar	/^private $options = array();$/;"	v
options	composer.phar	/^private $options;$/;"	v
options	composer.phar	/^protected $options = array();$/;"	v
options	composer.phar	/^protected $options;$/;"	v
opts	composer.phar	/^$opts = array('http' =>$/;"	v
opts	composer.phar	/^$opts = stream_context_get_options(StreamContextFactory::getContext('http:\/\/example.org'));$/;"	v
orConstraints	composer.phar	/^$orConstraints = preg_split('{\\s*\\|\\|?\\s*}', trim($constraints));$/;"	v
orGroups	composer.phar	/^$orGroups = array();$/;"	v
orSplit	composer.phar	/^ $orSplit = preg_split('{\\s*\\|\\|?\\s*}', trim($reqVersion));$/;"	v
origCwd	composer.phar	/^$origCwd = $cwd;$/;"	v
origK	composer.phar	/^$origK = $k;$/;"	v
origin	composer.phar	/^$origin = str_replace($targetDir, $originDir, $file->getPathname());$/;"	v
originDir	composer.phar	/^$originDir = rtrim($originDir, '\/\\\\');$/;"	v
originUrl	composer.phar	/^$originUrl = !empty($matches[2]) ? $matches[2] : $matches[3];$/;"	v
originUrl	composer.phar	/^$originUrl = 'github.com';$/;"	v
originUrl	composer.phar	/^$this->originUrl = !empty($match[1]) ? $match[1] : $match[2];$/;"	v
originUrl	composer.phar	/^$this->originUrl = $originUrl;$/;"	v
originUrl	composer.phar	/^$this->originUrl = $repoConfig['url'];$/;"	v
originUrl	composer.phar	/^$this->originUrl = 'bitbucket.org';$/;"	v
originUrl	composer.phar	/^$this->originUrl = 'github.com';$/;"	v
originUrl	composer.phar	/^private $originUrl;$/;"	v
originUrl	composer.phar	/^protected $originUrl;$/;"	v
os	composer.phar	/^$os = strtolower(PHP_OS);$/;"	v
otherWatch	composer.phar	/^$otherWatch = $node->getOtherWatch($literal);$/;"	v
out	composer.phar	/^$out = $licenseId;$/;"	v
out	composer.phar	/^$out = '<span style="';$/;"	v
out	composer.phar	/^$out = '{' . $this->newline;$/;"	v
out	composer.phar	/^$out = function ($msg, $style) use (&$output) {$/;"	v
out	composer.phar	/^$out = self::OUT;$/;"	v
out	composer.phar	/^$out = sprintf('%s (%s) %s', $license[0], $licenseId, $license[2]);$/;"	v
out	composer.phar	/^$out = sprintf('%s (%s) (OSI approved) %s', $license[0], $licenseId, $license[2]);$/;"	v
outOfQuotes	composer.phar	/^$outOfQuotes = !$outOfQuotes;$/;"	v
outOfQuotes	composer.phar	/^$outOfQuotes = true;$/;"	v
output	composer.phar	/^ $this->output = $output->isDecorated() ? $output : new NullOutput();$/;"	v
output	composer.phar	/^$output = "Could not retrieve changes between $fromReference and $toReference due to missing revision information";$/;"	v
output	composer.phar	/^$output = $output->getErrorOutput();$/;"	v
output	composer.phar	/^$output = $process->getOutput();$/;"	v
output	composer.phar	/^$output = $this->execute('svn cat', $this->baseUrl . $resource . $rev);$/;"	v
output	composer.phar	/^$output = $this->execute('svn info', $this->baseUrl . $path . $rev);$/;"	v
output	composer.phar	/^$output = $this->execute('svn ls --verbose', $this->baseUrl . '\/' . $this->branchesPath);$/;"	v
output	composer.phar	/^$output = $this->execute('svn ls --verbose', $this->baseUrl . '\/' . $this->tagsPath);$/;"	v
output	composer.phar	/^$output = $this->execute('svn ls --verbose', $trunkParent);$/;"	v
output	composer.phar	/^$output = $this->output->getErrorOutput();$/;"	v
output	composer.phar	/^$output = $this->output;$/;"	v
output	composer.phar	/^$output = $this->process->getErrorOutput();$/;"	v
output	composer.phar	/^$output = $this->process->splitLines($output);$/;"	v
output	composer.phar	/^$output = '';$/;"	v
output	composer.phar	/^$output = new BufferedOutput();$/;"	v
output	composer.phar	/^$output = new BufferedOutput(BufferedOutput::VERBOSITY_NORMAL, !$raw);$/;"	v
output	composer.phar	/^$output = new BufferedOutput(BufferedOutput::VERBOSITY_NORMAL, true);$/;"	v
output	composer.phar	/^$output = new ConsoleOutput();$/;"	v
output	composer.phar	/^$output = new ConsoleOutput(ConsoleOutput::VERBOSITY_NORMAL, null, $formatter);$/;"	v
output	composer.phar	/^$output = new StreamOutput(fopen('php:\/\/memory', 'rw'), $verbosity, !empty($formatter), $formatter);$/;"	v
output	composer.phar	/^$output = null;$/;"	v
output	composer.phar	/^$output = ob_get_clean();$/;"	v
output	composer.phar	/^$output = preg_replace_callback("{(?<=^|\\n|\\x08)(.+?)(\\x08+)}", function ($matches) {$/;"	v
output	composer.phar	/^$output = preg_split('~(\\r\\n|\\r|\\n)~', stream_get_contents($pipes[1]), -1, PREG_SPLIT_NO_EMPTY);$/;"	v
output	composer.phar	/^$output = stream_get_contents($this->output->getStream());$/;"	v
output	composer.phar	/^$output = trim($output);$/;"	v
output	composer.phar	/^$this->output = $output;$/;"	v
output	composer.phar	/^$this->output = new ConsoleOutput();$/;"	v
output	composer.phar	/^$this->output = new StreamOutput(fopen('php:\/\/memory', 'w', false));$/;"	v
output	composer.phar	/^$this->output = null;$/;"	v
output	composer.phar	/^private $output;$/;"	v
output	composer.phar	/^protected $output;$/;"	v
outputDisabled	composer.phar	/^$this->outputDisabled = false;$/;"	v
outputDisabled	composer.phar	/^$this->outputDisabled = true;$/;"	v
outputDisabled	composer.phar	/^private $outputDisabled = false;$/;"	v
outputHandler	composer.phar	/^public function outputHandler($type, $buffer)$/;"	f
outputPackages	composer.phar	/^$outputPackages = array();$/;"	v
outputProgress	composer.phar	/^$this->outputProgress = $outputProgress;$/;"	v
outputProgress	composer.phar	/^protected $outputProgress = true;$/;"	v
outputResult	composer.phar	/^private function outputResult($io, $name, &$errors, &$warnings, $checkPublish = false, $publishErrors = array(), $checkLock = false, $lockErrors = array(), $printSchemaUrl = false)$/;"	f
outputResult	composer.phar	/^private function outputResult($result)$/;"	f
outputStream	composer.phar	/^$outputStream = $this->hasStdoutSupport() ? 'php:\/\/stdout' : 'php:\/\/output';$/;"	v
overrides	composer.phar	/^private $overrides = array();$/;"	v
overwrite	composer.phar	/^ $this->overwrite = false;$/;"	v
overwrite	composer.phar	/^$this->overwrite = (bool) $overwrite;$/;"	v
overwrite	composer.phar	/^private $overwrite = true;$/;"	v
overwrite	composer.phar	/^private function overwrite($message)$/;"	f
overwrite	composer.phar	/^private function overwrite(OutputInterface $output, $message)$/;"	f
overwrite	composer.phar	/^public function overwrite($messages, $newline = true, $size = 80)$/;"	f
overwrite	composer.phar	/^public function overwrite($messages, $newline = true, $size = null)$/;"	f
overwrite	composer.phar	/^public function overwrite($messages, $newline = true, $size = null);$/;"	f
overwriteError	composer.phar	/^public function overwriteError($messages, $newline = true, $size = 80)$/;"	f
overwriteError	composer.phar	/^public function overwriteError($messages, $newline = true, $size = null)$/;"	f
overwriteError	composer.phar	/^public function overwriteError($messages, $newline = true, $size = null);$/;"	f
overwriteFiles	composer.phar	/^$this->overwriteFiles = $overwriteFiles;$/;"	v
overwriteFiles	composer.phar	/^protected $overwriteFiles = true;$/;"	v
owner	composer.phar	/^$this->owner = $match[1];$/;"	v
owner	composer.phar	/^$this->owner = $match[3];$/;"	v
owner	composer.phar	/^$this->owner = $repoData['owner']['login'];$/;"	v
owner	composer.phar	/^protected $owner;$/;"	v
p	composer.phar	/^$p = new \\ReflectionProperty($this->table, 'output');$/;"	v
p	composer.phar	/^$p = null;$/;"	v
p4Branch	composer.phar	/^$this->p4Branch = $branch;$/;"	v
p4Branch	composer.phar	/^$this->p4Branch = $repoConfig['branch'];$/;"	v
p4Branch	composer.phar	/^protected $p4Branch;$/;"	v
p4Client	composer.phar	/^$this->p4Client = 'composer_perforce_' . $this->uniquePerforceClientName . '_' . $cleanStreamName;$/;"	v
p4Client	composer.phar	/^protected $p4Client;$/;"	v
p4ClientSpec	composer.phar	/^protected $p4ClientSpec;$/;"	v
p4Command	composer.phar	/^$p4Command = $p4Command . $command;$/;"	v
p4Command	composer.phar	/^$p4Command = $p4Command . '-c ' . $this->getClient() . ' ';$/;"	v
p4Command	composer.phar	/^$p4Command = $p4Command . '-p ' . $this->getPort() . ' ';$/;"	v
p4Command	composer.phar	/^$p4Command = $p4Command . '-u ' . $this->getUser() . ' ';$/;"	v
p4Command	composer.phar	/^$p4Command = 'p4 ';$/;"	v
p4CreateClientCommand	composer.phar	/^$p4CreateClientCommand = $this->generateP4Command('client -i < ' . str_replace(" ", "\\\\ ", $this->getP4ClientSpec()));$/;"	v
p4Depot	composer.phar	/^$this->p4Depot = $depot;$/;"	v
p4Depot	composer.phar	/^$this->p4Depot = $repoConfig['depot'];$/;"	v
p4Depot	composer.phar	/^protected $p4Depot;$/;"	v
p4DepotType	composer.phar	/^$this->p4DepotType = $fields[3];$/;"	v
p4DepotType	composer.phar	/^$this->p4DepotType = 'stream';$/;"	v
p4DepotType	composer.phar	/^protected $p4DepotType;$/;"	v
p4Login	composer.phar	/^public function p4Login()$/;"	f
p4Password	composer.phar	/^$this->p4Password = $password;$/;"	v
p4Password	composer.phar	/^$this->p4Password = $repoConfig['p4password'];$/;"	v
p4Password	composer.phar	/^protected $p4Password;$/;"	v
p4Port	composer.phar	/^$this->p4Port = $port;$/;"	v
p4Port	composer.phar	/^protected $p4Port;$/;"	v
p4Stream	composer.phar	/^$this->p4Stream = $stream;$/;"	v
p4Stream	composer.phar	/^$this->p4Stream = '\/\/' . $this->p4Depot . '\/' . $this->p4Branch;$/;"	v
p4Stream	composer.phar	/^$this->p4Stream = '\/\/' . $this->p4Depot;$/;"	v
p4Stream	composer.phar	/^protected $p4Stream;$/;"	v
p4SyncCommand	composer.phar	/^$p4SyncCommand = $p4SyncCommand . '@' . $sourceReference;$/;"	v
p4SyncCommand	composer.phar	/^$p4SyncCommand = $this->generateP4Command('sync -f ');$/;"	v
p4User	composer.phar	/^$this->p4User = $repoConfig['p4user'];$/;"	v
p4User	composer.phar	/^$this->p4User = $this->getP4variable('P4USER');$/;"	v
p4User	composer.phar	/^$this->p4User = $this->io->ask('Enter P4 User:');$/;"	v
p4User	composer.phar	/^$this->p4User = $user;$/;"	v
p4User	composer.phar	/^protected $p4User;$/;"	v
p4clientSpec	composer.phar	/^$p4clientSpec = $this->path . '\/' . $this->getClient() . '.p4.spec';$/;"	v
package	composer.phar	/^ $package = $this->createPackage($version, 'Composer\\Package\\Package');$/;"	v
package	composer.phar	/^ $package = reset($candidates);$/;"	v
package	composer.phar	/^$package = $candidate;$/;"	v
package	composer.phar	/^$package = $composer->getPackage();$/;"	v
package	composer.phar	/^$package = $io->askAndValidate($/;"	v
package	composer.phar	/^$package = $loader->load($localConfig);$/;"	v
package	composer.phar	/^$package = $loader->load($package);$/;"	v
package	composer.phar	/^$package = $loader->load($packageData);$/;"	v
package	composer.phar	/^$package = $matches[(int) $selection];$/;"	v
package	composer.phar	/^$package = $op->getPackage();$/;"	v
package	composer.phar	/^$package = $op->getTargetPackage();$/;"	v
package	composer.phar	/^$package = $operation->getPackage();$/;"	v
package	composer.phar	/^$package = $operation->getTargetPackage();$/;"	v
package	composer.phar	/^$package = $operation['package'];$/;"	v
package	composer.phar	/^$package = $package->getAliasOf();$/;"	v
package	composer.phar	/^$package = $packageQueue->dequeue();$/;"	v
package	composer.phar	/^$package = $pool->literalToPackage($literal);$/;"	v
package	composer.phar	/^$package = $pool->literalToPackage($package);$/;"	v
package	composer.phar	/^$package = $repository->findPackage($name, $constraint);$/;"	v
package	composer.phar	/^$package = $this->composer->getPackage();$/;"	v
package	composer.phar	/^$package = $this->getComposer()->getPackage();$/;"	v
package	composer.phar	/^$package = $this->getComposerInformation($file);$/;"	v
package	composer.phar	/^$package = $this->literalToPackage($literal);$/;"	v
package	composer.phar	/^$package = $this->loader->load($data, 'Composer\\Package\\CompletePackage');$/;"	v
package	composer.phar	/^$package = $this->loader->load($package);$/;"	v
package	composer.phar	/^$package = $this->loader->load($packageData);$/;"	v
package	composer.phar	/^$package = $this->loader->load($this->config, $class);$/;"	v
package	composer.phar	/^$package = $this->pool->literalToPackage($literal);$/;"	v
package	composer.phar	/^$package = $this->selectPackage($io, $packageName, $version);$/;"	v
package	composer.phar	/^$package = $versionSelector->findBestCandidate($name, $packageVersion, $phpVersion);$/;"	v
package	composer.phar	/^$package = $versionSelector->findBestCandidate($name, null, $phpVersion);$/;"	v
package	composer.phar	/^$package = $workQueue->dequeue();$/;"	v
package	composer.phar	/^$package = JsonFile::parseJson($json, $composerFile);$/;"	v
package	composer.phar	/^$package = JsonFile::parseJson($json, $composerFilePath);$/;"	v
package	composer.phar	/^$package = array_pop($queue);$/;"	v
package	composer.phar	/^$package = new $class($config['name'], $version, $config['version']);$/;"	v
package	composer.phar	/^$package = new AliasPackage($package, $aliasNormalized, preg_replace('{(\\.9{7})+}', '.x', $aliasNormalized));$/;"	v
package	composer.phar	/^$package = new CompletePackage($composerPackageName, $normalizedVersion, $version);$/;"	v
package	composer.phar	/^$package = new CompletePackage($override['name'], $version, $override['version']);$/;"	v
package	composer.phar	/^$package = new RootAliasPackage($package, $aliasNormalized, preg_replace('{(\\.9{7})+}', '.x', $aliasNormalized));$/;"	v
package	composer.phar	/^$package = null;$/;"	v
package	composer.phar	/^$package = reset($packages);$/;"	v
package	composer.phar	/^$package = simplexml_load_string(file_get_contents($this->combine($source, 'package.xml')));$/;"	v
package	composer.phar	/^$this->package = $package;$/;"	v
package	composer.phar	/^private $package;$/;"	v
package	composer.phar	/^protected $package;$/;"	v
package1	composer.phar	/^$package1 = $pool->literalToPackage($this->literals[0]);$/;"	v
package2	composer.phar	/^$package2 = $pool->literalToPackage($this->literals[1]);$/;"	v
packageArchive	composer.phar	/^$packageArchive = $this->getInstallPath($package).'\/'.pathinfo($package->getDistUrl(), PATHINFO_BASENAME);$/;"	v
packageByExactName	composer.phar	/^protected $packageByExactName = array();$/;"	v
packageById	composer.phar	/^public function packageById($id)$/;"	f
packageByName	composer.phar	/^protected $packageByName = array();$/;"	v
packageData	composer.phar	/^$packageData = $this->preProcess($driver, $data, $identifier);$/;"	v
packageDefinitions	composer.phar	/^$packageDefinitions = $reader->read($selectedRestVersion['baseUrl']);$/;"	v
packageExists	composer.phar	/^$packageExists = false;$/;"	v
packageExists	composer.phar	/^$packageExists = true;$/;"	v
packageId	composer.phar	/^$packageId = $package->getUniqueName();$/;"	v
packageId	composer.phar	/^$packageId = $package->id;$/;"	v
packageId	composer.phar	/^$packageId = abs($literal);$/;"	v
packageId	composer.phar	/^$packageId = abs($literalOrPackageId);$/;"	v
packageInfo	composer.phar	/^$packageInfo = $this->parsePackage($node);$/;"	v
packageInfo	composer.phar	/^$packageInfo = $this->readPackage($baseUrl, $packageName);$/;"	v
packageIsAlias	composer.phar	/^$packageIsAlias = $package instanceof AliasPackage;$/;"	v
packageListNames	composer.phar	/^$packageListNames = array_keys($bucket);$/;"	v
packageMap	composer.phar	/^ $packageMap = $this->buildPackageMap($installationManager, $mainPackage, $localRepo->getCanonicalPackages());$/;"	v
packageMap	composer.phar	/^ $packageMap = array(array($mainPackage, ''));$/;"	v
packageMap	composer.phar	/^$packageMap = $generator->buildPackageMap($this->composer->getInstallationManager(), $package, $packages);$/;"	v
packageName	composer.phar	/^$packageName = $fileName;$/;"	v
packageName	composer.phar	/^$packageName = $pool->literalToPackage($literal)->getName();$/;"	v
packageName	composer.phar	/^$packageName = $this->buildPackageName($name);$/;"	v
packageName	composer.phar	/^$packageName = $this->getPackageFilename($package);$/;"	v
packageName	composer.phar	/^$packageName = (string) $node;$/;"	v
packageName	composer.phar	/^$packageName = (string) $package->name;$/;"	v
packageName	composer.phar	/^$packageName = (string) $packageInfo->p->n;$/;"	v
packageName	composer.phar	/^$packageName = (string) $xml->n;$/;"	v
packageName	composer.phar	/^$packageName = strtolower($packageName);$/;"	v
packageName	composer.phar	/^$this->packageName = !empty($data['name']) ? $data['name'] : null;$/;"	v
packageName	composer.phar	/^$this->packageName = $packageName;$/;"	v
packageName	composer.phar	/^private $packageName;$/;"	v
packageName	composer.phar	/^protected $packageName;$/;"	v
packageNameToRegexp	composer.phar	/^private function packageNameToRegexp($whiteListedPattern)$/;"	f
packagePath	composer.phar	/^$packagePath = $archiveManager->archive($package, $format, $dest, $fileName);$/;"	v
packagePath	composer.phar	/^$this->packagePath = '\/' . trim($this->repoConfig['package-path'], '\/');$/;"	v
packagePath	composer.phar	/^protected $packagePath = '';$/;"	v
packageQueue	composer.phar	/^$packageQueue = new \\SplQueue;$/;"	v
packageRegex	composer.phar	/^ $packageRegex = str_replace('\/', '\\\\\\\\?\/', preg_quote($package));$/;"	v
packageSchemaVersion	composer.phar	/^$packageSchemaVersion = $package['version'];$/;"	v
packageVendorDir	composer.phar	/^$packageVendorDir = dirname($downloadPath);$/;"	v
packageVersion	composer.phar	/^$packageVersion = $requirements[0]['version'];$/;"	v
packageVersion	composer.phar	/^$packageVersion = (string) $package->release->version;$/;"	v
packageVersion	composer.phar	/^$packageVersion = (string) $package->version->release;$/;"	v
packages	composer.phar	/^ $packages = $this->pool->whatProvides($job['packageName'], $job['constraint']);$/;"	v
packages	composer.phar	/^ $packages = array();$/;"	v
packages	composer.phar	/^$packages = $input->getArgument('packages');$/;"	v
packages	composer.phar	/^$packages = $installMap + $updateMap;$/;"	v
packages	composer.phar	/^$packages = $lock['packages'];$/;"	v
packages	composer.phar	/^$packages = $platformRepo->findPackages($package, $version);$/;"	v
packages	composer.phar	/^$packages = $pool->whatProvides($link->getTarget(), $link->getConstraint());$/;"	v
packages	composer.phar	/^$packages = $pool->whatProvides($needle);$/;"	v
packages	composer.phar	/^$packages = $repo->findPackages($packageName, $version);$/;"	v
packages	composer.phar	/^$packages = $this->appendPackages($repo->getPackages(), array());$/;"	v
packages	composer.phar	/^$packages = $this->buildComposerPackages($channelInfo, $this->versionParser);$/;"	v
packages	composer.phar	/^$packages = $this->composer->getRepositoryManager()->getLocalRepository()->getCanonicalPackages();$/;"	v
packages	composer.phar	/^$packages = $this->fetchFile($url, $cacheKey, $hash);$/;"	v
packages	composer.phar	/^$packages = $this->file->read();$/;"	v
packages	composer.phar	/^$packages = $this->filterRequiredPackages($repo, $root);$/;"	v
packages	composer.phar	/^$packages = $this->getPackages();$/;"	v
packages	composer.phar	/^$packages = $this->groupLiteralsByNamePreferInstalled($pool, $installedMap, $literals);$/;"	v
packages	composer.phar	/^$packages = $this->pool->whatProvides($job['packageName'], $job['constraint']);$/;"	v
packages	composer.phar	/^$packages = $this->pool->whatProvides($job['packageName'], $job['constraint'], true);$/;"	v
packages	composer.phar	/^$packages = $this->whatProvides(new Pool('dev'), $providerName);$/;"	v
packages	composer.phar	/^$packages = array();$/;"	v
packages	composer.phar	/^$packages = array_filter($/;"	v
packages	composer.phar	/^$packages = array_merge($packages, $repository->findPackages($name, $constraint));$/;"	v
packages	composer.phar	/^$packages = array_merge($packages, $this->loadIncludes($includedData));$/;"	v
packages	composer.phar	/^$packages = array_merge($require, $requireDev);$/;"	v
packages	composer.phar	/^$packages = json_decode($this->cache->read($cacheKey), true);$/;"	v
packages	composer.phar	/^$packages = new ArrayRepository();$/;"	v
packages	composer.phar	/^$this->packages = $packages;$/;"	v
packages	composer.phar	/^$this->packages = array();$/;"	v
packages	composer.phar	/^$this->packages = null;$/;"	v
packages	composer.phar	/^private $packages;$/;"	v
packages	composer.phar	/^protected $packages = array();$/;"	v
packages	composer.phar	/^protected $packages;$/;"	v
packagesByName	composer.phar	/^ $packagesByName = array();$/;"	v
padType	composer.phar	/^$this->padType = $padType;$/;"	v
padType	composer.phar	/^private $padType = STR_PAD_RIGHT;$/;"	v
paddingChar	composer.phar	/^$this->paddingChar = $paddingChar;$/;"	v
paddingChar	composer.phar	/^private $paddingChar = ' ';$/;"	v
pair	composer.phar	/^$pair = preg_replace('{^([^=: ]+)[=: ](.*)$}', '$1 $2', trim($pairs[$i]));$/;"	v
pairs	composer.phar	/^$pairs = array_values($pairs);$/;"	v
parameters	composer.phar	/^$this->parameters = $parameters;$/;"	v
parameters	composer.phar	/^private $parameters;$/;"	v
params	composer.phar	/^$params = array($/;"	v
params	composer.phar	/^$params = array();$/;"	v
parent	composer.phar	/^$this->parent = $parent;$/;"	v
parent	composer.phar	/^private $parent;$/;"	v
parse	composer.phar	/^protected function parse()$/;"	f
parse	composer.phar	/^public function parse($input, $flags = 0)$/;"	f
parse	composer.phar	/^public function parse($uri)$/;"	f
parse20VersionConstraint	composer.phar	/^private function parse20VersionConstraint(array $data)$/;"	f
parseArgument	composer.phar	/^private function parseArgument($token)$/;"	f
parseAuthorString	composer.phar	/^public function parseAuthorString($author)$/;"	f
parseAutoloads	composer.phar	/^public function parseAutoloads(array $packageMap, PackageInterface $mainPackage)$/;"	f
parseAutoloadsType	composer.phar	/^protected function parseAutoloadsType(array $packageMap, $type, PackageInterface $mainPackage)$/;"	f
parseConstraint	composer.phar	/^private function parseConstraint($constraint)$/;"	f
parseConstraints	composer.phar	/^public function parseConstraints($constraints)$/;"	f
parseError	composer.phar	/^protected function parseError($str, $hash)$/;"	f
parseGitAttributesLine	composer.phar	/^public function parseGitAttributesLine($line)$/;"	f
parseGitIgnoreLine	composer.phar	/^public function parseGitIgnoreLine($line)$/;"	f
parseHgIgnoreLine	composer.phar	/^public function parseHgIgnoreLine($line)$/;"	f
parseJson	composer.phar	/^public static function parseJson($json, $file = null)$/;"	f
parseLines	composer.phar	/^protected function parseLines(array $lines, $lineParser)$/;"	f
parseLinks	composer.phar	/^public function parseLinks($source, $sourceVersion, $description, $links)$/;"	f
parseLongOption	composer.phar	/^private function parseLongOption($token)$/;"	f
parseNameVersionPairs	composer.phar	/^public function parseNameVersionPairs(array $pairs)$/;"	f
parseNumericAliasPrefix	composer.phar	/^public function parseNumericAliasPrefix($branch)$/;"	f
parseOptions	composer.phar	/^$parseOptions = false;$/;"	v
parseOptions	composer.phar	/^$parseOptions = true;$/;"	v
parsePackage	composer.phar	/^private function parsePackage($packageInfo)$/;"	f
parsePattern	composer.phar	/^private function parsePattern($pattern)$/;"	f
parseShortOption	composer.phar	/^private function parseShortOption($token)$/;"	f
parseShortOptionSet	composer.phar	/^private function parseShortOptionSet($name)$/;"	f
parseStability	composer.phar	/^public static function parseStability($version)$/;"	f
parseVersion	composer.phar	/^private function parseVersion($version)$/;"	f
parsed	composer.phar	/^$parsed = $resolver->parse($uri);$/;"	v
parsed	composer.phar	/^$this->parsed = $this->tokens;$/;"	v
parsed	composer.phar	/^private $parsed;$/;"	v
parsedConstraint	composer.phar	/^$parsedConstraint = $this->versionParser->parseConstraints($constraint);$/;"	v
parsedConstraint	composer.phar	/^$parsedConstraint = $this->versionParser->parseConstraints($sourceVersion);$/;"	v
parser	composer.phar	/^ $parser = new VersionParser;$/;"	v
parser	composer.phar	/^$parser = new JsonParser();$/;"	v
parser	composer.phar	/^$parser = new VersionParser();$/;"	v
parser	composer.phar	/^$parser = new VersionParser;$/;"	v
parser	composer.phar	/^$this->parser = new SemverVersionParser();$/;"	v
parser	composer.phar	/^private $parser;$/;"	v
parts	composer.phar	/^ $parts = explode(':', $name, -1);$/;"	v
parts	composer.phar	/^$parts = array();$/;"	v
parts	composer.phar	/^$parts = explode("\/", $name, 2);$/;"	v
parts	composer.phar	/^$parts = explode(':', $name);$/;"	v
parts	composer.phar	/^$parts = preg_split('#\\s+#', $line);$/;"	v
pass	composer.phar	/^$pass = false;$/;"	v
pass	composer.phar	/^$pass = true;$/;"	v
password	composer.phar	/^$password = $this->getP4variable('P4PASSWD');$/;"	v
password	composer.phar	/^$password = $this->io->askAndHideAnswer('      Password: ');$/;"	v
password	composer.phar	/^$password = $this->io->askAndHideAnswer('Enter password for Perforce user ' . $this->getUser() . ': ');$/;"	v
password	composer.phar	/^$password = $this->queryP4Password();$/;"	v
past	composer.phar	/^$past = substr($this->matched, 0, strlen($this->matched) - strlen($this->match));$/;"	v
path	composer.phar	/^ $path = $package->getTargetDir() . '\/' . $path;$/;"	v
path	composer.phar	/^ $path = preg_quote(trim(strtr($path, '\\\\', '\/'), '\/'));$/;"	v
path	composer.phar	/^ $path = str_replace('\\\\*\\\\*', '.+?', $path);$/;"	v
path	composer.phar	/^$path = $basePath . '\/' . $path;$/;"	v
path	composer.phar	/^$path = $components['path'];$/;"	v
path	composer.phar	/^$path = $composer->getInstallationManager()->getInstallPath($package);$/;"	v
path	composer.phar	/^$path = $filesystem->normalizePath($filesystem->findShortestPath($basePath, $path, true));$/;"	v
path	composer.phar	/^$path = $filesystem->normalizePath($path);$/;"	v
path	composer.phar	/^$path = $i;$/;"	v
path	composer.phar	/^$path = $identifier;$/;"	v
path	composer.phar	/^$path = $match[1];$/;"	v
path	composer.phar	/^$path = $relativePath;$/;"	v
path	composer.phar	/^$path = $this->incrementPath($path, $i);$/;"	v
path	composer.phar	/^$path = $this->isDir() ? $this->current()->getRelativePathname() : $this->current()->getRelativePath();$/;"	v
path	composer.phar	/^$path = $this->normalizePath($path);$/;"	v
path	composer.phar	/^$path = '\/' . $path;$/;"	v
path	composer.phar	/^$path = Finder::create()->files()->followLinks()->name('\/\\.(php|inc|hh)$\/')->in($path);$/;"	v
path	composer.phar	/^$path = array(new \\SplFileInfo($path));$/;"	v
path	composer.phar	/^$path = explode('\/', $parsed['fragment']);$/;"	v
path	composer.phar	/^$path = ltrim(preg_replace('{^'.$targetDir.'}', '', ltrim($path, '\\\\\/')), '\\\\\/');$/;"	v
path	composer.phar	/^$path = preg_replace('{^(?:file:\/\/\/([a-z])\/)}i', 'file:\/\/$1:\/', $path);$/;"	v
path	composer.phar	/^$path = preg_replace('|((?<!\\.)\\.\/)*|', '', $path);$/;"	v
path	composer.phar	/^$path = preg_replace('|\/\/|', '\/', $path);$/;"	v
path	composer.phar	/^$path = preg_replace('|^\/?(\\.\\.\/(\\.\/)*)*|', '', $relativePath);$/;"	v
path	composer.phar	/^$path = realpath($this->installationManager->getInstallPath($package));$/;"	v
path	composer.phar	/^$path = realpath($url) . '\/';$/;"	v
path	composer.phar	/^$path = rtrim(realpath($basePath) . '\/' . implode('\/', $removed), '\/');$/;"	v
path	composer.phar	/^$path = str_replace('%hash%', $hash, key($json['provider-includes']));$/;"	v
path	composer.phar	/^$path = str_replace('\\\\', '\/', $path);$/;"	v
path	composer.phar	/^$path = str_replace('\\\\*', '[^\/]+?', $path);$/;"	v
path	composer.phar	/^$path = strtok(realpath($composer->getInstallationManager()->getInstallPath($package)), "\\r\\n");$/;"	v
path	composer.phar	/^$path = strtr($path, '\\\\', '\/');$/;"	v
path	composer.phar	/^$path = strtr($path, array('~1' => '\/', '~0' => '~', '%25' => '%'));$/;"	v
path	composer.phar	/^$path = substr($path, 1);$/;"	v
path	composer.phar	/^$path = substr($path, strlen($prefix));$/;"	v
path	composer.phar	/^$path = substr($path, strlen($vendorPath));$/;"	v
path	composer.phar	/^$path = substr($relativePath, 1);$/;"	v
path	composer.phar	/^$this->path = $path;$/;"	v
path	composer.phar	/^private $path;$/;"	v
path	composer.phar	/^protected $path;$/;"	v
path	composer.phar	/^public function path($pattern)$/;"	f
pathCode	composer.phar	/^$pathCode = $this->getPathCode($filesystem, $basePath, $vendorPath, $path).",\\n";$/;"	v
pathElement	composer.phar	/^$pathElement = array_shift($path);$/;"	v
pathElement	composer.phar	/^$pathElement = str_replace('~0', '~', $pathElement);$/;"	v
pathElement	composer.phar	/^$pathElement = str_replace('~1', '\/', $pathElement);$/;"	v
pathExt	composer.phar	/^$pathExt = getenv('PATHEXT');$/;"	v
paths	composer.phar	/^$paths = $this->shell->testCommand('uniq') ? $command->add('| uniq')->execute() : array_unique($command->execute());$/;"	v
paths	composer.phar	/^$paths = array();$/;"	v
paths	composer.phar	/^$this->paths = $paths;$/;"	v
paths	composer.phar	/^private $paths = array();$/;"	v
paths	composer.phar	/^protected $paths = array();$/;"	v
pattern	composer.phar	/^ $pattern = '#'.preg_replace('\/((?:\\\\\\\\\\\\\\\\)*)(\\\\\\\\?)#\/', '\\1\\2\\2\\\\#', $line).'#';$/;"	v
pattern	composer.phar	/^ $pattern = str_replace('\\\\'.$delimiter, $delimiter, $pattern);$/;"	v
pattern	composer.phar	/^$pattern = $task['from'];$/;"	v
pattern	composer.phar	/^$pattern = '#'.substr(Finder\\Glob::toRegex($line), 2, -1).'#';$/;"	v
pattern	composer.phar	/^$pattern = '{';$/;"	v
pattern	composer.phar	/^$pattern = new NoProxyPattern($_SERVER['no_proxy']);$/;"	v
pattern	composer.phar	/^$pattern = sprintf('{^\/?%s(\/\\*?)?$}', preg_quote($vendor));$/;"	v
pattern	composer.phar	/^$pattern = str_replace('[^\/]*', '.*', $pattern);$/;"	v
pattern	composer.phar	/^$pattern = substr($pattern, 0, -1);$/;"	v
pattern	composer.phar	/^$pattern = substr($pattern, 0, -2);$/;"	v
pattern	composer.phar	/^$pattern = substr($pattern, 1);$/;"	v
pattern	composer.phar	/^$pattern = substr($pattern, 2);$/;"	v
pattern	composer.phar	/^$this->pattern = $expr.$this->pattern;$/;"	v
pattern	composer.phar	/^$this->pattern = $pattern;$/;"	v
pattern	composer.phar	/^$this->pattern = preg_replace_callback('~[\\\\\\\\]*\\\\.~', $replace, $this->pattern);$/;"	v
pattern	composer.phar	/^private $pattern;$/;"	v
patternFromGlob	composer.phar	/^protected function patternFromGlob($line)$/;"	f
patternFromRegex	composer.phar	/^public function patternFromRegex($line)$/;"	f
patternMode	composer.phar	/^$this->patternMode = self::HG_IGNORE_GLOB;$/;"	v
patternMode	composer.phar	/^$this->patternMode = self::HG_IGNORE_REGEX;$/;"	v
patternMode	composer.phar	/^protected $patternMode;$/;"	v
patternRegexp	composer.phar	/^$patternRegexp = $this->packageNameToRegexp($whiteListedPattern);$/;"	v
patterns	composer.phar	/^$patterns = array();$/;"	v
pb	composer.phar	/^$pb = new ProcessBuilder();$/;"	v
pearExtractor	composer.phar	/^$pearExtractor = new PearPackageExtractor($packageArchive);$/;"	v
percent	composer.phar	/^$percent = (float) $this->current \/ $this->max;$/;"	v
percent	composer.phar	/^$percent = 0;$/;"	v
percent	composer.phar	/^$this->percent = $this->max ? (float) $this->step \/ $this->max : 0;$/;"	v
percent	composer.phar	/^$this->percent = 0.0;$/;"	v
percent	composer.phar	/^private $percent = 0.0;$/;"	v
perforce	composer.phar	/^$perforce = new Perforce($repoConfig, $port, $path, $process, $isWindows, $io);$/;"	v
perforce	composer.phar	/^$this->perforce = $perforce;$/;"	v
perforce	composer.phar	/^$this->perforce = Perforce::create($repoConfig, $this->getUrl(), $repoDir, $this->process, $this->io);$/;"	v
perforce	composer.phar	/^$this->perforce = Perforce::create($repoConfig, $url, $path, $this->process, $this->io);$/;"	v
perforce	composer.phar	/^$this->perforce = null;$/;"	v
perforce	composer.phar	/^protected $perforce;$/;"	v
performAction	composer.phar	/^ private function performAction(stdClass $yyval, $yytext, $yyleng, $yylineno, $yystate, &$tokens)$/;"	f
performAction	composer.phar	/^private function performAction($avoiding_name_collisions, $YY_START)$/;"	f
phar	composer.phar	/^ $phar = new \\Phar($newFilename);$/;"	v
phar	composer.phar	/^$phar = new \\PharData($target, null, null, static::$formats[$format]);$/;"	v
php	composer.phar	/^$php = $finder->find();$/;"	v
php	composer.phar	/^$php = new CompletePackage('php', $version, $prettyVersion);$/;"	v
php	composer.phar	/^$php = null;$/;"	v
php64	composer.phar	/^$php64 = new CompletePackage('php-64bit', $version, $prettyVersion);$/;"	v
phpConstraint	composer.phar	/^$phpConstraint = new Constraint('==', $this->getParser()->normalize($targetPhpVersion));$/;"	v
phpVersion	composer.phar	/^ $phpVersion = PHP_MAJOR_VERSION.'.'.PHP_MINOR_VERSION.'.'.PHP_RELEASE_VERSION;$/;"	v
phpVersion	composer.phar	/^$phpVersion = $this->repos->findPackage('php', '*')->getVersion();$/;"	v
phpVersion	composer.phar	/^$phpVersion = 'HHVM ' . HHVM_VERSION;$/;"	v
phpVersion	composer.phar	/^$phpVersion = 'PHP ' . PHP_MAJOR_VERSION . '.' . PHP_MINOR_VERSION . '.' . PHP_RELEASE_VERSION;$/;"	v
php_bin	composer.phar	/^$php_bin = $this->binDir . ($isWindows ? '\/composer-php.bat' : '\/composer-php');$/;"	v
php_bin	composer.phar	/^$php_bin = '\/usr\/bin\/env ' . $php_bin;$/;"	v
phpinfo	composer.phar	/^$phpinfo = ob_get_clean();$/;"	v
phrase	composer.phar	/^$phrase = trim(substr($result, $index3));$/;"	v
pipes	composer.phar	/^$this->pipes = array();$/;"	v
pipes	composer.phar	/^public $pipes = array();$/;"	v
pkgConstraint	composer.phar	/^$pkgConstraint = new Constraint('==', $candidateVersion);$/;"	v
pkgConstraint	composer.phar	/^$pkgConstraint = new Constraint('==', $package->getVersion());$/;"	v
placeholders	composer.phar	/^$placeholders = array($/;"	v
platformDevReqs	composer.phar	/^$platformDevReqs = $this->devMode ? $this->extractPlatformRequirements($this->package->getDevRequires()) : array();$/;"	v
platformOverrides	composer.phar	/^$platformOverrides = $composer->getConfig()->get('platform') ?: array();$/;"	v
platformOverrides	composer.phar	/^$platformOverrides = $this->config->get('platform') ?: array();$/;"	v
platformOverrides	composer.phar	/^$platformOverrides = $this->locker->getPlatformOverrides();$/;"	v
platformRepo	composer.phar	/^ $platformRepo = new PlatformRepository;$/;"	v
platformRepo	composer.phar	/^$platformRepo = new PlatformRepository(array(), $platformOverrides);$/;"	v
platformReqs	composer.phar	/^$platformReqs = $this->extractPlatformRequirements($this->package->getRequires());$/;"	v
platformReqs	composer.phar	/^$platformReqs = array();$/;"	v
plugin	composer.phar	/^$plugin = new $class();$/;"	v
pluginManager	composer.phar	/^$this->pluginManager = $manager;$/;"	v
pluginManager	composer.phar	/^private $pluginManager;$/;"	v
plugins	composer.phar	/^protected $plugins = array();$/;"	v
plural	composer.phar	/^$plural = (count($requireOverrides) > 1) ? 'are' : 'is';$/;"	v
pm	composer.phar	/^$pm = $this->createPluginManager($io, $composer, $globalComposer);$/;"	v
policy	composer.phar	/^ $policy = $this->createPolicy();$/;"	v
policy	composer.phar	/^$policy = $this->createPolicy();$/;"	v
policy	composer.phar	/^$policy = $this;$/;"	v
policy	composer.phar	/^$policy = new DefaultPolicy();$/;"	v
policy	composer.phar	/^$this->policy = $policy;$/;"	v
policy	composer.phar	/^private $policy;$/;"	v
policy	composer.phar	/^protected $policy;$/;"	v
pool	composer.phar	/^$pool = $this->createPool($withDevReqs, $installFromLock ? $lockedRepository : null);$/;"	v
pool	composer.phar	/^$pool = $this->createPool(true);$/;"	v
pool	composer.phar	/^$pool = new Pool($stability);$/;"	v
pool	composer.phar	/^$pool = new Pool('dev');$/;"	v
pool	composer.phar	/^$pool = new Pool();$/;"	v
pool	composer.phar	/^$pool = new Pool;$/;"	v
pool	composer.phar	/^$this->pool = $pool;$/;"	v
pool	composer.phar	/^$this->pool = new Pool($this->getMinimumStability($input));$/;"	v
pool	composer.phar	/^private $pool;$/;"	v
pool	composer.phar	/^protected $pool;$/;"	v
pop	composer.phar	/^public function pop(OutputFormatterStyleInterface $style = null)$/;"	f
popStack	composer.phar	/^private function popStack($n)$/;"	f
port	composer.phar	/^$port = 443;$/;"	v
port	composer.phar	/^$port = 80;$/;"	v
port	composer.phar	/^$port = parse_url($url, PHP_URL_PORT);$/;"	v
pos	composer.phar	/^ $pos = strrpos($contents, '?>');$/;"	v
pos	composer.phar	/^$pos = $match[1];$/;"	v
pos	composer.phar	/^$pos = 0;$/;"	v
pos	composer.phar	/^$pos = array_search(static::$availableOptions[$option], $this->options);$/;"	v
pos	composer.phar	/^$pos = strpos($option->getShortcut(), '|');$/;"	v
pos	composer.phar	/^$pos = strpos($ref, '@');$/;"	v
position	composer.phar	/^$position = 1;$/;"	v
position	composer.phar	/^$position = 2;$/;"	v
position	composer.phar	/^$position = 3;$/;"	v
position	composer.phar	/^$position = 4;$/;"	v
possibleBranches	composer.phar	/^$possibleBranches = array();$/;"	v
possibleConflicts	composer.phar	/^$possibleConflicts = $this->pool->whatProvides($link->getTarget(), $link->getConstraint());$/;"	v
possibleRequires	composer.phar	/^$possibleRequires = $this->pool->whatProvides($link->getTarget(), $link->getConstraint());$/;"	v
possibleRequires	composer.phar	/^$possibleRequires = $this->pool->whatProvides($link->getTarget(), $link->getConstraint(), true);$/;"	v
postData	composer.phar	/^$postData = array('downloads' => array());$/;"	v
potentialDuplicates	composer.phar	/^$potentialDuplicates = $this->rulesByHash[$rule->getHash()];$/;"	v
pre	composer.phar	/^$pre = str_replace("\\n", '', $this->getPastInput());$/;"	v
pre	composer.phar	/^$pre = strip_tags($matches[1]);$/;"	v
preErrorSymbol	composer.phar	/^$preErrorSymbol = $symbol; $/;"	v
preErrorSymbol	composer.phar	/^$preErrorSymbol = null;$/;"	v
preFileDownloadEvent	composer.phar	/^$preFileDownloadEvent = new PreFileDownloadEvent(PluginEvents::PRE_FILE_DOWNLOAD, $this->rfs, $filename);$/;"	v
preFileDownloadEvent	composer.phar	/^$preFileDownloadEvent = new PreFileDownloadEvent(PluginEvents::PRE_FILE_DOWNLOAD, $this->rfs, $processedUrl);$/;"	v
preProcess	composer.phar	/^protected function preProcess(VcsDriverInterface $driver, array $data, $identifier)$/;"	f
precision	composer.phar	/^$precision = abs(0.0000000001);$/;"	v
preferDist	composer.phar	/^$preferDist = $input->getOption('prefer-dist');$/;"	v
preferDist	composer.phar	/^$preferDist = false;$/;"	v
preferDist	composer.phar	/^$preferDist = true;$/;"	v
preferDist	composer.phar	/^$this->preferDist = $preferDist;$/;"	v
preferDist	composer.phar	/^$this->preferDist = (boolean) $preferDist;$/;"	v
preferDist	composer.phar	/^private $preferDist = false;$/;"	v
preferDist	composer.phar	/^protected $preferDist = false;$/;"	v
preferLowest	composer.phar	/^$preferLowest = $this->locker->getPreferLowest();$/;"	v
preferLowest	composer.phar	/^$preferLowest = $this->preferLowest;$/;"	v
preferLowest	composer.phar	/^$preferLowest = null;$/;"	v
preferLowest	composer.phar	/^$this->preferLowest = $preferLowest;$/;"	v
preferLowest	composer.phar	/^$this->preferLowest = (boolean) $preferLowest;$/;"	v
preferLowest	composer.phar	/^private $preferLowest;$/;"	v
preferLowest	composer.phar	/^protected $preferLowest = false;$/;"	v
preferSource	composer.phar	/^$preferSource = $input->getOption('prefer-source') || ($keepVcsRequiresPreferSource && $input->getOption('keep-vcs'));$/;"	v
preferSource	composer.phar	/^$preferSource = $input->getOption('prefer-source');$/;"	v
preferSource	composer.phar	/^$preferSource = false;$/;"	v
preferSource	composer.phar	/^$preferSource = null !== $preferSource ? $preferSource : $this->preferSource;$/;"	v
preferSource	composer.phar	/^$preferSource = true;$/;"	v
preferSource	composer.phar	/^$this->preferSource = $preferSource;$/;"	v
preferSource	composer.phar	/^$this->preferSource = (boolean) $preferSource;$/;"	v
preferSource	composer.phar	/^private $preferSource = false;$/;"	v
preferSource	composer.phar	/^protected $preferSource = false;$/;"	v
preferStable	composer.phar	/^$preferStable = $this->locker->getPreferStable();$/;"	v
preferStable	composer.phar	/^$preferStable = $this->preferStable || $this->package->getPreferStable();$/;"	v
preferStable	composer.phar	/^$preferStable = null;$/;"	v
preferStable	composer.phar	/^$this->preferStable = $preferStable;$/;"	v
preferStable	composer.phar	/^$this->preferStable = (boolean) $preferStable;$/;"	v
preferStable	composer.phar	/^private $preferStable;$/;"	v
preferStable	composer.phar	/^protected $preferStable = false;$/;"	v
prefix	composer.phar	/^$prefix = $match[1];$/;"	v
prefix	composer.phar	/^$prefix = '';$/;"	v
prefix	composer.phar	/^$prefix = ($literal > 0 ? 'install' : 'don\\'t install');$/;"	v
prefix	composer.phar	/^$prefix = ($literal > 0 ? 'keep' : 'remove');$/;"	v
prefix	composer.phar	/^$prefix = function ($requirement) {$/;"	v
prefix	composer.phar	/^$this->prefix = is_array($prefix) ? $prefix : array($prefix);$/;"	v
prefix	composer.phar	/^private $prefix = array();$/;"	v
prefixDirsPsr4	composer.phar	/^    private $prefixDirsPsr4 = array();$/;"	v
prefixDirsPsr4	composer.phar	/^private $prefixDirsPsr4 = array();$/;"	v
prefixLengthsPsr4	composer.phar	/^    private $prefixLengthsPsr4 = array();$/;"	v
prefixLengthsPsr4	composer.phar	/^ private $prefixLengthsPsr4 = array();$/;"	v
prefixes	composer.phar	/^$prefixes = implode(', ', array_map(function ($prefix) {$/;"	v
prefixesPsr0	composer.phar	/^    private $prefixesPsr0 = array();$/;"	v
prefixesPsr0	composer.phar	/^ private $prefixesPsr0 = array();$/;"	v
pregMatch	composer.phar	/^protected function pregMatch($re, $str, &$matches = array())$/;"	f
prepared	composer.phar	/^$prepared = array();$/;"	v
prepend	composer.phar	/^public function prepend($expr)$/;"	f
prepend	composer.phar	/^public function prepend($expr);$/;"	f
prependAutoloader	composer.phar	/^$prependAutoloader = $config->get('prepend-autoloader') === false ? 'false' : 'true';$/;"	v
prettyConstraint	composer.phar	/^$prettyConstraint = $constraints;$/;"	v
prettyConstraint	composer.phar	/^$this->prettyConstraint = $prettyConstraint;$/;"	v
prettyConstraint	composer.phar	/^protected $prettyConstraint;$/;"	v
prettyName	composer.phar	/^$this->prettyName = $name;$/;"	v
prettyName	composer.phar	/^protected $prettyName;$/;"	v
prettyPrint	composer.phar	/^$prettyPrint = (bool) ($options & self::JSON_PRETTY_PRINT);$/;"	v
prettyString	composer.phar	/^$this->prettyString = $prettyString;$/;"	v
prettyString	composer.phar	/^protected $prettyString;$/;"	v
prettyVersion	composer.phar	/^$prettyVersion = $curlVersion['version'];$/;"	v
prettyVersion	composer.phar	/^$prettyVersion = $matches[1];$/;"	v
prettyVersion	composer.phar	/^$prettyVersion = $reflExt->getVersion();$/;"	v
prettyVersion	composer.phar	/^$prettyVersion = '0';$/;"	v
prettyVersion	composer.phar	/^$prettyVersion = HHVM_VERSION;$/;"	v
prettyVersion	composer.phar	/^$prettyVersion = ICONV_VERSION;$/;"	v
prettyVersion	composer.phar	/^$prettyVersion = INTL_ICU_VERSION;$/;"	v
prettyVersion	composer.phar	/^$prettyVersion = LIBXML_DOTTED_VERSION;$/;"	v
prettyVersion	composer.phar	/^$prettyVersion = LIBXSLT_DOTTED_VERSION;$/;"	v
prettyVersion	composer.phar	/^$prettyVersion = PHP_VERSION;$/;"	v
prettyVersion	composer.phar	/^$prettyVersion = PluginInterface::PLUGIN_API_VERSION;$/;"	v
prettyVersion	composer.phar	/^$prettyVersion = null;$/;"	v
prettyVersion	composer.phar	/^$prettyVersion = phpversion('uuid');$/;"	v
prettyVersion	composer.phar	/^$prettyVersion = preg_replace('#^([^~+-]+).*$#', '$1', HHVM_VERSION);$/;"	v
prettyVersion	composer.phar	/^$prettyVersion = preg_replace('#^([^~+-]+).*$#', '$1', PHP_VERSION);$/;"	v
prettyVersion	composer.phar	/^$prettyVersion = preg_replace('{^(\\S+).*}', '$1', PCRE_VERSION);$/;"	v
prettyVersion	composer.phar	/^$prettyVersion = preg_replace_callback('{^(?:OpenSSL\\s*)?([0-9.]+)([a-z]?).*}', function ($match) {$/;"	v
prettyVersion	composer.phar	/^$this->prettyVersion = $prettyVersion;$/;"	v
prettyVersion	composer.phar	/^protected $prettyVersion;$/;"	v
prevChar	composer.phar	/^$prevChar = substr($json, $i - 1, 1);$/;"	v
prevDir	composer.phar	/^$prevDir = getcwd();$/;"	v
prevPeriod	composer.phar	/^$prevPeriod = (int) ($this->current \/ $this->redrawFreq);$/;"	v
prevPeriod	composer.phar	/^$prevPeriod = (int) ($this->step \/ $this->redrawFreq);$/;"	v
previousDecision	composer.phar	/^$previousDecision = isset($this->decisionMap[$packageId]) ? $this->decisionMap[$packageId] : null;$/;"	v
printLicenses	composer.phar	/^protected function printLicenses(CompletePackageInterface $package)$/;"	f
printLinks	composer.phar	/^protected function printLinks(CompletePackageInterface $package, $linkType, $title = null)$/;"	f
printMeta	composer.phar	/^protected function printMeta(CompletePackageInterface $package, array $versions, RepositoryInterface $installedRepo)$/;"	f
printSuggestion	composer.phar	/^protected function printSuggestion($package, $suggestion, $reason)$/;"	f
printSuggestions	composer.phar	/^protected function printSuggestions($installed, $source, $suggestions)$/;"	f
printVersions	composer.phar	/^protected function printVersions(CompletePackageInterface $package, array $versions, RepositoryInterface $installedRepo)$/;"	f
priority	composer.phar	/^$priority = $this->getPriority($pool, $package);$/;"	v
priority	composer.phar	/^$priority = array_search($repo, $this->repositories, true);$/;"	v
priority	composer.phar	/^$priority = null;$/;"	v
problem	composer.phar	/^ $problem = new Problem($this->pool);$/;"	v
problem	composer.phar	/^$problem = new Problem($this->pool);$/;"	v
problemRules	composer.phar	/^$problemRules = $this->learnedPool[$learnedWhy];$/;"	v
problemRules	composer.phar	/^$problemRules = $this->learnedPool[$why];$/;"	v
problems	composer.phar	/^$this->problems = $problems;$/;"	v
problems	composer.phar	/^protected $problems = array();$/;"	v
problems	composer.phar	/^protected $problems;$/;"	v
proc	composer.phar	/^$proc = @proc_open('echo 1', array(array('pty'), array('pty'), array('pty')), $pipes);$/;"	v
process	composer.phar	/^$process = $cmd;$/;"	v
process	composer.phar	/^$process = $pb$/;"	v
process	composer.phar	/^$process = $this->run($output, $cmd, $error, $callback);$/;"	v
process	composer.phar	/^$process = ProcessBuilder::create($cmd)->getProcess();$/;"	v
process	composer.phar	/^$process = clone $this;$/;"	v
process	composer.phar	/^$process = new Process($cmd);$/;"	v
process	composer.phar	/^$process = new Process($command, $cwd, null, null, static::getTimeout());$/;"	v
process	composer.phar	/^$process = new Process($command, null, null, $password);$/;"	v
process	composer.phar	/^$process = new Process($script, $this->cwd, $env, $this->input, $this->timeout, $options);$/;"	v
process	composer.phar	/^$process = new ProcessExecutor($io);$/;"	v
process	composer.phar	/^$process = new ProcessExecutor();$/;"	v
process	composer.phar	/^$process = proc_open($this->join(), array(0 => array('pipe', 'r'), 1 => array('pipe', 'w'), 2 => array('pipe', 'w')), $pipes);$/;"	v
process	composer.phar	/^$process = proc_open('mode CON', $descriptorspec, $pipes, null, null, array('suppress_errors' => true));$/;"	v
process	composer.phar	/^$process = proc_open('stty -a | grep columns', $descriptorspec, $pipes, null, null, array('suppress_errors' => true));$/;"	v
process	composer.phar	/^$this->process = $process ?: new ProcessExecutor($io);$/;"	v
process	composer.phar	/^$this->process = $process ?: new ProcessExecutor;$/;"	v
process	composer.phar	/^$this->process = $process;$/;"	v
process	composer.phar	/^$this->process = new ProcessExecutor($io);$/;"	v
process	composer.phar	/^$this->process = null;$/;"	v
process	composer.phar	/^$this->process = proc_open($commandline, $descriptors, $this->processPipes->pipes, $this->cwd, $this->env, $this->options);$/;"	v
process	composer.phar	/^private $process;$/;"	v
process	composer.phar	/^private function process($value, $flags)$/;"	f
process	composer.phar	/^protected $process;$/;"	v
processDevPackages	composer.phar	/^private function processDevPackages($localRepo, $pool, $policy, $repositories, $installedRepo, $lockedRepository, $installFromLock, $withDevReqs, $task, array $operations = null)$/;"	f
processError	composer.phar	/^$processError = 'Failed to execute ' . $command . "\\n\\n" . $e->getMessage();$/;"	v
processError	composer.phar	/^$processError = 'Failed to execute ' . $command . "\\n\\n" . $this->process->getErrorOutput();$/;"	v
processError	composer.phar	/^$processError = null;$/;"	v
processExecutor	composer.phar	/^$processExecutor = new ProcessExecutor();$/;"	v
processExecutor	composer.phar	/^$this->processExecutor = $executor ?: new ProcessExecutor();$/;"	v
processExecutor	composer.phar	/^private $processExecutor;$/;"	v
processGitUrl	composer.phar	/^public static function processGitUrl($mirrorUrl, $packageName, $url, $type)$/;"	f
processHgUrl	composer.phar	/^public static function processHgUrl($mirrorUrl, $packageName, $url, $type)$/;"	f
processInformation	composer.phar	/^$this->processInformation = null;$/;"	v
processInformation	composer.phar	/^$this->processInformation = proc_get_status($this->process);$/;"	v
processInformation	composer.phar	/^private $processInformation;$/;"	v
processIsolation	composer.phar	/^$this->processIsolation = (bool) $processIsolation;$/;"	v
processIsolation	composer.phar	/^private $processIsolation = false;$/;"	v
processPackageUrls	composer.phar	/^private function processPackageUrls($pool, $policy, $localRepo, $repositories)$/;"	f
processPipes	composer.phar	/^$this->processPipes = UnixPipes::create($this, $this->input);$/;"	v
processPipes	composer.phar	/^$this->processPipes = WindowsPipes::create($this, $this->input);$/;"	v
processPipes	composer.phar	/^private $processPipes;$/;"	v
processTitle	composer.phar	/^$this->processTitle = $title;$/;"	v
processTitle	composer.phar	/^private $processTitle;$/;"	v
processUrl	composer.phar	/^protected function processUrl(PackageInterface $package, $url)$/;"	f
processUrl	composer.phar	/^public static function processUrl($mirrorUrl, $packageName, $version, $reference, $type)$/;"	f
processedUrl	composer.phar	/^$processedUrl = $this->processUrl($package, $url);$/;"	v
processedUrl	composer.phar	/^$this->processedUrl = $processedUrl;$/;"	v
processedUrl	composer.phar	/^private $processedUrl;$/;"	v
productions_	composer.phar	/^private $productions_ = array($/;"	v
progress	composer.phar	/^$this->progress = $progress;$/;"	v
progress	composer.phar	/^private $progress;$/;"	v
progress	composer.phar	/^public function progress($id, $buffer, $error = false, $prefix = 'OUT', $errorPrefix = 'ERR')$/;"	f
progressAdvance	composer.phar	/^public function progressAdvance($step = 1)$/;"	f
progressAdvance	composer.phar	/^public function progressAdvance($step = 1);$/;"	f
progressBar	composer.phar	/^$progressBar = parent::createProgressBar($max);$/;"	v
progressBar	composer.phar	/^$this->progressBar = $this->createProgressBar($max);$/;"	v
progressBar	composer.phar	/^$this->progressBar = null;$/;"	v
progressBar	composer.phar	/^private $progressBar;$/;"	v
progressChar	composer.phar	/^$this->progressChar = $char;$/;"	v
progressChar	composer.phar	/^private $progressChar = '>';$/;"	v
progressFinish	composer.phar	/^public function progressFinish()$/;"	f
progressFinish	composer.phar	/^public function progressFinish();$/;"	f
progressStart	composer.phar	/^public function progressStart($max = 0)$/;"	f
progressStart	composer.phar	/^public function progressStart($max = 0);$/;"	f
progression	composer.phar	/^$progression = round($bytesTransferred \/ $this->bytesMax * 100);$/;"	v
projectInstaller	composer.phar	/^$projectInstaller = new ProjectInstaller($directory, $dm);$/;"	v
prompt	composer.phar	/^$this->prompt = $prompt;$/;"	v
prompt	composer.phar	/^private $prompt = ' > ';$/;"	v
prompt	composer.phar	/^public static function prompt()$/;"	f
promptAuthAndRetry	composer.phar	/^protected function promptAuthAndRetry($httpStatus, $reason = null)$/;"	f
propagate	composer.phar	/^protected function propagate($level)$/;"	f
propagateIndex	composer.phar	/^$this->propagateIndex = 0;$/;"	v
propagateIndex	composer.phar	/^$this->propagateIndex = count($this->decisions);$/;"	v
propagateIndex	composer.phar	/^protected $propagateIndex;$/;"	v
propagateLiteral	composer.phar	/^public function propagateLiteral($decidedLiteral, $level, $decisions)$/;"	f
propagationStopped	composer.phar	/^$this->propagationStopped = true;$/;"	v
propagationStopped	composer.phar	/^private $propagationStopped = false;$/;"	v
properties	composer.phar	/^$properties = explode(';', rtrim($style, ';'));$/;"	v
property	composer.phar	/^$property = $this->getProperty($element, $i, new UndefinedConstraint());$/;"	v
property	composer.phar	/^$property = $tokens[$len][0] === '' ? '_empty_' : $tokens[$len][0];$/;"	v
protocol	composer.phar	/^$protocol = extension_loaded('openssl') ? 'https' : 'http';$/;"	v
protocols	composer.phar	/^$protocols = $this->config->get('github-protocols');$/;"	v
provided	composer.phar	/^ $provided = $rootPackage->getProvides();$/;"	v
provider	composer.phar	/^$provider = $this->rfs->getContents('packagist.org', $protocol . ':\/\/packagist.org\/'.$path, false);$/;"	v
provider	composer.phar	/^$provider = new Constraint('==', $versionParser->normalize($version));$/;"	v
providerCache	composer.phar	/^$this->providerCache = array();$/;"	v
providerCache	composer.phar	/^protected $providerCache = array();$/;"	v
providerIsAlias	composer.phar	/^$providerIsAlias = $provider instanceof AliasPackage;$/;"	v
providerListing	composer.phar	/^$this->providerListing = array();$/;"	v
providerListing	composer.phar	/^$this->providerListing = array_merge($this->providerListing, $data['providers']);$/;"	v
providerListing	composer.phar	/^protected $providerListing;$/;"	v
providerNoEqualOp	composer.phar	/^$providerNoEqualOp = str_replace('=', '', self::$transOpInt[$provider->operator]);$/;"	v
providerRepos	composer.phar	/^protected $providerRepos = array();$/;"	v
providers	composer.phar	/^ $providers = array();$/;"	v
providers	composer.phar	/^protected $providers = array();$/;"	v
providersByUid	composer.phar	/^protected $providersByUid = array();$/;"	v
providersUrl	composer.phar	/^$this->providersUrl = $this->canonicalizeUrl($data['providers-url']);$/;"	v
providersUrl	composer.phar	/^protected $providersUrl;$/;"	v
provides	composer.phar	/^$provides = $candidate->getProvides();$/;"	v
provides	composer.phar	/^$this->provides = $provides;$/;"	v
provides	composer.phar	/^$this->provides = $this->replaceSelfVersionDependencies($provides, 'provides');$/;"	v
provides	composer.phar	/^protected $provides = array();$/;"	v
provides	composer.phar	/^protected $provides;$/;"	v
proxy	composer.phar	/^ $proxy = parse_url(!empty($_SERVER['http_proxy']) ? $_SERVER['http_proxy'] : $_SERVER['HTTP_PROXY']);$/;"	v
proxy	composer.phar	/^$proxy = parse_url(!empty($_SERVER['https_proxy']) ? $_SERVER['https_proxy'] : $_SERVER['HTTPS_PROXY']);$/;"	v
proxyCode	composer.phar	/^$proxyCode = <<<PROXY$/;"	v
proxyURL	composer.phar	/^ $proxyURL = str_replace(array('http:\/\/', 'https:\/\/'), array('tcp:\/\/', 'ssl:\/\/'), $proxyURL);$/;"	v
proxyURL	composer.phar	/^$proxyURL = isset($proxy['scheme']) ? $proxy['scheme'] . ':\/\/' : '';$/;"	v
pruneRemoteAliases	composer.phar	/^protected function pruneRemoteAliases(Pool $pool, array $literals)$/;"	f
pruneToBestVersion	composer.phar	/^protected function pruneToBestVersion(Pool $pool, $literals)$/;"	f
pruneToHighestPriorityOrInstalled	composer.phar	/^protected function pruneToHighestPriorityOrInstalled(Pool $pool, array $installedMap, array $literals)$/;"	f
prunedQueue	composer.phar	/^$prunedQueue = $decisionQueue;$/;"	v
prunedQueue	composer.phar	/^$prunedQueue = array();$/;"	v
psr0	composer.phar	/^$psr0 = $this->parseAutoloadsType($packageMap, 'psr-0', $mainPackage);$/;"	v
psr4	composer.phar	/^$psr4 = $this->parseAutoloadsType($packageMap, 'psr-4', $mainPackage);$/;"	v
psr4File	composer.phar	/^$psr4File = <<<EOF$/;"	v
psrType	composer.phar	/^$psrType = $group['type'];$/;"	v
pty	composer.phar	/^$this->pty = (bool) $bool;$/;"	v
pty	composer.phar	/^$this->pty = false;$/;"	v
pty	composer.phar	/^private $pty;$/;"	v
ptyMode	composer.phar	/^$this->ptyMode = (bool) $ptyMode;$/;"	v
ptyMode	composer.phar	/^private $ptyMode;$/;"	v
publishErrors	composer.phar	/^$publishErrors = array();$/;"	v
purgePackages	composer.phar	/^protected function purgePackages(WritableRepositoryInterface $repo, Installer\\InstallationManager $im)$/;"	f
push	composer.phar	/^public function push(OutputFormatterStyleInterface $style)$/;"	f
pushUrl	composer.phar	/^$pushUrl = 'git@'.$match[1].':'.$match[2].'\/'.$match[3].'.git';$/;"	v
pushUrl	composer.phar	/^$pushUrl = 'https:\/\/' . $match[1] . '\/'.$match[2].'\/'.$match[3].'.git';$/;"	v
qtyAuthTries	composer.phar	/^protected $qtyAuthTries = 0;$/;"	v
queryP4Password	composer.phar	/^public function queryP4Password()$/;"	f
queryP4User	composer.phar	/^public function queryP4User()$/;"	f
question	composer.phar	/^$question = 'Would you like the <info>vendor<\/info> directory added to your <info>.gitignore<\/info> [<comment>yes<\/comment>]? ';$/;"	v
question	composer.phar	/^$question = 'Would you like to define your dependencies (require) interactively [<comment>yes<\/comment>]? ';$/;"	v
question	composer.phar	/^$question = 'Would you like to define your dev dependencies (require-dev) interactively [<comment>yes<\/comment>]? ';$/;"	v
question	composer.phar	/^$question = new ConfirmationQuestion($question, $default);$/;"	v
question	composer.phar	/^$question = new Question($question);$/;"	v
question	composer.phar	/^$question = new Question($question, $default);$/;"	v
question	composer.phar	/^$this->question = $question;$/;"	v
question	composer.phar	/^private $question;$/;"	v
questionHelper	composer.phar	/^$this->questionHelper = new SymfonyQuestionHelper();$/;"	v
questionHelper	composer.phar	/^private $questionHelper;$/;"	v
queue	composer.phar	/^$queue = array_map(function ($operation) {$/;"	v
quote	composer.phar	/^$quote = false;$/;"	v
quote	composer.phar	/^$quote = true;$/;"	v
quote	composer.phar	/^public static function quote($input)$/;"	f
r	composer.phar	/^ $r = array_merge($this->pipes, array('input' => $this->input));$/;"	v
r	composer.phar	/^$r = $this->next();$/;"	v
r	composer.phar	/^$r = $this->performAction($yyval, $yytext, $yyleng, $yylineno, $action[1], $this->vstack, $this->lstack);$/;"	v
r	composer.phar	/^$r = $this->pipes;$/;"	v
r	composer.phar	/^$r = null !== $this->input ? array('input' => $this->input) : null;$/;"	v
r	composer.phar	/^$r = null;$/;"	v
rarArchive	composer.phar	/^$rarArchive = RarArchive::open($file);$/;"	v
rate	composer.phar	/^$rate = $this->getGithubRateLimit('github.com');$/;"	v
rateLimit	composer.phar	/^$rateLimit = $this->getRateLimit($e->getHeaders());$/;"	v
rateLimit	composer.phar	/^$rateLimit = array($/;"	v
rateLimited	composer.phar	/^$rateLimited = false;$/;"	v
rateLimited	composer.phar	/^$rateLimited = true;$/;"	v
raw	composer.phar	/^public function raw()$/;"	f
rawData	composer.phar	/^$rawData = substr($result, $index);$/;"	v
rawVal	composer.phar	/^$rawVal = isset($rawContents[$key]) ? $rawContents[$key] : null;$/;"	v
read	composer.phar	/^$read = array();$/;"	v
read	composer.phar	/^protected function read($pipe, $name)$/;"	f
read	composer.phar	/^public function read($baseUrl)$/;"	f
read	composer.phar	/^public function read($file)$/;"	f
read	composer.phar	/^public function read($url)$/;"	f
read	composer.phar	/^public function read()$/;"	f
readAndWrite	composer.phar	/^public function readAndWrite($blocking, $close = false)$/;"	f
readAndWrite	composer.phar	/^public function readAndWrite($blocking, $close = false);$/;"	f
readBytes	composer.phar	/^private $readBytes = array($/;"	v
readCategoryPackages	composer.phar	/^private function readCategoryPackages($baseUrl, $categoryName)$/;"	f
readChannelPackages	composer.phar	/^private function readChannelPackages($baseUrl)$/;"	f
readCmd	composer.phar	/^$readCmd = $shell === 'csh' ? 'set mypassword = $<' : 'read -r mypassword';$/;"	v
readCmd	composer.phar	/^$readCmd = ($shell === 'csh') ? 'set mypassword = $<' : 'read -r mypassword';$/;"	v
readPackage	composer.phar	/^private function readPackage($baseUrl, $packageName)$/;"	f
readPackageReleaseDependencies	composer.phar	/^private function readPackageReleaseDependencies($baseUrl, $packageName, $version)$/;"	f
readPackageReleases	composer.phar	/^private function readPackageReleases($baseUrl, $packageName)$/;"	f
readPackages	composer.phar	/^private function readPackages($baseUrl)$/;"	f
readPipes	composer.phar	/^private function readPipes($blocking, $close)$/;"	f
reader	composer.phar	/^$reader = $this->readerMap[$selectedRestVersion['version']];$/;"	v
reader	composer.phar	/^$reader = new ChannelReader($this->rfs);$/;"	v
readerMap	composer.phar	/^$this->readerMap = array($/;"	v
readerMap	composer.phar	/^private $readerMap;$/;"	v
readline	composer.phar	/^private function readline()$/;"	f
realPackage	composer.phar	/^$realPackage = $package = parent::load($config, $class);$/;"	v
realPackage	composer.phar	/^$realPackage = $package->getAliasOf();$/;"	v
realUrl	composer.phar	/^$realUrl = realpath($url);$/;"	v
realpath	composer.phar	/^private function realpath($path)$/;"	f
reapplyChanges	composer.phar	/^protected function reapplyChanges($path)$/;"	f
reason	composer.phar	/^$reason = $decision[Decisions::DECISION_REASON];$/;"	v
reason	composer.phar	/^$reason = $operation->getReason();$/;"	v
reason	composer.phar	/^$reason = '*';$/;"	v
reason	composer.phar	/^$reason = ($isInstalled) ? Rule::RULE_INSTALLED_PACKAGE_OBSOLETES : Rule::RULE_PACKAGE_OBSOLETES;$/;"	v
reason	composer.phar	/^$reason = ($package->getName() == $provider->getName()) ? Rule::RULE_PACKAGE_SAME_NAME : Rule::RULE_PACKAGE_IMPLICIT_OBSOLETES;$/;"	v
reason	composer.phar	/^$reason = current($reasons);$/;"	v
reason	composer.phar	/^$this->reason = $reason;$/;"	v
reason	composer.phar	/^protected $reason;$/;"	v
reasonData	composer.phar	/^$this->reasonData = $reasonData;$/;"	v
reasonData	composer.phar	/^protected $reasonData;$/;"	v
reasonSeen	composer.phar	/^protected $reasonSeen;$/;"	v
reasons	composer.phar	/^$reasons = call_user_func_array('array_merge', array_reverse($this->reasons));$/;"	v
reasons	composer.phar	/^protected $reasons = array();$/;"	v
recovering	composer.phar	/^$recovering = 0;$/;"	v
recovering	composer.phar	/^$recovering = 3; $/;"	v
redraw	composer.phar	/^$redraw = true;$/;"	v
redrawFreq	composer.phar	/^$this->redrawFreq = (int) $freq;$/;"	v
redrawFreq	composer.phar	/^private $redrawFreq = 1;$/;"	v
reduceBuffer	composer.phar	/^private function reduceBuffer($messages)$/;"	f
ref	composer.phar	/^$ref = $package->getSourceReference();$/;"	v
ref	composer.phar	/^$ref = $target->getSourceReference();$/;"	v
ref	composer.phar	/^$ref = '$ref';$/;"	v
ref	composer.phar	/^$ref = ProcessExecutor::escape($package->getSourceReference());$/;"	v
ref	composer.phar	/^$ref = ProcessExecutor::escape($target->getSourceReference());$/;"	v
refDoc	composer.phar	/^$refDoc = $splitRef[0];$/;"	v
refPath	composer.phar	/^$refPath = explode('\/', $splitRef[1]);$/;"	v
refPath	composer.phar	/^$refPath = null;$/;"	v
refSchema	composer.phar	/^$refSchema = $this->fetchRef($refDoc, $sourceUri);$/;"	v
refSchema	composer.phar	/^$refSchema = $this->resolveRefSegment($refSchema, $refPath);$/;"	v
refSchema	composer.phar	/^$refSchema = $this->rootSchema;$/;"	v
reference	composer.phar	/^$reference = preg_match('{^([a-f0-9]*|%reference%)$}', $reference) ? $reference : md5($reference);$/;"	v
references	composer.phar	/^ $references = $this->package->getReferences();$/;"	v
references	composer.phar	/^$references = $this->extractReferences($links, $references);$/;"	v
references	composer.phar	/^$references = $this->package->getReferences();$/;"	v
references	composer.phar	/^$references = array();$/;"	v
references	composer.phar	/^$this->references = $references;$/;"	v
references	composer.phar	/^protected $references = array();$/;"	v
reflExt	composer.phar	/^$reflExt = new \\ReflectionExtension($name);$/;"	v
reflected	composer.phar	/^$reflected = new \\ReflectionParameter($target, 0);$/;"	v
reflector	composer.phar	/^$reflector = new \\ReflectionExtension('intl');$/;"	v
regex	composer.phar	/^ $regex = '{^(\\s*\\{\\s*(?:'.self::$JSON_STRING.'\\s*:\\s*'.self::$JSON_VALUE.'\\s*,\\s*)*?)'.$/;"	v
regex	composer.phar	/^$regex = $expr->getRegex();$/;"	v
regex	composer.phar	/^$regex = $this->trueAnswerRegex;$/;"	v
regex	composer.phar	/^$regex = '';$/;"	v
regex	composer.phar	/^$regex = '{(?:'.implode('|', preg_split('{\\s+}', $query)).')}i';$/;"	v
regex	composer.phar	/^$regex = '{^(\\s*\\{\\s*(?:'.self::$JSON_STRING.'\\s*:\\s*'.self::$JSON_VALUE.'\\s*,\\s*)*?)'.$/;"	v
regex	composer.phar	/^$regex = <<<REGEX$/;"	v
regex	composer.phar	/^$regex = FinderGlob::toRegex($this->pattern, $strictLeadingDot, $strictWildcardSlash, '');$/;"	v
regex	composer.phar	/^$regex = new \\RegexIterator($iterator, '\/^.+\\.(zip|phar)$\/i');$/;"	v
register	composer.phar	/^    public function register($prepend = false)$/;"	f
register	composer.phar	/^public function register($format, DescriptorInterface $descriptor)$/;"	f
register	composer.phar	/^public function register($name)$/;"	f
register	composer.phar	/^public function register($prepend = false)$/;"	f
register	composer.phar	/^public static function register(IOInterface $io = null)$/;"	f
registerPackage	composer.phar	/^public function registerPackage(PackageInterface $package, $failOnMissingClasses = false)$/;"	f
registeredPlugins	composer.phar	/^protected $registeredPlugins = array();$/;"	v
relTarget	composer.phar	/^$relTarget = substr($to, strlen($commonPath));$/;"	v
relativePath	composer.phar	/^ $relativePath = $traverser.('' !== $endPathRemainder ? $endPathRemainder.'\/' : '');$/;"	v
relativePath	composer.phar	/^$relativePath = $this->findShortestPath($link, $target);$/;"	v
relativePath	composer.phar	/^$relativePath = empty($installPath) ? (empty($path) ? '.' : $path) : $installPath.'\/'.$path;$/;"	v
relativePath	composer.phar	/^$relativePath = preg_replace($/;"	v
relativePath	composer.phar	/^$relativePath = self::normalizePath($relativePath);$/;"	v
relativePath	composer.phar	/^$this->relativePath = $relativePath;$/;"	v
relativePath	composer.phar	/^private $relativePath;$/;"	v
relativePathname	composer.phar	/^$this->relativePathname = $relativePathname;$/;"	v
relativePathname	composer.phar	/^private $relativePathname;$/;"	v
relativeSymlink	composer.phar	/^public function relativeSymlink($target, $link)$/;"	f
release	composer.phar	/^public function release()$/;"	f
releaseDate	composer.phar	/^$this->releaseDate = $releaseDate;$/;"	v
releaseDate	composer.phar	/^protected $releaseDate;$/;"	v
releaseNodes	composer.phar	/^$releaseNodes = $package->xpath('ns:phprelease');$/;"	v
releaseStability	composer.phar	/^$releaseStability = (string) $node->s;$/;"	v
releaseVersion	composer.phar	/^$releaseVersion = (string) $node->v;$/;"	v
releases	composer.phar	/^$releases = array();$/;"	v
releases	composer.phar	/^$this->releases = $releases;$/;"	v
releases	composer.phar	/^private $releases;$/;"	v
releasesInfo	composer.phar	/^$releasesInfo = $packageInfo->xpath('ns:a\/ns:r');$/;"	v
relevantContent	composer.phar	/^$relevantContent = array();$/;"	v
relevantKeys	composer.phar	/^$relevantKeys = array($/;"	v
reload	composer.phar	/^public function reload()$/;"	f
reload	composer.phar	/^public function reload();$/;"	f
remaining	composer.phar	/^$remaining = $width - $nameLength - $versionLength - 4;$/;"	v
remaining	composer.phar	/^$remaining = 0;$/;"	v
remaining	composer.phar	/^$remaining = round((time() - $bar->getStartTime()) \/ $bar->getProgress() * ($bar->getMaxSteps() - $bar->getProgress()));$/;"	v
remoteFilename	composer.phar	/^$remoteFilename = $baseUrl . (preg_match('{^[0-9a-f]{40}$}', $updateVersion) ? '\/composer.phar' : "\/download\/{$updateVersion}\/composer.phar");$/;"	v
remoteFilesystem	composer.phar	/^$remoteFilesystem = new RemoteFilesystem($io, $config);$/;"	v
remoteFilesystem	composer.phar	/^$this->remoteFilesystem = $remoteFilesystem ?: new RemoteFilesystem($io, $config);$/;"	v
remoteFilesystem	composer.phar	/^protected $remoteFilesystem;$/;"	v
remove	composer.phar	/^public function remove($file)$/;"	f
remove	composer.phar	/^public function remove($files)$/;"	f
remove	composer.phar	/^public function remove($packageName, ConstraintInterface $constraint = null)$/;"	f
remove	composer.phar	/^public function remove()$/;"	f
remove	composer.phar	/^public function remove(PackageInterface $package, $path)$/;"	f
remove	composer.phar	/^public function remove(PackageInterface $package, $path);$/;"	f
remove	composer.phar	/^public function remove(PackageInterface $package, $targetDir)$/;"	f
removeAdapters	composer.phar	/^public function removeAdapters()$/;"	f
removeBinaries	composer.phar	/^protected function removeBinaries(PackageInterface $package)$/;"	f
removeCode	composer.phar	/^protected function removeCode(PackageInterface $package)$/;"	f
removeConfigSetting	composer.phar	/^public function removeConfigSetting($name)$/;"	f
removeConfigSetting	composer.phar	/^public function removeConfigSetting($name);$/;"	f
removeDirectory	composer.phar	/^public function removeDirectory($directory)$/;"	f
removeDirectoryPhp	composer.phar	/^public function removeDirectoryPhp($directory)$/;"	f
removeFiles	composer.phar	/^private function removeFiles()$/;"	f
removeInstaller	composer.phar	/^public function removeInstaller(InstallerInterface $installer)$/;"	f
removeKey	composer.phar	/^$removeKey = $input->getOption('dev') ? 'require' : 'require-dev';$/;"	v
removeLink	composer.phar	/^public function removeLink($type, $name)$/;"	f
removeLink	composer.phar	/^public function removeLink($type, $name);$/;"	f
removeOption	composer.phar	/^public function removeOption($option)$/;"	f
removePackage	composer.phar	/^public function removePackage(PackageInterface $package)$/;"	f
removePackage	composer.phar	/^public function removePackage(PackageInterface $package);$/;"	f
removeRepository	composer.phar	/^public function removeRepository($name)$/;"	f
removeRepository	composer.phar	/^public function removeRepository($name);$/;"	f
removeSubNode	composer.phar	/^public function removeSubNode($mainNode, $name)$/;"	f
removed	composer.phar	/^$removed = array();$/;"	v
removedUnstablePackages	composer.phar	/^ $removedUnstablePackages = array();$/;"	v
rename	composer.phar	/^public function rename($origin, $target, $overwrite = false)$/;"	f
rename	composer.phar	/^public function rename($source, $target)$/;"	f
render	composer.phar	/^public function render()$/;"	f
render	composer.phar	/^public function render();$/;"	f
render	composer.phar	/^public function render(OutputInterface $output)$/;"	f
renderCell	composer.phar	/^private function renderCell(array $row, $column, $cellFormat)$/;"	f
renderColumnSeparator	composer.phar	/^private function renderColumnSeparator()$/;"	f
renderException	composer.phar	/^public function renderException($e, $output)$/;"	f
renderException	composer.phar	/^public function renderException($exception, $output)$/;"	f
renderPattern	composer.phar	/^public function renderPattern()$/;"	f
renderPattern	composer.phar	/^public function renderPattern();$/;"	f
renderRow	composer.phar	/^private function renderRow(array $row, $cellFormat)$/;"	f
renderRowSeparator	composer.phar	/^private function renderRowSeparator()$/;"	f
replace	composer.phar	/^ $replace = array();$/;"	v
replace	composer.phar	/^$replace = 0 === substr_count($subject, '\\\\') % 2;$/;"	v
replace	composer.phar	/^$replace = function ($subject) use ($replacement) {$/;"	v
replaceJokers	composer.phar	/^public function replaceJokers($replacement)$/;"	f
replaceSelfVersionDependencies	composer.phar	/^protected function replaceSelfVersionDependencies(array $links, $linkType)$/;"	f
replaceVersion	composer.phar	/^public function replaceVersion($version, $prettyVersion)$/;"	f
replacement	composer.phar	/^$replacement = ($package->getReplacementPackage() !== null)$/;"	v
replacement	composer.phar	/^$replacement = (is_string($package->getReplacementPackage()))$/;"	v
replacements	composer.phar	/^$replacements = array($/;"	v
replacements	composer.phar	/^$replacements = array();$/;"	v
replaces	composer.phar	/^$replaces = $candidate->getReplaces();$/;"	v
replaces	composer.phar	/^$replaces = array();$/;"	v
replaces	composer.phar	/^$this->replaces = $replaces;$/;"	v
replaces	composer.phar	/^$this->replaces = $this->replaceSelfVersionDependencies($replaces, 'replaces');$/;"	v
replaces	composer.phar	/^protected $replaces = array();$/;"	v
replaces	composer.phar	/^protected $replaces;$/;"	v
replaces	composer.phar	/^protected function replaces(PackageInterface $source, PackageInterface $target)$/;"	f
repo	composer.phar	/^$repo = $composer->getRepositoryManager()->getLocalRepository();$/;"	v
repo	composer.phar	/^$repo = $this->composer->getRepositoryManager()->getLocalRepository();$/;"	v
repo	composer.phar	/^$repo = new CompositeRepository($defaultRepos);$/;"	v
repo	composer.phar	/^$repo = new CompositeRepository(array_merge(array($localRepo), $composer->getRepositoryManager()->getRepositories()));$/;"	v
repo	composer.phar	/^$repo === $installedRepo$/;"	v
repoConfig	composer.phar	/^$repoConfig = $this->getRepoConfig($repository);$/;"	v
repoConfig	composer.phar	/^$repoConfig = null;$/;"	v
repoConfig	composer.phar	/^$this->repoConfig = $repoConfig;$/;"	v
repoConfig	composer.phar	/^protected $repoConfig;$/;"	v
repoData	composer.phar	/^$repoData = $this->loadDataFromServer();$/;"	v
repoData	composer.phar	/^$repoData = JsonFile::parseJson($this->getContents($repoDataUrl, true), $repoDataUrl);$/;"	v
repoData	composer.phar	/^$repoData = JsonFile::parseJson($this->getContents($resource), $resource);$/;"	v
repoDataUrl	composer.phar	/^$repoDataUrl = $this->getApiUrl() . '\/repos\/'.$this->owner.'\/'.$this->repository;$/;"	v
repoDir	composer.phar	/^$repoDir = $this->config->get('cache-vcs-dir') . '\/' . $this->depot;$/;"	v
repoDir	composer.phar	/^$repoDir = $this->repoDir;$/;"	v
repoDir	composer.phar	/^$this->repoDir = $cacheDir . '\/' . preg_replace('{[^a-z0-9]}i', '-', $this->url) . '\/';$/;"	v
repoDir	composer.phar	/^$this->repoDir = $this->config->get('cache-vcs-dir') . '\/' . preg_replace('{[^a-z0-9.]}i', '-', $this->url) . '\/';$/;"	v
repoDir	composer.phar	/^$this->repoDir = $this->url;$/;"	v
repoDir	composer.phar	/^protected $repoDir;$/;"	v
report	composer.phar	/^$report = error_get_last();$/;"	v
repos	composer.phar	/^ $this->repos = new CompositeRepository(array_merge($/;"	v
repos	composer.phar	/^$repos = $composer->getRepositoryManager()->getRepositories();$/;"	v
repos	composer.phar	/^$repos = $installedRepo = $platformRepo;$/;"	v
repos	composer.phar	/^$repos = $installedRepo = $this->getComposer()->getRepositoryManager()->getLocalRepository();$/;"	v
repos	composer.phar	/^$repos = $installedRepo = new ArrayRepository(array($package));$/;"	v
repos	composer.phar	/^$repos = $repo->getRepositories();$/;"	v
repos	composer.phar	/^$repos = $repos->getRepositories();$/;"	v
repos	composer.phar	/^$repos = $this->initializeRepos();$/;"	v
repos	composer.phar	/^$repos = Factory::createDefaultRepositories(null, $this->config, $this->manager);$/;"	v
repos	composer.phar	/^$repos = array($/;"	v
repos	composer.phar	/^$repos = array($repo);$/;"	v
repos	composer.phar	/^$repos = array($repos);$/;"	v
repos	composer.phar	/^$repos = array();$/;"	v
repos	composer.phar	/^$repos = new CompositeRepository($composer->getRepositoryManager()->getRepositories());$/;"	v
repos	composer.phar	/^$repos = new CompositeRepository($defaultRepos);$/;"	v
repos	composer.phar	/^$repos = new CompositeRepository(array_merge(array($installedRepo), $composer->getRepositoryManager()->getRepositories()));$/;"	v
repos	composer.phar	/^$repos = new CompositeRepository(array_merge(array($installedRepo), $defaultRepos));$/;"	v
repos	composer.phar	/^$this->repos = new CompositeRepository(array_merge($/;"	v
repos	composer.phar	/^protected $repos;$/;"	v
repositories	composer.phar	/^$repositories = $this->repositoryManager->getRepositories();$/;"	v
repositories	composer.phar	/^$repositories = null;$/;"	v
repositories	composer.phar	/^$this->repositories = $repositories;$/;"	v
repositories	composer.phar	/^$this->repositories = array();$/;"	v
repositories	composer.phar	/^$this->repositories = array_reverse($this->repositories, true);$/;"	v
repositories	composer.phar	/^$this->repositories = static::$defaultRepositories;$/;"	v
repositories	composer.phar	/^private $repositories = array();$/;"	v
repositories	composer.phar	/^private $repositories;$/;"	v
repositories	composer.phar	/^protected $repositories = array();$/;"	v
repositories	composer.phar	/^protected $repositories;$/;"	v
repository	composer.phar	/^$repository = $package->getRepository();$/;"	v
repository	composer.phar	/^$this->repository = $match[2];$/;"	v
repository	composer.phar	/^$this->repository = $match[4];$/;"	v
repository	composer.phar	/^$this->repository = $repoData['name'];$/;"	v
repository	composer.phar	/^$this->repository = $repository;$/;"	v
repository	composer.phar	/^$this->repository = null;$/;"	v
repository	composer.phar	/^protected $repository;$/;"	v
repositoryClasses	composer.phar	/^private $repositoryClasses = array();$/;"	v
repositoryManager	composer.phar	/^$this->repositoryManager = $manager;$/;"	v
repositoryManager	composer.phar	/^$this->repositoryManager = $repositoryManager;$/;"	v
repositoryManager	composer.phar	/^private $repositoryManager;$/;"	v
repositoryManager	composer.phar	/^protected $repositoryManager;$/;"	v
repositoryName	composer.phar	/^$repositoryName = parse_url($repoUrl, PHP_URL_HOST);$/;"	v
reqFullUriEnv	composer.phar	/^ $reqFullUriEnv = getenv('HTTPS_PROXY_REQUEST_FULLURI');$/;"	v
reqFullUriEnv	composer.phar	/^ $reqFullUriEnv = getenv('HTTP_PROXY_REQUEST_FULLURI');$/;"	v
reqVersion	composer.phar	/^ $reqVersion = preg_replace('{^([^,\\s@]+) as .+$}', '$1', $reqVersion);$/;"	v
reqVersion	composer.phar	/^$reqVersion = preg_replace('{^([^,\\s@]+) as .+$}', '$1', $reqVersion);$/;"	v
reqs	composer.phar	/^$reqs = $pkg->getRequires();$/;"	v
request	composer.phar	/^ $request = $this->createRequest($this->package, $platformRepo);$/;"	v
request	composer.phar	/^$request = new Request();$/;"	v
request	composer.phar	/^$this->request = $request;$/;"	v
request	composer.phar	/^private $request;$/;"	v
requestContent	composer.phar	/^protected function requestContent($origin, $path)$/;"	f
requestXml	composer.phar	/^protected function requestXml($origin, $path)$/;"	f
require	composer.phar	/^ $require = $this->getProperty($definition, 'requires');$/;"	v
require	composer.phar	/^ $require = isset($manifest['require']) ? $manifest['require'] : array();$/;"	v
requireDev	composer.phar	/^$requireDev = isset($manifest['require-dev']) ? $manifest['require-dev'] : array();$/;"	v
requireFilter	composer.phar	/^$requireFilter = $this->filterRequires[$name];$/;"	v
requireFilter	composer.phar	/^$requireFilter = new EmptyConstraint;$/;"	v
requireKey	composer.phar	/^$requireKey = $input->getOption('dev') ? 'require-dev' : 'require';$/;"	v
requireOverrides	composer.phar	/^$requireOverrides = array_intersect_key($manifest['require'], $manifest['require-dev']);$/;"	v
requirePackages	composer.phar	/^$requirePackages = $pool->whatProvides($require->getTarget());$/;"	v
requireProcessIsStarted	composer.phar	/^private function requireProcessIsStarted($functionName)$/;"	f
requireProcessIsTerminated	composer.phar	/^private function requireProcessIsTerminated($functionName)$/;"	f
requiredCount	composer.phar	/^$this->requiredCount = 0;$/;"	v
requiredCount	composer.phar	/^private $requiredCount;$/;"	v
requiredOs	composer.phar	/^$requiredOs = $releaseNode->installconditions && $releaseNode->installconditions->os && $releaseNode->installconditions->os->name ? (string) $releaseNode->installconditions->os->name : '';$/;"	v
requiredPackage	composer.phar	/^$requiredPackage = $this->lookupInstalledPackage($pool, $requireLink);$/;"	v
requiredPackageNames	composer.phar	/^$requiredPackageNames = array();$/;"	v
requiredVendor	composer.phar	/^$requiredVendor = substr($requiredPackage, 0, $pos);$/;"	v
requirements	composer.phar	/^$requirements = $parser->parseNameVersionPairs(array($packageName));$/;"	v
requirements	composer.phar	/^$requirements = $this->determineRequirements($input, $output, $input->getArgument('packages'), $phpVersion);$/;"	v
requirements	composer.phar	/^$requirements = $this->determineRequirements($input, $output, $input->getOption('require'));$/;"	v
requirements	composer.phar	/^$requirements = $this->formatRequirements($requirements);$/;"	v
requirements	composer.phar	/^$requirements = $this->loader->parseLinks($/;"	v
requirements	composer.phar	/^$requirements = $this->normalizeRequirements($requirements);$/;"	v
requirements	composer.phar	/^$requirements = array();$/;"	v
requirements	composer.phar	/^$requirements = array_merge($requirements, $devRequirements);$/;"	v
requirements	composer.phar	/^$requirements = json_decode($links, true);$/;"	v
requires	composer.phar	/^ $requires = array_keys($package->getRequires());$/;"	v
requires	composer.phar	/^$requires = $package->getRequires();$/;"	v
requires	composer.phar	/^$requires = $this->normalizeRequirements($requires);$/;"	v
requires	composer.phar	/^$requires = $this->package->getRequires();$/;"	v
requires	composer.phar	/^$requires = array();$/;"	v
requires	composer.phar	/^$requires = array_keys($package->getRequires());$/;"	v
requires	composer.phar	/^$requires = array_merge($/;"	v
requires	composer.phar	/^$requires = array_merge($requires, $this->package->getDevRequires());$/;"	v
requires	composer.phar	/^$this->requires = $requires;$/;"	v
requires	composer.phar	/^$this->requires = $this->replaceSelfVersionDependencies($require, 'requires');$/;"	v
requires	composer.phar	/^private $requires;$/;"	v
requires	composer.phar	/^protected $requires = array();$/;"	v
requires	composer.phar	/^protected $requires;$/;"	v
requiresComposer	composer.phar	/^$requiresComposer = $link->getConstraint();$/;"	v
requiresComposer	composer.phar	/^$requiresComposer = null;$/;"	v
res	composer.phar	/^$res = $this->doInstall($localRepo, $installedRepo, $platformRepo, $aliases, $this->devMode);$/;"	v
res	composer.phar	/^$res = array();$/;"	v
resArray	composer.phar	/^$resArray = explode(PHP_EOL, $result);$/;"	v
resBits	composer.phar	/^$resBits = explode(' ', $line);$/;"	v
reset	composer.phar	/^public function reset()$/;"	f
resetAdapterSelection	composer.phar	/^private function resetAdapterSelection()$/;"	f
resetComposer	composer.phar	/^public function resetComposer()$/;"	f
resetPackageIds	composer.phar	/^public function resetPackageIds()$/;"	f
resetProcessData	composer.phar	/^private function resetProcessData()$/;"	f
resetSolver	composer.phar	/^private function resetSolver()$/;"	f
resetToOffset	composer.phar	/^public function resetToOffset($offset)$/;"	f
resolve	composer.phar	/^public function resolve($schema, $sourceUri = null)$/;"	f
resolve	composer.phar	/^public function resolve($uri, $baseUri = null)$/;"	f
resolveArrayOfSchemas	composer.phar	/^public function resolveArrayOfSchemas($schema, $propertyName, $sourceUri)$/;"	f
resolveObjectOfSchemas	composer.phar	/^public function resolveObjectOfSchemas($schema, $propertyName, $sourceUri)$/;"	f
resolvePointer	composer.phar	/^public function resolvePointer($jsonSchema, $uri)$/;"	f
resolveProperty	composer.phar	/^public function resolveProperty($schema, $propertyName, $sourceUri)$/;"	f
resolveRef	composer.phar	/^public function resolveRef($schema, $sourceUri)$/;"	f
resolveRefSegment	composer.phar	/^protected function resolveRefSegment($data, $pathParts)$/;"	f
resolveSymlinkedDirectorySymlink	composer.phar	/^private function resolveSymlinkedDirectorySymlink($pathname)$/;"	f
resolved	composer.phar	/^$resolved = $this->resolveSymlinkedDirectorySymlink($directory);$/;"	v
resolved	composer.phar	/^$resolved = rtrim($pathname, '\/');$/;"	v
resolvedDirs	composer.phar	/^$resolvedDirs = array();$/;"	v
resolvedDirs	composer.phar	/^$resolvedDirs = array_merge($resolvedDirs, $glob);$/;"	v
resolvedUri	composer.phar	/^$resolvedUri = $fetchUri = $resolver->resolve($uri, $baseUri);$/;"	v
resolver	composer.phar	/^$resolver = new UriResolver();$/;"	v
resource	composer.phar	/^$resource = $path.'composer.json';$/;"	v
resource	composer.phar	/^$resource = $this->getApiUrl() . '\/repos\/'.$this->owner.'\/'.$this->repository.'\/commits\/'.urlencode($identifier);$/;"	v
resource	composer.phar	/^$resource = $this->getApiUrl() . '\/repos\/'.$this->owner.'\/'.$this->repository.'\/contents\/composer.json?ref='.urlencode($identifier);$/;"	v
resource	composer.phar	/^$resource = $this->getApiUrl() . '\/repos\/'.$this->owner.'\/'.$this->repository.'\/git\/refs\/heads?per_page=100';$/;"	v
resource	composer.phar	/^$resource = $this->getApiUrl() . '\/repos\/'.$this->owner.'\/'.$this->repository.'\/tags?per_page=100';$/;"	v
resource	composer.phar	/^$resource = $this->getNextPage();$/;"	v
resource	composer.phar	/^$resource = $this->getScheme() . ':\/\/api.bitbucket.org\/1.0\/repositories\/'.$this->owner.'\/'.$this->repository.'\/branches';$/;"	v
resource	composer.phar	/^$resource = $this->getScheme() . ':\/\/api.bitbucket.org\/1.0\/repositories\/'.$this->owner.'\/'.$this->repository.'\/changesets\/'.$identifier;$/;"	v
resource	composer.phar	/^$resource = $this->getScheme() . ':\/\/api.bitbucket.org\/1.0\/repositories\/'.$this->owner.'\/'.$this->repository.'\/tags';$/;"	v
resource	composer.phar	/^$resource = $this->getScheme() . ':\/\/api.bitbucket.org\/1.0\/repositories\/'.$this->owner.'\/'.$this->repository;$/;"	v
resource	composer.phar	/^$resource = $this->getScheme() . ':\/\/bitbucket.org\/'.$this->owner.'\/'.$this->repository.'\/raw\/'.$identifier.'\/composer.json';$/;"	v
resource	composer.phar	/^$resource = $this->getScheme() . ':\/\/bitbucket.org\/api\/1.0\/repositories\/'.$this->owner.'\/'.$this->repository.'\/branches';$/;"	v
resource	composer.phar	/^$resource = $this->getScheme() . ':\/\/bitbucket.org\/api\/1.0\/repositories\/'.$this->owner.'\/'.$this->repository.'\/changesets\/'.$identifier;$/;"	v
resource	composer.phar	/^$resource = $this->getScheme() . ':\/\/bitbucket.org\/api\/1.0\/repositories\/'.$this->owner.'\/'.$this->repository.'\/src\/'.$identifier.'\/composer.json';$/;"	v
resource	composer.phar	/^$resource = $this->getScheme() . ':\/\/bitbucket.org\/api\/1.0\/repositories\/'.$this->owner.'\/'.$this->repository.'\/tags';$/;"	v
resource	composer.phar	/^$resource = sprintf('%s:composer.json', ProcessExecutor::escape($identifier));$/;"	v
response	composer.phar	/^$response = curl_exec($ch);$/;"	v
response	composer.phar	/^$response = file_get_contents($uri);$/;"	v
response	composer.phar	/^$this->response = $response;$/;"	v
response	composer.phar	/^protected $response;$/;"	v
rest10reader	composer.phar	/^$rest10reader = new ChannelRest10Reader($rfs);$/;"	v
rest11reader	composer.phar	/^$rest11reader = new ChannelRest11Reader($rfs);$/;"	v
restart	composer.phar	/^public function restart($callback = null)$/;"	f
restore	composer.phar	/^$restore = function (&$v, $k) {$/;"	v
result	composer.phar	/^ $result = file_get_contents('compress.zlib:\/\/data:application\/octet-stream;base64,'.base64_encode($result));$/;"	v
result	composer.phar	/^ $result = rtrim($result);$/;"	v
result	composer.phar	/^$result = $choices[$result];$/;"	v
result	composer.phar	/^$result = $choices[$value];$/;"	v
result	composer.phar	/^$result = $dependencyReader->buildDependencyInfo($dependencyArray);$/;"	v
result	composer.phar	/^$result = $parser->lint($json);$/;"	v
result	composer.phar	/^$result = $this->askAndValidate($output, '> ', function ($picked) use ($choices, $errorMessage, $multiselect) {$/;"	v
result	composer.phar	/^$result = $this->buildSourceList10($children, $roles, $sourceDir, '', null, $packageName);$/;"	v
result	composer.phar	/^$result = $this->buildSourceList20($children, $roles, $sourceDir, '', null, $packageName);$/;"	v
result	composer.phar	/^$result = $this->commandResult;$/;"	v
result	composer.phar	/^$result = $this->get($this->originUrl, $this->fileUrl, $additionalOptions, $this->fileName, $this->progress);$/;"	v
result	composer.phar	/^$result = $this->getProcess()->execute($cmd, $output) === 0;$/;"	v
result	composer.phar	/^$result = $this->processExecutor->execute($command, $output);$/;"	v
result	composer.phar	/^$result = $this->processPipes->readAndWrite($blocking, $close);$/;"	v
result	composer.phar	/^$result = $value;$/;"	v
result	composer.phar	/^$result = '';$/;"	v
result	composer.phar	/^$result = ($this->isDisabled()) ? 'disabled(' : '(';$/;"	v
result	composer.phar	/^$result = (bool) file_put_contents($fileName, $result);$/;"	v
result	composer.phar	/^$result = @symlink($relativePath, $link);$/;"	v
result	composer.phar	/^$result = JsonFormatter::format($json, $unescapeUnicode, $unescapeSlashes);$/;"	v
result	composer.phar	/^$result = array();$/;"	v
result	composer.phar	/^$result = array_merge($result, $categoryPackages);$/;"	v
result	composer.phar	/^$result = array_merge($result, $deps);$/;"	v
result	composer.phar	/^$result = array_merge($result, $dirFiles);$/;"	v
result	composer.phar	/^$result = array_search($value, $choices);$/;"	v
result	composer.phar	/^$result = false;$/;"	v
result	composer.phar	/^$result = file_get_contents($fileUrl, false, $ctx);$/;"	v
result	composer.phar	/^$result = parent::doRun($input, $output);$/;"	v
result	composer.phar	/^$result = trim($this->commandResult);$/;"	v
result	composer.phar	/^$result = zlib_decode($result);$/;"	v
result	composer.phar	/^static $result;$/;"	v
results	composer.phar	/^$results = $repos->search(implode(' ', $input->getArgument('tokens')), $flags);$/;"	v
results	composer.phar	/^$results = JsonFile::parseJson($json, $url);$/;"	v
results	composer.phar	/^$results = array();$/;"	v
ret	composer.phar	/^ $ret = substr($ret, 0, $i);$/;"	v
ret	composer.phar	/^$ret = $matches[$ofs];$/;"	v
ret	composer.phar	/^$ret = $process->getExitCode();$/;"	v
ret	composer.phar	/^$ret = $this->application->run(new StringInput($command), $this->output);$/;"	v
ret	composer.phar	/^$ret = '';$/;"	v
ret	composer.phar	/^$ret = false;$/;"	v
ret	composer.phar	/^$ret = fgets($inputStream, 4096);$/;"	v
ret	composer.phar	/^$ret = strlen($ret) > 0 ? $ret : $question->getDefault();$/;"	v
ret	composer.phar	/^$ret = trim($ret);$/;"	v
ret	composer.phar	/^$ret = trim($this->autocomplete($output, $question, $inputStream));$/;"	v
ret	composer.phar	/^$ret = trim($this->getHiddenResponse($output, $inputStream));$/;"	v
retries	composer.phar	/^ $retries = 3;$/;"	v
retries	composer.phar	/^$retries = 3;$/;"	v
retrieve	composer.phar	/^public function retrieve($uri)$/;"	f
retrieve	composer.phar	/^public function retrieve($uri);$/;"	f
retrieve	composer.phar	/^public function retrieve($uri, $baseUri = null)$/;"	f
retrieveUri	composer.phar	/^protected function retrieveUri($uri)$/;"	f
retriever	composer.phar	/^$retriever = $this->getUriRetriever();$/;"	v
retry	composer.phar	/^$this->retry = false;$/;"	v
retry	composer.phar	/^$this->retry = true;$/;"	v
retry	composer.phar	/^private $retry;$/;"	v
retryAuthFailure	composer.phar	/^$this->retryAuthFailure = (bool) $additionalOptions['retry-auth-failure'];$/;"	v
retryAuthFailure	composer.phar	/^$this->retryAuthFailure = true;$/;"	v
retryAuthFailure	composer.phar	/^private $retryAuthFailure;$/;"	v
return	composer.phar	/^$return = 0;$/;"	v
return	composer.phar	/^$return = 1;$/;"	v
return	composer.phar	/^$return = array_unshift($array, '');$/;"	v
return	composer.phar	/^$return = false === $this->executeEventPhpScript($className, $methodName, $event) ? 1 : 0;$/;"	v
return	composer.phar	/^$return = false === call_user_func($callable, $event) ? 1 : 0;$/;"	v
returnCode	composer.phar	/^$returnCode = $this->archive($/;"	v
rev	composer.phar	/^$rev = $match[2];$/;"	v
rev	composer.phar	/^$rev = '';$/;"	v
revert	composer.phar	/^private function revert($level)$/;"	f
revertLast	composer.phar	/^public function revertLast()$/;"	f
rewind	composer.phar	/^public function rewind()$/;"	f
rewindable	composer.phar	/^private $rewindable;$/;"	v
rfs	composer.phar	/^$rfs = $preFileDownloadEvent->getRemoteFilesystem();$/;"	v
rfs	composer.phar	/^$this->rfs = $rfs ?: new RemoteFilesystem($io, $config);$/;"	v
rfs	composer.phar	/^$this->rfs = $rfs ?: new RemoteFilesystem($this->io, $config);$/;"	v
rfs	composer.phar	/^$this->rfs = $rfs;$/;"	v
rfs	composer.phar	/^$this->rfs = new RemoteFilesystem($io, $config);$/;"	v
rfs	composer.phar	/^$this->rfs = new RemoteFilesystem($this->io, $this->config, $this->options);$/;"	v
rfs	composer.phar	/^private $rfs;$/;"	v
rfs	composer.phar	/^protected $rfs;$/;"	v
ri	composer.phar	/^$ri = new RecursiveIteratorIterator($it, RecursiveIteratorIterator::CHILD_FIRST);$/;"	v
ri	composer.phar	/^$ri = new RecursiveIteratorIterator($it, RecursiveIteratorIterator::SELF_FIRST);$/;"	v
rm	composer.phar	/^ $rm = $this->createRepositoryManager($io, $config, $dispatcher);$/;"	v
rm	composer.phar	/^$rm = $factory->createRepositoryManager($io, $config);$/;"	v
rm	composer.phar	/^$rm = new RepositoryManager($io, $config, $eventDispatcher);$/;"	v
rmdir	composer.phar	/^public function rmdir($path)$/;"	f
rolesWithoutPackageNamePrefix	composer.phar	/^private static $rolesWithoutPackageNamePrefix = array('php', 'script', 'www');$/;"	v
rollback	composer.phar	/^protected function rollback(OutputInterface $output, $rollbackDir, $localFilename)$/;"	f
rollbackDir	composer.phar	/^$rollbackDir = $config->get('home');$/;"	v
rollbackVersion	composer.phar	/^$rollbackVersion = $this->getLastBackupVersion($rollbackDir);$/;"	v
root	composer.phar	/^$root = $composer->getPackage();$/;"	v
root	composer.phar	/^$this->root = rtrim($cacheDir, '\/\\\\') . '\/';$/;"	v
root	composer.phar	/^private $root;$/;"	v
rootAliasData	composer.phar	/^$rootAliasData = $this->rootAliases[$package->getName()][$package->getAliasOf()->getVersion()];$/;"	v
rootAliasData	composer.phar	/^$rootAliasData = $this->rootAliases[$package->getName()][$package->getVersion()];$/;"	v
rootAliases	composer.phar	/^$this->rootAliases = $rootAliases;$/;"	v
rootAliases	composer.phar	/^protected $rootAliases;$/;"	v
rootConstraints	composer.phar	/^$rootConstraints = array();$/;"	v
rootData	composer.phar	/^private $rootData;$/;"	v
rootIdentifier	composer.phar	/^$this->rootIdentifier = !empty($repoData['main_branch']) ? $repoData['main_branch'] : 'master';$/;"	v
rootIdentifier	composer.phar	/^$this->rootIdentifier = $match[1];$/;"	v
rootIdentifier	composer.phar	/^$this->rootIdentifier = $output[0];$/;"	v
rootIdentifier	composer.phar	/^$this->rootIdentifier = $repoData['default_branch'];$/;"	v
rootIdentifier	composer.phar	/^$this->rootIdentifier = $repoData['master_branch'];$/;"	v
rootIdentifier	composer.phar	/^$this->rootIdentifier = $repoData['tip']['raw_node'];$/;"	v
rootIdentifier	composer.phar	/^$this->rootIdentifier = $this->branches['trunk'];$/;"	v
rootIdentifier	composer.phar	/^$this->rootIdentifier = 'master';$/;"	v
rootIdentifier	composer.phar	/^protected $rootIdentifier;$/;"	v
rootPackageAlias	composer.phar	/^protected $rootPackageAlias = false;$/;"	v
rootPackageConfig	composer.phar	/^$rootPackageConfig = $composer->getConfig();$/;"	v
rootPath	composer.phar	/^ private $rootPath;$/;"	v
rootPath	composer.phar	/^$this->rootPath = (string) $path;$/;"	v
rootRequiredPackageNames	composer.phar	/^$rootRequiredPackageNames = array_keys($rootRequires);$/;"	v
rootRequires	composer.phar	/^$rootRequires = array_merge($rootRequires, $rootDevRequires);$/;"	v
rootSchema	composer.phar	/^$this->rootSchema = $schema;$/;"	v
rootSchema	composer.phar	/^protected $rootSchema = null;$/;"	v
roots	composer.phar	/^$roots = $packages;$/;"	v
row	composer.phar	/^$row = $rows[$line];$/;"	v
row	composer.phar	/^$row = $this->copyRow($rows, $unmergedRowKey - 1);$/;"	v
rows	composer.phar	/^$rows = $this->fillNextRows($rows, $rowKey);$/;"	v
rows	composer.phar	/^$this->rows = $this->buildTableRows($this->rows);$/;"	v
rows	composer.phar	/^$this->rows = array();$/;"	v
rows	composer.phar	/^private $rows = array();$/;"	v
rsort	composer.phar	/^public static function rsort(array $versions)$/;"	f
rule	composer.phar	/^$rule = $decision[Decisions::DECISION_REASON];$/;"	v
rule	composer.phar	/^$rule = $reason['rule'];$/;"	v
rule	composer.phar	/^$rule = $this->createInstallOneOfRule($packages, Rule::RULE_JOB_INSTALL, $job);$/;"	v
rule	composer.phar	/^$rule = $this->createRemoveRule($package, Rule::RULE_JOB_REMOVE, $job);$/;"	v
rule	composer.phar	/^$rule = $this->propagate($level);$/;"	v
rule	composer.phar	/^$rule = $this->rules->ruleById[$i];$/;"	v
rule	composer.phar	/^$rule = $this->rules->ruleById[$ruleIndex];$/;"	v
rule	composer.phar	/^$rule = substr($rule, 0, -1);$/;"	v
rule	composer.phar	/^$rule = substr($rule, 1);$/;"	v
rule	composer.phar	/^$this->rule = $rule;$/;"	v
rule	composer.phar	/^protected $rule;$/;"	v
ruleById	composer.phar	/^public $ruleById;$/;"	v
ruleById	composer.phar	/^public function ruleById($id)$/;"	f
ruleIndex	composer.phar	/^$ruleIndex = -1;$/;"	v
ruleLevel	composer.phar	/^$ruleLevel = $l;$/;"	v
ruleLevel	composer.phar	/^$ruleLevel = 1;$/;"	v
ruleLiterals	composer.phar	/^$ruleLiterals = $node->getRule()->literals;$/;"	v
ruleNode	composer.phar	/^$ruleNode = new RuleWatchNode($newRule);$/;"	v
ruleSetGenerator	composer.phar	/^$this->ruleSetGenerator = new RuleSetGenerator($policy, $pool);$/;"	v
ruleSetGenerator	composer.phar	/^protected $ruleSetGenerator;$/;"	v
ruleText	composer.phar	/^$ruleText = '';$/;"	v
rules	composer.phar	/^$rules = $this->getCurrentRules();$/;"	v
rules	composer.phar	/^$rules = $this->getRules();$/;"	v
rules	composer.phar	/^$rules = array();$/;"	v
rules	composer.phar	/^$this->rules = $rules;$/;"	v
rules	composer.phar	/^$this->rules = $this->ruleSetGenerator->getRulesFor($this->jobs, $this->installedMap, $ignorePlatformReqs);$/;"	v
rules	composer.phar	/^$this->rules = new RuleSet;$/;"	v
rules	composer.phar	/^$this->rules = preg_split("\/[\\s,]+\/", $pattern);$/;"	v
rules	composer.phar	/^private $rules = array($/;"	v
rules	composer.phar	/^protected $rules = array();$/;"	v
rules	composer.phar	/^protected $rules;$/;"	v
rulesByHash	composer.phar	/^$this->rulesByHash = array();$/;"	v
rulesByHash	composer.phar	/^protected $rulesByHash;$/;"	v
rulesCount	composer.phar	/^$rulesCount = count($this->rules);$/;"	v
rulesLen	composer.phar	/^$rulesLen = count($rules);$/;"	v
run	composer.phar	/^public function run($callback = null)$/;"	f
run	composer.phar	/^public function run()$/;"	f
run	composer.phar	/^public function run(InputInterface $input = null, OutputInterface $output = null)$/;"	f
run	composer.phar	/^public function run(InputInterface $input, OutputInterface $output)$/;"	f
run	composer.phar	/^public function run(OutputInterface $output, $cmd, $error = null, $callback = null, $verbosity = OutputInterface::VERBOSITY_VERY_VERBOSE)$/;"	f
run	composer.phar	/^public function run(array $input, $options = array())$/;"	f
runCommand	composer.phar	/^public function runCommand($commandCallable, $url, $cwd, $initialClone = false)$/;"	f
runSat	composer.phar	/^private function runSat($disableRules = true)$/;"	f
runScripts	composer.phar	/^$this->runScripts = (boolean) $runScripts;$/;"	v
runScripts	composer.phar	/^$this->runScripts = false;$/;"	v
runScripts	composer.phar	/^protected $runScripts = true;$/;"	v
running	composer.phar	/^$running = '\\\\' === DIRECTORY_SEPARATOR ? $this->isRunning() : $this->processPipes->areOpen();$/;"	v
runningCommand	composer.phar	/^$this->runningCommand = $command;$/;"	v
runningCommand	composer.phar	/^$this->runningCommand = null;$/;"	v
runningCommand	composer.phar	/^private $runningCommand;$/;"	v
safeCommand	composer.phar	/^$safeCommand = preg_replace('{(:\/\/[^:\/\\s]+:)[^@\\s\/]+}i', '$1****', $command);$/;"	v
safeCopy	composer.phar	/^protected function safeCopy($source, $target)$/;"	f
sanitizeUrl	composer.phar	/^public static function sanitizeUrl($message)$/;"	f
satisfiedBy	composer.phar	/^public static function satisfiedBy(array $versions, $constraints)$/;"	f
satisfies	composer.phar	/^public static function satisfies($version, $constraints)$/;"	f
satisfy	composer.phar	/^public function satisfy($literal)$/;"	f
scanDirectory	composer.phar	/^private function scanDirectory($path)$/;"	f
scanPsr0Packages	composer.phar	/^ $scanPsr0Packages = true;$/;"	v
schemaCache	composer.phar	/^private $schemaCache = array();$/;"	v
schemaData	composer.phar	/^$schemaData = json_decode(file_get_contents($schemaFile));$/;"	v
schemaFile	composer.phar	/^$schemaFile = __DIR__ . '\/..\/..\/..\/res\/composer-schema.json';$/;"	v
schemaId	composer.phar	/^$schemaId = property_exists($schema, 'id') ? $schema->id : null;$/;"	v
schemas	composer.phar	/^$this->schemas = $schemas;$/;"	v
schemas	composer.phar	/^private $schemas;$/;"	v
scheme	composer.phar	/^$scheme = (isset($urlBits['scheme']) && 'https' === $urlBits['scheme'] && extension_loaded('openssl')) ? 'https' : 'http';$/;"	v
script	composer.phar	/^$script = $input->getArgument('script');$/;"	v
script	composer.phar	/^$script = implode(' ', array_map(array(__NAMESPACE__.'\\\\ProcessUtils', 'escapeArgument'), $arguments));$/;"	v
script	composer.phar	/^$this->script = $script;$/;"	v
script	composer.phar	/^private $script;$/;"	v
scriptEvents	composer.phar	/^protected $scriptEvents = array($/;"	v
scriptListeners	composer.phar	/^$scriptListeners = $this->getScriptListeners($event);$/;"	v
scripts	composer.phar	/^$scripts = $package->getScripts();$/;"	v
scripts	composer.phar	/^$scripts = $this->getComposer()->getPackage()->getScripts();$/;"	v
scripts	composer.phar	/^$this->scripts = $scripts;$/;"	v
scripts	composer.phar	/^protected $scripts = array();$/;"	v
search	composer.phar	/^public function search($query, $mode = 0)$/;"	f
search	composer.phar	/^public function search($query, $mode = 0);$/;"	f
searchInDirectory	composer.phar	/^private function searchInDirectory($dir)$/;"	f
searchInDirectory	composer.phar	/^public function searchInDirectory($dir)$/;"	f
searchInDirectory	composer.phar	/^public function searchInDirectory($dir);$/;"	f
searchPath	composer.phar	/^$searchPath = explode(PATH_SEPARATOR, ini_get('open_basedir'));$/;"	v
searchUrl	composer.phar	/^$this->searchUrl = $this->canonicalizeUrl($data['search']);$/;"	v
searchUrl	composer.phar	/^protected $searchUrl;$/;"	v
secondErrors	composer.phar	/^$secondErrors = $this->getErrors();$/;"	v
section	composer.phar	/^protected $section = 0;$/;"	v
section	composer.phar	/^public function section($message)$/;"	f
section	composer.phar	/^public function section($message);$/;"	f
seek	composer.phar	/^public function seek($offset)$/;"	f
seen	composer.phar	/^$seen = array();$/;"	v
select	composer.phar	/^public function select(OutputInterface $output, $question, $choices, $default = null, $attempts = false, $errorMessage = 'Value "%s" is invalid', $multiselect = false)$/;"	f
selectAndInstall	composer.phar	/^private function selectAndInstall($level, array $decisionQueue, $disableRules, Rule $rule)$/;"	f
selectPackage	composer.phar	/^protected function selectPackage(IOInterface $io, $packageName, $version = null)$/;"	f
selectPreferedPackages	composer.phar	/^public function selectPreferedPackages(Pool $pool, array $installedMap, array $literals, $requiredPackage = null)$/;"	f
selectPreferredPackages	composer.phar	/^public function selectPreferredPackages(Pool $pool, array $installedMap, array $literals);$/;"	f
selectPreferredPackages	composer.phar	/^public function selectPreferredPackages(Pool $pool, array $installedMap, array $literals, $requiredPackage = null)$/;"	f
selectRestVersion	composer.phar	/^private function selectRestVersion($channelXml, $supportedVersions)$/;"	f
selected	composer.phar	/^$selected = array();$/;"	v
selected	composer.phar	/^$selected = call_user_func_array('array_merge', $packages);$/;"	v
selectedChoices	composer.phar	/^ $selectedChoices = str_replace(' ', '', $picked);$/;"	v
selectedChoices	composer.phar	/^ $selectedChoices = str_replace(' ', '', $selected);$/;"	v
selectedChoices	composer.phar	/^$selectedChoices = array($picked);$/;"	v
selectedChoices	composer.phar	/^$selectedChoices = array($selected);$/;"	v
selectedChoices	composer.phar	/^$selectedChoices = explode(',', $selectedChoices);$/;"	v
selectedLiteral	composer.phar	/^$selectedLiteral = array_shift($literals);$/;"	v
selectedRestVersion	composer.phar	/^$selectedRestVersion = $this->selectRestVersion($xml, $supportedVersions);$/;"	v
self	composer.phar	/^ $self = $this;$/;"	v
self	composer.phar	/^$self = $this->getAliasOf();$/;"	v
self	composer.phar	/^$self = $this;$/;"	v
semanticVersionParts	composer.phar	/^ $semanticVersionParts = explode('.', $version);$/;"	v
set	composer.phar	/^    public function set($prefix, $paths)$/;"	f
set	composer.phar	/^public function set($prefix, $paths)$/;"	f
set	composer.phar	/^public function set(HelperInterface $helper, $alias = null)$/;"	f
setAbandoned	composer.phar	/^public function setAbandoned($abandoned)$/;"	f
setAdapter	composer.phar	/^public function setAdapter($name)$/;"	f
setAdditionalInstalledRepository	composer.phar	/^public function setAdditionalInstalledRepository(RepositoryInterface $additionalInstalledRepository)$/;"	f
setAliases	composer.phar	/^public function setAliases($aliases)$/;"	f
setAliases	composer.phar	/^public function setAliases(array $aliases)$/;"	f
setApplication	composer.phar	/^public function setApplication(Application $application = null)$/;"	f
setArchiveExcludes	composer.phar	/^public function setArchiveExcludes(array $excludes)$/;"	f
setArgument	composer.phar	/^public function setArgument($name, $value)$/;"	f
setArgument	composer.phar	/^public function setArgument($name, $value);$/;"	f
setArguments	composer.phar	/^public function setArguments($arguments = array())$/;"	f
setArguments	composer.phar	/^public function setArguments(array $arguments)$/;"	f
setAuthConfigSource	composer.phar	/^public function setAuthConfigSource(ConfigSourceInterface $source)$/;"	f
setAuthentication	composer.phar	/^public function setAuthentication($repositoryName, $username, $password = null)$/;"	f
setAuthentication	composer.phar	/^public function setAuthentication($repositoryName, $username, $password = null);$/;"	f
setAuthors	composer.phar	/^public function setAuthors(array $authors)$/;"	f
setAutoExit	composer.phar	/^public function setAutoExit($boolean)$/;"	f
setAutocompleterValues	composer.phar	/^public function setAutocompleterValues($values)$/;"	f
setAutoload	composer.phar	/^public function setAutoload(array $autoload)$/;"	f
setAutoload	composer.phar	/^public function setAutoload(array $autoload);$/;"	f
setAutoloadGenerator	composer.phar	/^public function setAutoloadGenerator(AutoloadGenerator $autoloadGenerator)$/;"	f
setBackground	composer.phar	/^public function setBackground($color = null)$/;"	f
setBackground	composer.phar	/^public function setBackground($color = null);$/;"	f
setBarCharacter	composer.phar	/^public function setBarCharacter($char)$/;"	f
setBarWidth	composer.phar	/^public function setBarWidth($size)$/;"	f
setBinaries	composer.phar	/^public function setBinaries(array $binaries)$/;"	f
setBorderFormat	composer.phar	/^public function setBorderFormat($borderFormat)$/;"	f
setCacheCredentials	composer.phar	/^public function setCacheCredentials($cacheCredentials)$/;"	f
setCatchExceptions	composer.phar	/^public function setCatchExceptions($boolean)$/;"	f
setCellHeaderFormat	composer.phar	/^public function setCellHeaderFormat($cellHeaderFormat)$/;"	f
setCellRowContentFormat	composer.phar	/^public function setCellRowContentFormat($cellRowContentFormat)$/;"	f
setCellRowFormat	composer.phar	/^public function setCellRowFormat($cellRowFormat)$/;"	f
setClassMapAuthoritative	composer.phar	/^    public function setClassMapAuthoritative($classMapAuthoritative)$/;"	f
setClassMapAuthoritative	composer.phar	/^public function setClassMapAuthoritative($classMapAuthoritative = false)$/;"	f
setClassMapAuthoritative	composer.phar	/^public function setClassMapAuthoritative($classMapAuthoritative)$/;"	f
setCode	composer.phar	/^public function setCode($code)$/;"	f
setCodes	composer.phar	/^$setCodes = array();$/;"	v
setCommand	composer.phar	/^public function setCommand(Command $command = null)$/;"	f
setCommand	composer.phar	/^public function setCommand(Command $command)$/;"	f
setCommandLine	composer.phar	/^public function setCommandLine($commandline)$/;"	f
setComposer	composer.phar	/^public function setComposer(Composer $composer)$/;"	f
setConfig	composer.phar	/^public function setConfig(Config $config)$/;"	f
setConfigSource	composer.phar	/^public function setConfigSource(ConfigSourceInterface $source)$/;"	f
setConflicts	composer.phar	/^public function setConflicts(array $conflicts)$/;"	f
setConflicts	composer.phar	/^public function setConflicts(array $conflicts);$/;"	f
setContains	composer.phar	/^public function setContains(array $contains)$/;"	f
setContains	composer.phar	/^public function setContains(array $contains);$/;"	f
setCrossingChar	composer.phar	/^public function setCrossingChar($crossingChar)$/;"	f
setCurrent	composer.phar	/^public function setCurrent($current, $redraw = false)$/;"	f
setCurrent	composer.phar	/^public function setCurrent($step)$/;"	f
setDates	composer.phar	/^public function setDates(array $dates)$/;"	f
setDates	composer.phar	/^public function setDates(array $dates);$/;"	f
setDecorated	composer.phar	/^public function setDecorated($decorated)$/;"	f
setDecorated	composer.phar	/^public function setDecorated($decorated);$/;"	f
setDefault	composer.phar	/^public function setDefault($default = null)$/;"	f
setDefaultCommand	composer.phar	/^public function setDefaultCommand($commandName)$/;"	f
setDefinition	composer.phar	/^public function setDefinition($definition)$/;"	f
setDefinition	composer.phar	/^public function setDefinition(InputDefinition $definition)$/;"	f
setDefinition	composer.phar	/^public function setDefinition(array $definition)$/;"	f
setDepths	composer.phar	/^public function setDepths(array $depths)$/;"	f
setDepths	composer.phar	/^public function setDepths(array $depths);$/;"	f
setDescription	composer.phar	/^public function setDescription($description)$/;"	f
setDevAutoload	composer.phar	/^public function setDevAutoload(array $devAutoload)$/;"	f
setDevAutoload	composer.phar	/^public function setDevAutoload(array $devAutoload);$/;"	f
setDevMode	composer.phar	/^public function setDevMode($devMode = true)$/;"	f
setDevRequires	composer.phar	/^public function setDevRequires(array $devRequire)$/;"	f
setDevRequires	composer.phar	/^public function setDevRequires(array $devRequires)$/;"	f
setDevRequires	composer.phar	/^public function setDevRequires(array $devRequires);$/;"	f
setDispatcher	composer.phar	/^public function setDispatcher(EventDispatcherInterface $dispatcher)$/;"	f
setDistMirrors	composer.phar	/^public function setDistMirrors($mirrors)$/;"	f
setDistReference	composer.phar	/^public function setDistReference($reference)$/;"	f
setDistSha1Checksum	composer.phar	/^public function setDistSha1Checksum($sha1checksum)$/;"	f
setDistType	composer.phar	/^public function setDistType($type)$/;"	f
setDistUrl	composer.phar	/^public function setDistUrl($url)$/;"	f
setDownloadManager	composer.phar	/^public function setDownloadManager(DownloadManager $manager)$/;"	f
setDownloader	composer.phar	/^public function setDownloader($type, DownloaderInterface $downloader)$/;"	f
setDryRun	composer.phar	/^public function setDryRun($dryRun = true)$/;"	f
setDumpAutoloader	composer.phar	/^public function setDumpAutoloader($dumpAutoloader = true)$/;"	f
setEmptyBarCharacter	composer.phar	/^public function setEmptyBarCharacter($char)$/;"	f
setEmptyStyle	composer.phar	/^public function setEmptyStyle(OutputFormatterStyleInterface $emptyStyle)$/;"	f
setEndFlag	composer.phar	/^public function setEndFlag($endFlag)$/;"	f
setEndJoker	composer.phar	/^public function setEndJoker($endJoker)$/;"	f
setEnhanceSigchildCompatibility	composer.phar	/^public function setEnhanceSigchildCompatibility($enhance)$/;"	f
setEnhanceWindowsCompatibility	composer.phar	/^public function setEnhanceWindowsCompatibility($enhance)$/;"	f
setEnv	composer.phar	/^public function setEnv($name, $value)$/;"	f
setEnv	composer.phar	/^public function setEnv(array $env)$/;"	f
setErrorHandler	composer.phar	/^public function setErrorHandler(\\Closure $errorHandler)$/;"	f
setErrorMessage	composer.phar	/^public function setErrorMessage($errorMessage)$/;"	f
setErrorOutput	composer.phar	/^public function setErrorOutput(OutputInterface $error)$/;"	f
setErrorOutput	composer.phar	/^public function setErrorOutput(OutputInterface $error);$/;"	f
setEventDispatcher	composer.phar	/^public function setEventDispatcher(EventDispatcher $eventDispatcher)$/;"	f
setException	composer.phar	/^public function setException(\\Exception $exception)$/;"	f
setExclude	composer.phar	/^public function setExclude(array $exclude)$/;"	f
setExclude	composer.phar	/^public function setExclude(array $exclude);$/;"	f
setExitCode	composer.phar	/^public function setExitCode($exitCode)$/;"	f
setExtra	composer.phar	/^public function setExtra(array $extra)$/;"	f
setExtra	composer.phar	/^public function setExtra(array $extra);$/;"	f
setFilesystem	composer.phar	/^public function setFilesystem(Filesystem $fs)$/;"	f
setFilters	composer.phar	/^public function setFilters(array $filters)$/;"	f
setFilters	composer.phar	/^public function setFilters(array $filters);$/;"	f
setFollowLinks	composer.phar	/^public function setFollowLinks($followLinks)$/;"	f
setFollowLinks	composer.phar	/^public function setFollowLinks($followLinks);$/;"	f
setForeground	composer.phar	/^public function setForeground($color = null)$/;"	f
setForeground	composer.phar	/^public function setForeground($color = null);$/;"	f
setFormat	composer.phar	/^public function setFormat($format)$/;"	f
setFormatDefinition	composer.phar	/^public static function setFormatDefinition($name, $format)$/;"	f
setFormatter	composer.phar	/^public function setFormatter(OutputFormatterInterface $formatter)$/;"	f
setFormatter	composer.phar	/^public function setFormatter(OutputFormatterInterface $formatter);$/;"	f
setHeaders	composer.phar	/^public function setHeaders($headers)$/;"	f
setHeaders	composer.phar	/^public function setHeaders(array $headers)$/;"	f
setHelp	composer.phar	/^public function setHelp($help)$/;"	f
setHelperSet	composer.phar	/^public function setHelperSet(HelperSet $helperSet = null)$/;"	f
setHelperSet	composer.phar	/^public function setHelperSet(HelperSet $helperSet = null);$/;"	f
setHelperSet	composer.phar	/^public function setHelperSet(HelperSet $helperSet)$/;"	f
setHidden	composer.phar	/^public function setHidden($hidden)$/;"	f
setHiddenFallback	composer.phar	/^public function setHiddenFallback($fallback)$/;"	f
setHomepage	composer.phar	/^public function setHomepage($homepage)$/;"	f
setHorizontalBorderChar	composer.phar	/^public function setHorizontalBorderChar($horizontalBorderChar)$/;"	f
setIO	composer.phar	/^public function setIO(IOInterface $io)$/;"	f
setId	composer.phar	/^public function setId($id)$/;"	f
setId	composer.phar	/^public function setId($id);$/;"	f
setIdleTimeout	composer.phar	/^public function setIdleTimeout($timeout)$/;"	f
setIgnorePlatformRequirements	composer.phar	/^public function setIgnorePlatformRequirements($ignorePlatformReqs = false)$/;"	f
setIncludePaths	composer.phar	/^public function setIncludePaths(array $includePaths)$/;"	f
setInput	composer.phar	/^public function setInput($input)$/;"	f
setInput	composer.phar	/^public function setInput(InputInterface $input)$/;"	f
setInput	composer.phar	/^public function setInput(InputInterface $input);$/;"	f
setInputStream	composer.phar	/^public function setInputStream($stream)$/;"	f
setInstallationManager	composer.phar	/^public function setInstallationManager(InstallationManager $manager)$/;"	f
setInstallationSource	composer.phar	/^public function setInstallationSource($type)$/;"	f
setInstallationSource	composer.phar	/^public function setInstallationSource($type);$/;"	f
setInteractive	composer.phar	/^public function setInteractive($interactive)$/;"	f
setInteractive	composer.phar	/^public function setInteractive($interactive);$/;"	f
setKeywords	composer.phar	/^public function setKeywords(array $keywords)$/;"	f
setLayout	composer.phar	/^public function setLayout($layout)$/;"	f
setLicense	composer.phar	/^public function setLicense(array $license)$/;"	f
setLoader	composer.phar	/^public function setLoader(LoaderInterface $loader)$/;"	f
setLocalPhar	composer.phar	/^protected function setLocalPhar($localFilename, $newFilename, $backupTarget = null)$/;"	f
setLocalRepository	composer.phar	/^public function setLocalRepository(WritableRepositoryInterface $repository)$/;"	f
setLockData	composer.phar	/^public function setLockData(array $packages, $devPackages, array $platformReqs, $platformDevReqs, array $aliases, $minimumStability, array $stabilityFlags, $preferStable, $preferLowest, array $platformOverrides)$/;"	f
setLocker	composer.phar	/^public function setLocker(Locker $locker)$/;"	f
setMaxAttempts	composer.phar	/^public function setMaxAttempts($attempts)$/;"	f
setMaxSteps	composer.phar	/^private function setMaxSteps($max)$/;"	f
setMessage	composer.phar	/^public function setMessage($message, $name = 'message')$/;"	f
setMinimumStability	composer.phar	/^public function setMinimumStability($minimumStability)$/;"	f
setMode	composer.phar	/^public function setMode($mode)$/;"	f
setMode	composer.phar	/^public function setMode($mode);$/;"	f
setMultiselect	composer.phar	/^public function setMultiselect($multiselect)$/;"	f
setName	composer.phar	/^public function setName($name)$/;"	f
setNames	composer.phar	/^public function setNames(array $names)$/;"	f
setNames	composer.phar	/^public function setNames(array $names);$/;"	f
setNormalizer	composer.phar	/^public function setNormalizer($normalizer)$/;"	f
setNotContains	composer.phar	/^public function setNotContains(array $notContains)$/;"	f
setNotContains	composer.phar	/^public function setNotContains(array $notContains);$/;"	f
setNotNames	composer.phar	/^public function setNotNames(array $notNames)$/;"	f
setNotNames	composer.phar	/^public function setNotNames(array $notNames);$/;"	f
setNotPath	composer.phar	/^public function setNotPath(array $notPaths)$/;"	f
setNotPath	composer.phar	/^public function setNotPath(array $notPaths);$/;"	f
setNotificationUrl	composer.phar	/^public function setNotificationUrl($notificationUrl)$/;"	f
setOperator	composer.phar	/^public function setOperator($operator)$/;"	f
setOptimizeAutoloader	composer.phar	/^public function setOptimizeAutoloader($optimizeAutoloader = false)$/;"	f
setOption	composer.phar	/^public function setOption($name, $value)$/;"	f
setOption	composer.phar	/^public function setOption($name, $value);$/;"	f
setOption	composer.phar	/^public function setOption($option)$/;"	f
setOption	composer.phar	/^public function setOption($option);$/;"	f
setOptions	composer.phar	/^public function setOptions($options = array())$/;"	f
setOptions	composer.phar	/^public function setOptions(array $options)$/;"	f
setOptions	composer.phar	/^public function setOptions(array $options);$/;"	f
setOutputProgress	composer.phar	/^public function setOutputProgress($outputProgress)$/;"	f
setOutputProgress	composer.phar	/^public function setOutputProgress($outputProgress);$/;"	f
setOverwrite	composer.phar	/^public function setOverwrite($overwrite)$/;"	f
setOverwriteFiles	composer.phar	/^public function setOverwriteFiles($overwriteFiles)$/;"	f
setPackage	composer.phar	/^public function setPackage(RootPackageInterface $package)$/;"	f
setPadType	composer.phar	/^public function setPadType($padType)$/;"	f
setPaddingChar	composer.phar	/^public function setPaddingChar($paddingChar)$/;"	f
setPath	composer.phar	/^public function setPath(array $paths)$/;"	f
setPath	composer.phar	/^public function setPath(array $paths);$/;"	f
setPerforce	composer.phar	/^public function setPerforce($perforce)$/;"	f
setPhpBinary	composer.phar	/^public function setPhpBinary($php)$/;"	f
setPlaceholderFormatterDefinition	composer.phar	/^public static function setPlaceholderFormatterDefinition($name, $callable)$/;"	f
setPluginManager	composer.phar	/^public function setPluginManager(PluginManager $manager)$/;"	f
setPreferDist	composer.phar	/^public function setPreferDist($preferDist = true)$/;"	f
setPreferDist	composer.phar	/^public function setPreferDist($preferDist)$/;"	f
setPreferLowest	composer.phar	/^public function setPreferLowest($preferLowest = true)$/;"	f
setPreferSource	composer.phar	/^public function setPreferSource($preferSource = true)$/;"	f
setPreferSource	composer.phar	/^public function setPreferSource($preferSource)$/;"	f
setPreferStable	composer.phar	/^public function setPreferStable($preferStable = true)$/;"	f
setPreferStable	composer.phar	/^public function setPreferStable($preferStable)$/;"	f
setPrefix	composer.phar	/^public function setPrefix($prefix)$/;"	f
setPrettyString	composer.phar	/^public function setPrettyString($prettyString)$/;"	f
setProcessIsolation	composer.phar	/^public function setProcessIsolation($processIsolation)$/;"	f
setProcessTitle	composer.phar	/^public function setProcessTitle($title)$/;"	f
setProgress	composer.phar	/^public function setProgress($step)$/;"	f
setProgressCharacter	composer.phar	/^public function setProgressCharacter($char)$/;"	f
setPrompt	composer.phar	/^public function setPrompt($prompt)$/;"	f
setPropagateLearn	composer.phar	/^private function setPropagateLearn($level, $literal, $disableRules, Rule $rule)$/;"	f
setProvides	composer.phar	/^public function setProvides(array $provides)$/;"	f
setProvides	composer.phar	/^public function setProvides(array $provides);$/;"	f
setPsr4	composer.phar	/^    public function setPsr4($prefix, $paths)$/;"	f
setPsr4	composer.phar	/^public function setPsr4($prefix, $paths)$/;"	f
setPty	composer.phar	/^public function setPty($bool)$/;"	f
setPushUrl	composer.phar	/^protected function setPushUrl($path, $url)$/;"	f
setRealFormat	composer.phar	/^private function setRealFormat($format)$/;"	f
setRedrawFrequency	composer.phar	/^public function setRedrawFrequency($freq)$/;"	f
setReferences	composer.phar	/^public function setReferences(array $references)$/;"	f
setReleaseDate	composer.phar	/^public function setReleaseDate(\\DateTime $releaseDate)$/;"	f
setRemoteFilesystem	composer.phar	/^public function setRemoteFilesystem(RemoteFilesystem $rfs)$/;"	f
setReplaces	composer.phar	/^public function setReplaces(array $replaces)$/;"	f
setReplaces	composer.phar	/^public function setReplaces(array $replaces);$/;"	f
setRepositories	composer.phar	/^public function setRepositories($repositories)$/;"	f
setRepositories	composer.phar	/^public function setRepositories($repositories);$/;"	f
setRepository	composer.phar	/^public function setRepository(RepositoryInterface $repository)$/;"	f
setRepository	composer.phar	/^public function setRepository(RepositoryInterface $repository);$/;"	f
setRepositoryClass	composer.phar	/^public function setRepositoryClass($type, $class)$/;"	f
setRepositoryManager	composer.phar	/^public function setRepositoryManager(RepositoryManager $manager)$/;"	f
setRequires	composer.phar	/^public function setRequires(array $require)$/;"	f
setRequires	composer.phar	/^public function setRequires(array $requires)$/;"	f
setRequires	composer.phar	/^public function setRequires(array $requires);$/;"	f
setResponse	composer.phar	/^public function setResponse($response)$/;"	f
setRootAliases	composer.phar	/^public function setRootAliases(array $rootAliases)$/;"	f
setRootPackageAlias	composer.phar	/^public function setRootPackageAlias($value)$/;"	f
setRow	composer.phar	/^public function setRow($column, array $row)$/;"	f
setRows	composer.phar	/^public function setRows(array $rows)$/;"	f
setRunScripts	composer.phar	/^public function setRunScripts($runScripts = true)$/;"	f
setScripts	composer.phar	/^public function setScripts(array $scripts)$/;"	f
setSizes	composer.phar	/^public function setSizes(array $sizes)$/;"	f
setSizes	composer.phar	/^public function setSizes(array $sizes);$/;"	f
setSort	composer.phar	/^public function setSort($sort)$/;"	f
setSort	composer.phar	/^public function setSort($sort);$/;"	f
setSourceMirrors	composer.phar	/^public function setSourceMirrors($mirrors)$/;"	f
setSourceReference	composer.phar	/^public function setSourceReference($reference)$/;"	f
setSourceType	composer.phar	/^public function setSourceType($type)$/;"	f
setSourceUrl	composer.phar	/^public function setSourceUrl($url)$/;"	f
setStabilityFlags	composer.phar	/^public function setStabilityFlags(array $stabilityFlags)$/;"	f
setStabilityFlags	composer.phar	/^public function setStabilityFlags(array $stabilityFlags);$/;"	f
setStartFlag	composer.phar	/^public function setStartFlag($startFlag)$/;"	f
setStartJoker	composer.phar	/^public function setStartJoker($startJoker)$/;"	f
setStdin	composer.phar	/^public function setStdin($stdin)$/;"	f
setStream	composer.phar	/^public function setStream($stream)$/;"	f
setStyle	composer.phar	/^public function setStyle($name)$/;"	f
setStyle	composer.phar	/^public function setStyle($name, OutputFormatterStyleInterface $style)$/;"	f
setStyle	composer.phar	/^public function setStyle($name, OutputFormatterStyleInterface $style);$/;"	f
setStyleDefinition	composer.phar	/^public static function setStyleDefinition($name, TableStyle $style)$/;"	f
setSuffixes	composer.phar	/^public function setSuffixes(array $suffixes)$/;"	f
setSuggests	composer.phar	/^public function setSuggests(array $suggests)$/;"	f
setSuggests	composer.phar	/^public function setSuggests(array $suggests);$/;"	f
setSupport	composer.phar	/^public function setSupport(array $support)$/;"	f
setTarget	composer.phar	/^public function setTarget($target)$/;"	f
setTargetDir	composer.phar	/^public function setTargetDir($targetDir)$/;"	f
setTerminalDimensions	composer.phar	/^public function setTerminalDimensions($width, $height)$/;"	f
setTimeout	composer.phar	/^public function setTimeout($timeout)$/;"	f
setTimeout	composer.phar	/^public static function setTimeout($timeout)$/;"	f
setTokens	composer.phar	/^protected function setTokens(array $tokens)$/;"	f
setTransportOptions	composer.phar	/^public function setTransportOptions(array $options)$/;"	f
setTty	composer.phar	/^public function setTty($tty)$/;"	f
setType	composer.phar	/^public function setType($type)$/;"	f
setUpdate	composer.phar	/^public function setUpdate($update = true)$/;"	f
setUpdateWhitelist	composer.phar	/^public function setUpdateWhitelist(array $packages)$/;"	f
setUriRetriever	composer.phar	/^public function setUriRetriever(UriRetriever $retriever)$/;"	f
setUriRetriever	composer.phar	/^public function setUriRetriever(UriRetriever $uriRetriever)$/;"	f
setUriRetriever	composer.phar	/^public function setUriRetriever(UriRetrieverInterface $uriRetriever)$/;"	f
setUseIncludePath	composer.phar	/^    public function setUseIncludePath($useIncludePath)$/;"	f
setUseIncludePath	composer.phar	/^public function setUseIncludePath($useIncludePath)$/;"	f
setUser	composer.phar	/^public function setUser($user)$/;"	f
setValidator	composer.phar	/^public function setValidator($validator)$/;"	f
setVerbose	composer.phar	/^public function setVerbose($verbose = true)$/;"	f
setVerbosity	composer.phar	/^public function setVerbosity($level)$/;"	f
setVerbosity	composer.phar	/^public function setVerbosity($level);$/;"	f
setVersion	composer.phar	/^public function setVersion($version)$/;"	f
setVerticalBorderChar	composer.phar	/^public function setVerticalBorderChar($verticalBorderChar)$/;"	f
setWhitelist	composer.phar	/^public function setWhitelist($whitelist)$/;"	f
setWhitelistDependencies	composer.phar	/^public function setWhitelistDependencies($updateDependencies = true)$/;"	f
setWorkingDirectory	composer.phar	/^public function setWorkingDirectory($cwd)$/;"	f
settingKey	composer.phar	/^$settingKey = $input->getArgument('setting-key');$/;"	v
setupGitDriver	composer.phar	/^protected function setupGitDriver($url)$/;"	f
setupInstalledMap	composer.phar	/^protected function setupInstalledMap()$/;"	f
sha1	composer.phar	/^public function sha1($file)$/;"	f
sha256	composer.phar	/^public function sha256($file)$/;"	f
shell	composer.phar	/^$shell = $sh;$/;"	v
shell	composer.phar	/^$this->shell = new Shell();$/;"	v
shell	composer.phar	/^private static $shell;$/;"	v
shell	composer.phar	/^protected $shell;$/;"	v
shortDescription	composer.phar	/^$shortDescription = (string) $packageInfo->p->s;$/;"	v
shortDescription	composer.phar	/^$shortDescription = (string) $xml->s;$/;"	v
shortDescription	composer.phar	/^$this->shortDescription = $shortDescription;$/;"	v
shortDescription	composer.phar	/^private $shortDescription;$/;"	v
shortPath	composer.phar	/^$shortPath = $fs->findShortestPath(getcwd(), $packagePath, true);$/;"	v
shortcut	composer.phar	/^$shortcut = $option->getShortcut() ? sprintf('-%s|', $option->getShortcut()) : '';$/;"	v
shortcut	composer.phar	/^$shortcut = implode('|', $shortcut);$/;"	v
shortcut	composer.phar	/^$shortcut = implode('|', $shortcuts);$/;"	v
shortcut	composer.phar	/^$shortcut = null;$/;"	v
shortcut	composer.phar	/^$this->shortcut = $shortcut;$/;"	v
shortcut	composer.phar	/^private $shortcut;$/;"	v
shortcutToName	composer.phar	/^private function shortcutToName($shortcut)$/;"	f
shortcuts	composer.phar	/^$shortcuts = array_filter($shortcuts);$/;"	v
shortcuts	composer.phar	/^$shortcuts = preg_split('{(\\|)-?}', ltrim($shortcut, '-'));$/;"	v
shortcuts	composer.phar	/^$this->shortcuts = array();$/;"	v
shortcuts	composer.phar	/^private $shortcuts;$/;"	v
shortestPath	composer.phar	/^$shortestPath = $this->filesystem->findShortestPath($path, $realUrl);$/;"	v
showPosition	composer.phar	/^public function showPosition()$/;"	f
sigchild	composer.phar	/^private static $sigchild;$/;"	v
signal	composer.phar	/^public function signal($signal)$/;"	f
size	composer.phar	/^ $size = strlen(strip_tags($stderr ? $this->lastMessageErr : $this->lastMessage));$/;"	v
size	composer.phar	/^$size = $matches[1];$/;"	v
size	composer.phar	/^$size = 0;$/;"	v
size	composer.phar	/^public function size($path)$/;"	f
size	composer.phar	/^public function size($size)$/;"	f
sizeGlob	composer.phar	/^$sizeGlob = strlen($glob);$/;"	v
sizes	composer.phar	/^$this->sizes = $sizes;$/;"	v
sizes	composer.phar	/^private $sizes = array();$/;"	v
sizes	composer.phar	/^protected $sizes = array();$/;"	v
skipPackages	composer.phar	/^$skipPackages = array();$/;"	v
solve	composer.phar	/^public function solve(Request $request, $ignorePlatformReqs = false)$/;"	f
solver	composer.phar	/^$solver = new Solver($policy, $pool, $installedRepo);$/;"	v
sort	composer.phar	/^$this->sort = $closure;$/;"	v
sort	composer.phar	/^$this->sort = $sort;$/;"	v
sort	composer.phar	/^$this->sort = Iterator\\SortableIterator::SORT_BY_ACCESSED_TIME;$/;"	v
sort	composer.phar	/^$this->sort = Iterator\\SortableIterator::SORT_BY_CHANGED_TIME;$/;"	v
sort	composer.phar	/^$this->sort = Iterator\\SortableIterator::SORT_BY_MODIFIED_TIME;$/;"	v
sort	composer.phar	/^$this->sort = Iterator\\SortableIterator::SORT_BY_NAME;$/;"	v
sort	composer.phar	/^$this->sort = Iterator\\SortableIterator::SORT_BY_TYPE;$/;"	v
sort	composer.phar	/^$this->sort = function ($a, $b) {$/;"	v
sort	composer.phar	/^private $sort = false;$/;"	v
sort	composer.phar	/^private $sort;$/;"	v
sort	composer.phar	/^protected $sort = false;$/;"	v
sort	composer.phar	/^public function sort(\\Closure $closure)$/;"	f
sort	composer.phar	/^public static function sort(array $versions)$/;"	f
sortAdapters	composer.phar	/^private function sortAdapters()$/;"	f
sortByAccessedTime	composer.phar	/^public function sortByAccessedTime()$/;"	f
sortByChangedTime	composer.phar	/^public function sortByChangedTime()$/;"	f
sortByModifiedTime	composer.phar	/^public function sortByModifiedTime()$/;"	f
sortByName	composer.phar	/^public function sortByName()$/;"	f
sortByType	composer.phar	/^public function sortByType()$/;"	f
sortCommands	composer.phar	/^private function sortCommands(array $commands)$/;"	f
sortPackageMap	composer.phar	/^protected function sortPackageMap(array $packageMap)$/;"	f
sortPackages	composer.phar	/^$sortPackages = $input->getOption('sort-packages');$/;"	v
sortPackages	composer.phar	/^private function sortPackages(array &$packages = array())$/;"	f
sorted	composer.phar	/^ $sorted = array();$/;"	v
sortedPackageMap	composer.phar	/^$sortedPackageMap = $this->sortPackageMap($packageMap);$/;"	v
sortedPackageMap	composer.phar	/^$sortedPackageMap = array();$/;"	v
source	composer.phar	/^ $source = fopen($exe, 'r');$/;"	v
source	composer.phar	/^$source = $installMeansUpdateMap[abs($literal)];$/;"	v
source	composer.phar	/^$source = array($/;"	v
source	composer.phar	/^$source = fopen($source, 'r');$/;"	v
source	composer.phar	/^$this->source = strtolower($source);$/;"	v
source	composer.phar	/^protected $source;$/;"	v
sourceDir	composer.phar	/^$sourceDir = $packageName . '-' . $packageVersion;$/;"	v
sourceLiteral	composer.phar	/^$sourceLiteral = array_shift($literals);$/;"	v
sourceMirrors	composer.phar	/^$this->sourceMirrors = $mirrors;$/;"	v
sourceMirrors	composer.phar	/^protected $sourceMirrors;$/;"	v
sourcePackage	composer.phar	/^$sourcePackage = $pool->literalToPackage($sourceLiteral);$/;"	v
sourcePath	composer.phar	/^ $sourcePath = sys_get_temp_dir().'\/composer_archive'.uniqid();$/;"	v
sourcePath	composer.phar	/^$sourcePath = realpath('.');$/;"	v
sourcePath	composer.phar	/^$this->sourcePath = $sourcePath;$/;"	v
sourcePath	composer.phar	/^protected $sourcePath;$/;"	v
sourcePathDepth	composer.phar	/^$sourcePathDepth = substr_count(substr($from, strlen($commonPath)), '\/') + $directories;$/;"	v
sourcePathDepth	composer.phar	/^$sourcePathDepth = substr_count(substr($from, strlen($commonPath)), '\/');$/;"	v
sourceRef	composer.phar	/^$sourceRef = $package->getSourceReference() ?: $package->getDistReference();$/;"	v
sourceReference	composer.phar	/^$this->sourceReference = $reference;$/;"	v
sourceReference	composer.phar	/^protected $sourceReference;$/;"	v
sourceRepo	composer.phar	/^$sourceRepo = new ComposerRepository(array('url' => $repositoryUrl), $io, $config);$/;"	v
sourceRepo	composer.phar	/^$sourceRepo = new ComposerRepository(array('url' => 'file:\/\/' . strtr(realpath($repositoryUrl), '\\\\', '\/')), $io, $config);$/;"	v
sourceRepo	composer.phar	/^$sourceRepo = new CompositeRepository(Factory::createDefaultRepositories($io, $config));$/;"	v
sourceRepo	composer.phar	/^$sourceRepo = new FilesystemRepository($json);$/;"	v
sourceType	composer.phar	/^$sourceType = $package->getSourceType();$/;"	v
sourceType	composer.phar	/^$this->sourceType = $type;$/;"	v
sourceType	composer.phar	/^protected $sourceType;$/;"	v
sourceUri	composer.phar	/^$sourceUri = $schema->id;$/;"	v
sourceUrl	composer.phar	/^ $sourceUrl = $package->getSourceUrl();$/;"	v
sourceUrl	composer.phar	/^$this->sourceUrl = $url;$/;"	v
sourceUrl	composer.phar	/^protected $sourceUrl;$/;"	v
sources	composer.phar	/^$sources = $fs->normalizePath($sources);$/;"	v
sources	composer.phar	/^$sources = array();$/;"	v
sources	composer.phar	/^$sources = array_reverse($sources);$/;"	v
sources	composer.phar	/^$sources = realpath($sources);$/;"	v
spacingWidth	composer.phar	/^$spacingWidth = $totalWidth - strlen($argument->getName()) + 2;$/;"	v
spacingWidth	composer.phar	/^$spacingWidth = $totalWidth - strlen($synopsis) + 2;$/;"	v
spacingWidth	composer.phar	/^$spacingWidth = $width - strlen($name);$/;"	v
spdxLicenses	composer.phar	/^$spdxLicenses = new SpdxLicenses();$/;"	v
spec	composer.phar	/^$spec = $this->dumper->dump($package);$/;"	v
spec	composer.phar	/^$spec = fopen($clientSpec, 'w');$/;"	v
splitLines	composer.phar	/^public function splitLines($output)$/;"	f
splitRef	composer.phar	/^$splitRef = explode('#', $schema->$ref, 2);$/;"	v
splitStringByWidth	composer.phar	/^private function splitStringByWidth($string, $width)$/;"	f
stabilities	composer.phar	/^$stabilities = BasePackage::$stabilities;$/;"	v
stabilities	composer.phar	/^private static $stabilities = array($/;"	v
stabilities	composer.phar	/^public static $stabilities = array($/;"	v
stability	composer.phar	/^$stability = $match[1];$/;"	v
stability	composer.phar	/^$stability = $package->getStability();$/;"	v
stability	composer.phar	/^$stability = $stabilities[$stabilityName];$/;"	v
stability	composer.phar	/^$stability = $stabilities[VersionParser::normalizeStability($match[1])];$/;"	v
stability	composer.phar	/^$stability = VersionParser::normalizeStability($stability);$/;"	v
stability	composer.phar	/^$stability = VersionParser::parseStability($packageVersion);$/;"	v
stability	composer.phar	/^$stability = strtolower($stability);$/;"	v
stability	composer.phar	/^$this->stability = $stability;$/;"	v
stability	composer.phar	/^$this->stability = VersionParser::parseStability($version);$/;"	v
stability	composer.phar	/^private $stability;$/;"	v
stability	composer.phar	/^protected $stability;$/;"	v
stabilityFlags	composer.phar	/^$stabilityFlags = $this->extractStabilityFlags($links, $stabilityFlags, $realPackage->getMinimumStability());$/;"	v
stabilityFlags	composer.phar	/^$stabilityFlags = $this->locker->getStabilityFlags();$/;"	v
stabilityFlags	composer.phar	/^$stabilityFlags = $this->package->getStabilityFlags();$/;"	v
stabilityFlags	composer.phar	/^$stabilityFlags = array();$/;"	v
stabilityFlags	composer.phar	/^$this->stabilityFlags = $stabilityFlags;$/;"	v
stabilityFlags	composer.phar	/^protected $stabilityFlags = array();$/;"	v
stabilityFlags	composer.phar	/^protected $stabilityFlags;$/;"	v
stabilityModifier	composer.phar	/^$stabilityModifier = $match[2];$/;"	v
stabilitySuffix	composer.phar	/^ $stabilitySuffix = '';$/;"	v
stabilitySuffix	composer.phar	/^$stabilitySuffix = '-dev';$/;"	v
stable_sort	composer.phar	/^$stable_sort = function (&$array) {$/;"	v
stack	composer.phar	/^$this->stack = array(0);$/;"	v
stack	composer.phar	/^$this->stack = array_slice($this->stack, 0, - (2 * $n));$/;"	v
stack	composer.phar	/^private $stack;$/;"	v
start	composer.phar	/^$start = substr($m[1], 0, 1);$/;"	v
start	composer.phar	/^public function start($callback = null)$/;"	f
start	composer.phar	/^public function start($id, $message, $prefix = 'RUN')$/;"	f
start	composer.phar	/^public function start($max = null)$/;"	f
start	composer.phar	/^public function start(OutputInterface $output, $max = null)$/;"	f
startErrors	composer.phar	/^$startErrors = $this->getErrors();$/;"	v
startFlag	composer.phar	/^$this->startFlag = $startFlag;$/;"	v
startFlag	composer.phar	/^private $startFlag;$/;"	v
startJoker	composer.phar	/^$this->startJoker = $startJoker;$/;"	v
startJoker	composer.phar	/^private $startJoker;$/;"	v
startPath	composer.phar	/^$startPath = str_replace('\\\\', '\/', $startPath);$/;"	v
startPathArr	composer.phar	/^ $startPathArr = explode('\/', trim($startPath, '\/'));$/;"	v
startTime	composer.phar	/^$startTime = microtime(true);$/;"	v
startTime	composer.phar	/^$this->startTime = $startTime;$/;"	v
startTime	composer.phar	/^$this->startTime = null;$/;"	v
startTime	composer.phar	/^$this->startTime = time();$/;"	v
startTime	composer.phar	/^private $startTime;$/;"	v
started	composer.phar	/^private $started = array();$/;"	v
starttime	composer.phar	/^$this->starttime = $this->lastOutputTime = microtime(true);$/;"	v
starttime	composer.phar	/^$this->starttime = null;$/;"	v
starttime	composer.phar	/^private $starttime;$/;"	v
stashChanges	composer.phar	/^protected function stashChanges($path)$/;"	f
stat	composer.phar	/^$stat = $zip->statIndex($i);$/;"	v
state	composer.phar	/^ $state = $this->stack[count($this->stack)-1];$/;"	v
state	composer.phar	/^$state = $this->stack[count($this->stack)-1];$/;"	v
state	composer.phar	/^$state = null;$/;"	v
status	composer.phar	/^$status = $install->run();$/;"	v
status	composer.phar	/^$status = $installer->run();$/;"	v
status	composer.phar	/^$status = $this->process->execute($svnCommand, $handler, $cwd);$/;"	v
status	composer.phar	/^$this->status = self::STATUS_READY;$/;"	v
status	composer.phar	/^$this->status = self::STATUS_STARTED;$/;"	v
status	composer.phar	/^$this->status = self::STATUS_TERMINATED;$/;"	v
status	composer.phar	/^private $status = self::STATUS_READY;$/;"	v
statusCode	composer.phar	/^$statusCode = $this->execute($input, $output);$/;"	v
statusCode	composer.phar	/^$statusCode = call_user_func($this->code, $input, $output);$/;"	v
statusCode	composer.phar	/^private $statusCode;$/;"	v
stderr	composer.phar	/^$this->stderr = $error;$/;"	v
stderr	composer.phar	/^$this->stderr = '';$/;"	v
stderr	composer.phar	/^$this->stderr = new StreamOutput($this->openErrorStream(), $verbosity, $decorated, $this->getFormatter());$/;"	v
stderr	composer.phar	/^$this->stderr = null;$/;"	v
stderr	composer.phar	/^private $stderr;$/;"	v
stdin	composer.phar	/^$stdin = fopen('php:\/\/stdin', 'r');$/;"	v
stdout	composer.phar	/^$this->stdout = '';$/;"	v
stdout	composer.phar	/^$this->stdout = null;$/;"	v
stdout	composer.phar	/^private $stdout;$/;"	v
step	composer.phar	/^$step = (int) $step;$/;"	v
step	composer.phar	/^$this->step = $step;$/;"	v
step	composer.phar	/^$this->step = 0;$/;"	v
step	composer.phar	/^private $step = 0;$/;"	v
stepWidth	composer.phar	/^$this->stepWidth = $this->max ? Helper::strlen($this->max) : 4;$/;"	v
stepWidth	composer.phar	/^private $stepWidth;$/;"	v
stop	composer.phar	/^public function stop($id, $message, $successful, $prefix = 'RES')$/;"	f
stop	composer.phar	/^public function stop($timeout = 10, $signal = null)$/;"	f
stopPropagation	composer.phar	/^public function stopPropagation()$/;"	f
store	composer.phar	/^$store = $configSource;$/;"	v
store	composer.phar	/^$store = false;$/;"	v
storeAuth	composer.phar	/^$storeAuth = $this->config->get('store-auths');$/;"	v
storeAuth	composer.phar	/^$storeAuth = false;$/;"	v
storeAuth	composer.phar	/^$this->storeAuth = $this->config->get('store-auths');$/;"	v
storeAuth	composer.phar	/^$this->storeAuth = false;$/;"	v
storeAuth	composer.phar	/^private $storeAuth;$/;"	v
storeAuth	composer.phar	/^public function storeAuth($originUrl, $storeAuth)$/;"	f
strLen	composer.phar	/^$strLen = strlen($json);$/;"	v
stream	composer.phar	/^$this->stream = $stream;$/;"	v
stream	composer.phar	/^private $stream;$/;"	v
strictName	composer.phar	/^$this->strictName = $strictName;$/;"	v
strictName	composer.phar	/^private $strictName;$/;"	v
string	composer.phar	/^ $string = $formatter->format($string);$/;"	v
string	composer.phar	/^ $string = preg_replace("\/\\033\\[[^m]*m\/", '', $string);$/;"	v
string	composer.phar	/^$string = "\\n";$/;"	v
stringInterpolation	composer.phar	/^private function stringInterpolation($match)$/;"	f
stringWidth	composer.phar	/^private function stringWidth($string)$/;"	f
strlen	composer.phar	/^private function strlen($string)$/;"	f
strlen	composer.phar	/^public static function strlen($string)$/;"	f
strlenWithoutDecoration	composer.phar	/^public static function strlenWithoutDecoration(OutputFormatterInterface $formatter, $string)$/;"	f
stty	composer.phar	/^private static $stty;$/;"	v
sttyMode	composer.phar	/^$sttyMode = shell_exec('stty -g');$/;"	v
style	composer.phar	/^$style = new OutputFormatterStyle();$/;"	v
style	composer.phar	/^$this->style = $name;$/;"	v
style	composer.phar	/^$this->style = self::$styles[$name];$/;"	v
style	composer.phar	/^private $style;$/;"	v
styleGuide	composer.phar	/^$styleGuide = new TableStyle();$/;"	v
styleStack	composer.phar	/^$this->styleStack = new OutputFormatterStyleStack();$/;"	v
styleStack	composer.phar	/^private $styleStack;$/;"	v
styles	composer.phar	/^$styles = Factory::createAdditionalStyles();$/;"	v
styles	composer.phar	/^$this->styles = array();$/;"	v
styles	composer.phar	/^$this->styles = array_slice($this->styles, 0, $index);$/;"	v
styles	composer.phar	/^private $styles = array();$/;"	v
styles	composer.phar	/^private $styles;$/;"	v
styles	composer.phar	/^private static $styles;$/;"	v
subName	composer.phar	/^$subName = null;$/;"	v
subPath	composer.phar	/^$this->subPath = $this->subPathname = '';$/;"	v
subPath	composer.phar	/^$this->subPath = '.' === $dir ? '' : $dir;$/;"	v
subPath	composer.phar	/^private $subPath;$/;"	v
subPathname	composer.phar	/^$subPathname = $this->subPath = (string) $this->getSubPath();$/;"	v
subPathname	composer.phar	/^$this->subPathname = ltrim(substr($absolutePath, $this->baseDirLength), '\/\\\\');$/;"	v
subPathname	composer.phar	/^private $subPathname;$/;"	v
subSchema	composer.phar	/^$subSchema = new \\stdClass();$/;"	v
subject	composer.phar	/^$subject = $subject[0];$/;"	v
success	composer.phar	/^public function success($message)$/;"	f
success	composer.phar	/^public function success($message);$/;"	f
suffix	composer.phar	/^$suffix = $config->get('autoloader-suffix') ?: md5(uniqid('', true));$/;"	v
suffix	composer.phar	/^$suffix = $match[1];$/;"	v
suffixes	composer.phar	/^$suffixes = $pathExt ? explode(PATH_SEPARATOR, $pathExt) : $this->suffixes;$/;"	v
suffixes	composer.phar	/^$suffixes = array('');$/;"	v
suffixes	composer.phar	/^$this->suffixes = $suffixes;$/;"	v
suffixes	composer.phar	/^private $suffixes = array('.exe', '.bat', '.cmd', '.com');$/;"	v
suggestName	composer.phar	/^$suggestName = preg_replace('{(?:([a-z])([A-Z])|([A-Z])([A-Z][a-z]))}', '\\\\1\\\\3-\\\\2\\\\4', $manifest['name']);$/;"	v
suggestName	composer.phar	/^$suggestName = strtolower($suggestName);$/;"	v
suggestedPackages	composer.phar	/^$this->suggestedPackages = array();$/;"	v
suggestedPackages	composer.phar	/^protected $suggestedPackages;$/;"	v
suggestions	composer.phar	/^$suggestions = $this->getAbbreviationSuggestions(array_values($commands));$/;"	v
suggests	composer.phar	/^$suggests = array();$/;"	v
suggests	composer.phar	/^$this->suggests = $suggests;$/;"	v
suggests	composer.phar	/^protected $suggests = array();$/;"	v
support	composer.phar	/^$support = $package->getSupport();$/;"	v
support	composer.phar	/^$this->support = $support;$/;"	v
support	composer.phar	/^protected $support = array();$/;"	v
supportedLinkTypes	composer.phar	/^public static $supportedLinkTypes = array($/;"	v
supportedVersions	composer.phar	/^$supportedVersions = array_keys($this->readerMap);$/;"	v
supports	composer.phar	/^public function supports($format, $sourceType)$/;"	f
supports	composer.phar	/^public function supports($format, $sourceType);$/;"	f
supports	composer.phar	/^public function supports($packageType)$/;"	f
supports	composer.phar	/^public function supports($packageType);$/;"	f
supports	composer.phar	/^public static function supports(IOInterface $io, Config $config, $url, $deep = false)$/;"	f
supports	composer.phar	/^public static function supports(IOInterface $io, Config $config, $url, $deep = false);$/;"	f
svnCommand	composer.phar	/^$svnCommand = $this->getCommand($command, $url, $path);$/;"	v
symbol	composer.phar	/^ $symbol = $TERROR; $/;"	v
symbol	composer.phar	/^ $symbol = $preErrorSymbol;$/;"	v
symbol	composer.phar	/^ $symbol = null;$/;"	v
symbol	composer.phar	/^$symbol = $this->lex();$/;"	v
symbol	composer.phar	/^$symbol = null;$/;"	v
symbols	composer.phar	/^private $symbols = array($/;"	v
symlink	composer.phar	/^public function symlink($originDir, $targetDir, $copyOnWindows = false)$/;"	f
syncCodeBase	composer.phar	/^public function syncCodeBase($sourceReference)$/;"	f
synopsis	composer.phar	/^$synopsis = sprintf('%s%s',$/;"	v
synopsis	composer.phar	/^private $synopsis = array();$/;"	v
systemLevel	composer.phar	/^$systemLevel = $level + 1;$/;"	v
systemLevel	composer.phar	/^$systemLevel = $level;$/;"	v
table	composer.phar	/^$table = new Table($output);$/;"	v
table	composer.phar	/^$table = new Table($this);$/;"	v
table	composer.phar	/^$this->table = new Table(new NullOutput());$/;"	v
table	composer.phar	/^private $table = array(array(3 => 5, 4 => array(1,12), 5 => 6, 6 => array(1,13), 7 => 3, 8 => array(1,9), 9 => 4, 10 => array(1,10), 11 => array(1,11), 12 => 1, 13 => 2, 15 => 7, 16 => 8, 17 => array(1,14), 23 => array(1,15)), array( 1 => array(3)), array( 14 => array(1,16)), array( 14 => array(2,7), 18 => array(2,7), 22 => array(2,7), 24 => array(2,7)), array( 14 => array(2,8), 18 => array(2,8), 22 => array(2,8), 24 => array(2,8)), array( 14 => array(2,9), 18 => array(2,9), 22 => array(2,9), 24 => array(2,9)), array( 14 => array(2,10), 18 => array(2,10), 22 => array(2,10), 24 => array(2,10)), array( 14 => array(2,11), 18 => array(2,11), 22 => array(2,11), 24 => array(2,11)), array( 14 => array(2,12), 18 => array(2,12), 22 => array(2,12), 24 => array(2,12)), array( 14 => array(2,3), 18 => array(2,3), 22 => array(2,3), 24 => array(2,3)), array( 14 => array(2,4), 18 => array(2,4), 22 => array(2,4), 24 => array(2,4)), array( 14 => array(2,5), 18 => array(2,5), 22 => array(2,5), 24 => array(2,5)), array( 14 => array(2,1), 18 => array(2,1), 21 => array(2,1), 22 => array(2,1), 24 => array(2,1)), array( 14 => array(2,2), 18 => array(2,2), 22 => array(2,2), 24 => array(2,2)), array( 3 => 20, 4 => array(1,12), 18 => array(1,17), 19 => 18, 20 => 19 ), array( 3 => 5, 4 => array(1,12), 5 => 6, 6 => array(1,13), 7 => 3, 8 => array(1,9), 9 => 4, 10 => array(1,10), 11 => array(1,11), 13 => 23, 15 => 7, 16 => 8, 17 => array(1,14), 23 => array(1,15), 24 => array(1,21), 25 => 22 ), array( 1 => array(2,6)), array( 14 => array(2,13), 18 => array(2,13), 22 => array(2,13), 24 => array(2,13)), array( 18 => array(1,24), 22 => array(1,25)), array( 18 => array(2,16), 22 => array(2,16)), array( 21 => array(1,26)), array( 14 => array(2,18), 18 => array(2,18), 22 => array(2,18), 24 => array(2,18)), array( 22 => array(1,28), 24 => array(1,27)), array( 22 => array(2,20), 24 => array(2,20)), array( 14 => array(2,14), 18 => array(2,14), 22 => array(2,14), 24 => array(2,14)), array( 3 => 20, 4 => array(1,12), 20 => 29 ), array( 3 => 5, 4 => array(1,12), 5 => 6, 6 => array(1,13), 7 => 3, 8 => array(1,9), 9 => 4, 10 => array(1,10), 11 => array(1,11), 13 => 30, 15 => 7, 16 => 8, 17 => array(1,14), 23 => array(1,15)), array( 14 => array(2,19), 18 => array(2,19), 22 => array(2,19), 24 => array(2,19)), array( 3 => 5, 4 => array(1,12), 5 => 6, 6 => array(1,13), 7 => 3, 8 => array(1,9), 9 => 4, 10 => array(1,10), 11 => array(1,11), 13 => 31, 15 => 7, 16 => 8, 17 => array(1,14), 23 => array(1,15)), array( 18 => array(2,17), 22 => array(2,17)), array( 18 => array(2,15), 22 => array(2,15)), array( 22 => array(2,21), 24 => array(2,21)),$/;"	v
table	composer.phar	/^private $table;$/;"	v
table	composer.phar	/^public function table(array $headers, array $rows)$/;"	f
table	composer.phar	/^public function table(array $headers, array $rows);$/;"	f
tableRows	composer.phar	/^$tableRows = array();$/;"	v
tableRows	composer.phar	/^$tableRows = array_merge($tableRows, $unmergedRows[$rowKey]);$/;"	v
tag	composer.phar	/^ $tag = str_replace('release-', '', $tag);$/;"	v
tag	composer.phar	/^$tag = $matches[1][$i][0];$/;"	v
tag	composer.phar	/^$tag = isset($matches[3][$i][0]) ? $matches[3][$i][0] : '';$/;"	v
tagRegex	composer.phar	/^$tagRegex = '[a-z][a-z0-9_=;-]*';$/;"	v
tags	composer.phar	/^$tags = $this->perforce->getTags();$/;"	v
tags	composer.phar	/^$tags = array();$/;"	v
tags	composer.phar	/^$this->tags = $tags;$/;"	v
tags	composer.phar	/^$this->tags = array();$/;"	v
tags	composer.phar	/^protected $tags;$/;"	v
tagsData	composer.phar	/^$tagsData = JsonFile::parseJson($this->getContents($resource), $resource);$/;"	v
tagsPath	composer.phar	/^$tagsPath = isset($packageConfig['tags-path']) ? preg_quote($packageConfig['tags-path'], '#') : 'tags';$/;"	v
tagsPath	composer.phar	/^$this->tagsPath = $this->repoConfig['tags-path'];$/;"	v
tagsPath	composer.phar	/^protected $tagsPath = 'tags';$/;"	v
target	composer.phar	/^$target = $date->format('U');$/;"	v
target	composer.phar	/^$target = $link->getTarget();$/;"	v
target	composer.phar	/^$target = $matches[2];$/;"	v
target	composer.phar	/^$target = $operation->getTargetPackage();$/;"	v
target	composer.phar	/^$target = $suggestion['target'];$/;"	v
target	composer.phar	/^$target = fopen($target, 'w+');$/;"	v
target	composer.phar	/^$target = fopen($tmpExe, 'w+');$/;"	v
target	composer.phar	/^$target = realpath($targetDir).'\/'.$packageName.'.'.$format;$/;"	v
target	composer.phar	/^$target = str_replace($originDir, $targetDir, $file->getPathname());$/;"	v
target	composer.phar	/^$this->target = $target;$/;"	v
target	composer.phar	/^$this->target = strtolower($target);$/;"	v
target	composer.phar	/^private $target;$/;"	v
target	composer.phar	/^protected $target;$/;"	v
targetDir	composer.phar	/^$targetDir = $im->getInstallPath($package);$/;"	v
targetDir	composer.phar	/^$targetDir = $package->getTargetDir();$/;"	v
targetDir	composer.phar	/^$targetDir = $vendorPath.'\/'.$targetDir;$/;"	v
targetDir	composer.phar	/^$targetDir = rtrim($targetDir, '\/\\\\');$/;"	v
targetDir	composer.phar	/^$targetDir = str_replace('\\\\<dirsep\\\\>', '[\\\\\\\\\/]', preg_quote(str_replace(array('\/', '\\\\'), '<dirsep>', $package->getTargetDir())));$/;"	v
targetDir	composer.phar	/^$this->targetDir = $targetDir;$/;"	v
targetDir	composer.phar	/^protected $targetDir;$/;"	v
targetDirLoader	composer.phar	/^ $targetDirLoader = null;$/;"	v
targetDirLoader	composer.phar	/^$targetDirLoader = <<<EOF$/;"	v
targetDownloadPath	composer.phar	/^$targetDownloadPath = $this->getInstallPath($target);$/;"	v
targetFile	composer.phar	/^$targetFile = fopen($targetFilepath, 'wb');$/;"	v
targetFilepath	composer.phar	/^$targetFilepath = $path . DIRECTORY_SEPARATOR . basename(substr($file, 0, -3));$/;"	v
targetName	composer.phar	/^$targetName = $this->reasonData->getTarget();$/;"	v
targetPackage	composer.phar	/^$this->targetPackage = $target;$/;"	v
targetPackage	composer.phar	/^protected $targetPackage;$/;"	v
targetPath	composer.phar	/^$targetPath = $target . DIRECTORY_SEPARATOR . $ri->getSubPathName();$/;"	v
targetType	composer.phar	/^$targetType = $target->getDistType();$/;"	v
targetType	composer.phar	/^$targetType = $target->getSourceType();$/;"	v
targetType	composer.phar	/^$targetType = $target->getType();$/;"	v
task	composer.phar	/^$task = 'client -d ' . $client;$/;"	v
tasks	composer.phar	/^$tasks = $file['tasks'];$/;"	v
tempFilename	composer.phar	/^$tempFilename = $tmpDir . '\/' . basename($localFilename, '.phar').'-temp.phar';$/;"	v
tempTarget	composer.phar	/^ $tempTarget = sys_get_temp_dir().'\/composer_archive'.uniqid().'.'.$format;$/;"	v
template	composer.phar	/^ $template = 'git checkout %s -- && git reset --hard %1$s --';$/;"	v
template	composer.phar	/^$template = 'Found package <info>%s<\/info> (<comment>%s<\/comment>) in file <info>%s<\/info>';$/;"	v
temporaryDir	composer.phar	/^$temporaryDir = $this->config->get('vendor-dir').'\/composer\/'.substr(md5(uniqid('', true)), 0, 8);$/;"	v
terminalDimensions	composer.phar	/^$this->terminalDimensions = array($width, $height);$/;"	v
terminalDimensions	composer.phar	/^private $terminalDimensions;$/;"	v
terminals_	composer.phar	/^private $terminals_ = array($/;"	v
test	composer.phar	/^ $test = "\/usr\/bin\/env %s -c 'echo OK' 2> \/dev\/null";$/;"	v
test	composer.phar	/^public function test($test)$/;"	f
test	composer.phar	/^public function test($url)$/;"	f
testCommand	composer.phar	/^ $testCommand = 'which ';$/;"	v
testCommand	composer.phar	/^$testCommand = 'where ';$/;"	v
testCommand	composer.phar	/^public function testCommand($command)$/;"	f
testResult	composer.phar	/^$testResult = $channelXml->xpath($xpathTest);$/;"	v
text	composer.phar	/^$text = "PHP was compiled with --enable-sigchild which can cause issues on some platforms.".PHP_EOL;$/;"	v
text	composer.phar	/^$text = "PHP was compiled with --with-curlwrappers which will cause issues with HTTP authentication and GitHub.".PHP_EOL;$/;"	v
text	composer.phar	/^$text = "The apc.enable_cli setting is incorrect.".PHP_EOL;$/;"	v
text	composer.phar	/^$text = "The xdebug extension is loaded, this can slow down Composer a little.".PHP_EOL;$/;"	v
text	composer.phar	/^$text = "The xdebug.profiler_enabled setting is enabled, this can slow down Composer a lot.".PHP_EOL;$/;"	v
text	composer.phar	/^$text = "Your PHP ({$current}) is quite old, upgrading to PHP 5.3.4 or higher is recommended.".PHP_EOL;$/;"	v
text	composer.phar	/^$text = "\\n";$/;"	v
text	composer.phar	/^$text = $format[1];$/;"	v
text	composer.phar	/^$text = $match[0];$/;"	v
text	composer.phar	/^$text = $messages[$matches[1]];$/;"	v
text	composer.phar	/^$text = $question->getQuestion();$/;"	v
text	composer.phar	/^$text = $this->reasonData->getPrettyString($sourcePackage);$/;"	v
text	composer.phar	/^$text = '';$/;"	v
text	composer.phar	/^$text = PHP_EOL."The allow_url_fopen setting is incorrect.".PHP_EOL;$/;"	v
text	composer.phar	/^$text = PHP_EOL."The detect_unicode setting must be disabled.".PHP_EOL;$/;"	v
text	composer.phar	/^$text = PHP_EOL."The filter extension is missing.".PHP_EOL;$/;"	v
text	composer.phar	/^$text = PHP_EOL."The hash extension is missing.".PHP_EOL;$/;"	v
text	composer.phar	/^$text = PHP_EOL."The json extension is missing.".PHP_EOL;$/;"	v
text	composer.phar	/^$text = PHP_EOL."The openssl extension is missing, which means that secure HTTPS transfers are impossible.".PHP_EOL;$/;"	v
text	composer.phar	/^$text = PHP_EOL."The phar extension is missing.".PHP_EOL;$/;"	v
text	composer.phar	/^$text = PHP_EOL."The suhosin.executor.include.whitelist setting is incorrect.".PHP_EOL;$/;"	v
text	composer.phar	/^$text = PHP_EOL."Your PHP ({$current}) is too old, you must upgrade to PHP 5.3.2 or higher.";$/;"	v
text	composer.phar	/^$text = PHP_EOL."Your ionCube Loader extension ($current) is incompatible with Phar files.".PHP_EOL;$/;"	v
text	composer.phar	/^$text = call_user_func($formatter, $self, $output);$/;"	v
text	composer.phar	/^$text = ceil($secs \/ $format[2]).' '.$format[1];$/;"	v
text	composer.phar	/^$text = sprintf(' <info>%s (yes\/no)<\/info> [<comment>%s<\/comment>]:', $text, $default ? 'yes' : 'no');$/;"	v
text	composer.phar	/^$text = sprintf(' <info>%s<\/info> [<comment>%s<\/comment>]:', $text, $choices[$default]);$/;"	v
text	composer.phar	/^$text = sprintf(' <info>%s<\/info> [<comment>%s<\/comment>]:', $text, $default);$/;"	v
text	composer.phar	/^$text = sprintf(' <info>%s<\/info>:', $text);$/;"	v
text	composer.phar	/^$text = sprintf('%'.$matches[2], $text);$/;"	v
text	composer.phar	/^$text = substr($info['line_buffer'], 0, $info['end']);$/;"	v
text	composer.phar	/^public function text($message)$/;"	f
text	composer.phar	/^public function text($message);$/;"	f
that	composer.phar	/^$that = $this;$/;"	v
threshold	composer.phar	/^$threshold = 1e3;$/;"	v
throwEncodeError	composer.phar	/^private static function throwEncodeError($code)$/;"	f
throwException	composer.phar	/^private function throwException($message, $url)$/;"	f
time	composer.phar	/^ $time = $this->getPackageTime($package) ?: $time;$/;"	v
time	composer.phar	/^ $time = isset($spec['time']) ? $spec['time'] : null;$/;"	v
time	composer.phar	/^$time = preg_match('\/^\\d++$\/D', $config['time']) ? '@'.$config['time'] : $config['time'];$/;"	v
timeFormats	composer.phar	/^private $timeFormats = array($/;"	v
timeFormats	composer.phar	/^static $timeFormats = array($/;"	v
timeSpent	composer.phar	/^$timeSpent = microtime(true) - $this->startTime;$/;"	v
timeout	composer.phar	/^$this->timeout = $this->validateTimeout($timeout);$/;"	v
timeout	composer.phar	/^$this->timeout = $timeout;$/;"	v
timeout	composer.phar	/^$this->timeout = null;$/;"	v
timeout	composer.phar	/^$timeout = (float) $timeout;$/;"	v
timeout	composer.phar	/^$timeout = null;$/;"	v
timeout	composer.phar	/^private $timeout = 60;$/;"	v
timeout	composer.phar	/^private $timeout;$/;"	v
timeout	composer.phar	/^protected static $timeout = 300;$/;"	v
timeoutMicro	composer.phar	/^$timeoutMicro = microtime(true) + $timeout;$/;"	v
timeoutType	composer.phar	/^$this->timeoutType = $timeoutType;$/;"	v
timeoutType	composer.phar	/^private $timeoutType;$/;"	v
title	composer.phar	/^$title = $title ?: $linkType;$/;"	v
title	composer.phar	/^$title = sprintf('  [%s]  ', get_class($e));$/;"	v
title	composer.phar	/^public function title($message)$/;"	f
title	composer.phar	/^public function title($message);$/;"	f
tmpDir	composer.phar	/^ $tmpDir = is_writable(dirname($localFilename)) ? dirname($localFilename) : $cacheDir;$/;"	v
tmpExe	composer.phar	/^$tmpExe = sys_get_temp_dir().'\/hiddeninput.exe';$/;"	v
tmpFile	composer.phar	/^$tmpFile = tempnam($dir, basename($filename));$/;"	v
to	composer.phar	/^$to = $target->getFullPrettyVersion();$/;"	v
to	composer.phar	/^$to = $target->getSourceReference();$/;"	v
to	composer.phar	/^$to = $this->combine($target, $roles[$file['role']]);$/;"	v
to	composer.phar	/^$to = $this->combine($to, $file['to']);$/;"	v
to	composer.phar	/^$to = lcfirst($this->normalizePath($to));$/;"	v
to	composer.phar	/^$to = substr($target->getSourceReference(), 0, 7);$/;"	v
toChangeList	composer.phar	/^$toChangeList = $this->getChangeList($toReference);$/;"	v
toIterator	composer.phar	/^private function toIterator($files)$/;"	f
toRegex	composer.phar	/^protected function toRegex($str)$/;"	f
toRegex	composer.phar	/^public function toRegex($strictLeadingDot = true, $strictWildcardSlash = true)$/;"	f
toRegex	composer.phar	/^public static function toRegex($glob, $strictLeadingDot = true, $strictWildcardSlash = true, $delimiter = '#')$/;"	f
toRevision	composer.phar	/^$toRevision = preg_replace('{.*@(\\d+)$}', '$1', $toReference);$/;"	v
token	composer.phar	/^$token = $this->lexer->lex() ?: 1; $/;"	v
token	composer.phar	/^$token = $this->performAction($rules[$i], $this->conditionStack[count($this->conditionStack)-1]);$/;"	v
token	composer.phar	/^$token = array_shift($tokens);$/;"	v
token	composer.phar	/^$token = isset($this->symbols[$token]) ? $this->symbols[$token] : $token;$/;"	v
token	composer.phar	/^$token = null;$/;"	v
token	composer.phar	/^$token = trim($this->io->askAndHideAnswer('Token (hidden): '));$/;"	v
tokenize	composer.phar	/^private function tokenize($input)$/;"	f
tokens	composer.phar	/^ $tokens = preg_split('{\\s+}', $input->__toString());$/;"	v
tokens	composer.phar	/^$this->tokens = $argv;$/;"	v
tokens	composer.phar	/^$this->tokens = $tokens;$/;"	v
tokens	composer.phar	/^$tokens = $this->tokens;$/;"	v
tokens	composer.phar	/^$tokens = array();$/;"	v
tokens	composer.phar	/^$tokens = array_map(function ($token) use ($self) {$/;"	v
tokens	composer.phar	/^private $tokens;$/;"	v
tokens	composer.phar	/^protected $tokens;$/;"	v
top	composer.phar	/^public function top($bit)$/;"	f
total	composer.phar	/^$total = 0;$/;"	v
totalSize	composer.phar	/^$totalSize = $this->filesystem->size($this->root);$/;"	v
totalWidth	composer.phar	/^$totalWidth = $this->calculateTotalWidthForOptions($definition->getOptions());$/;"	v
totalWidth	composer.phar	/^$totalWidth = 0;$/;"	v
totalWidth	composer.phar	/^$totalWidth = isset($options['total_width']) ? $options['total_width'] : $this->calculateTotalWidthForOptions(array($option));$/;"	v
totalWidth	composer.phar	/^$totalWidth = isset($options['total_width']) ? $options['total_width'] : strlen($argument->getName());$/;"	v
totalWidth	composer.phar	/^$totalWidth = max($totalWidth, $nameLength);$/;"	v
totalWidth	composer.phar	/^$totalWidth = max($totalWidth, strlen($argument->getName()));$/;"	v
touch	composer.phar	/^$touch = $time ? @touch($file, $time, $atime) : @touch($file);$/;"	v
touch	composer.phar	/^public function touch($files, $time = null, $atime = null)$/;"	f
trace	composer.phar	/^ $trace = $e->getTrace();$/;"	v
trailingEOL	composer.phar	/^$trailingEOL = isset($this->started[$id]['out']) || isset($this->started[$id]['err']) ? "\\n" : '';$/;"	v
transOpInt	composer.phar	/^private static $transOpInt = array($/;"	v
transOpStr	composer.phar	/^private static $transOpStr = array($/;"	v
transaction	composer.phar	/^$this->transaction = array();$/;"	v
transaction	composer.phar	/^$transaction = new Transaction($this->policy, $this->pool, $this->installedMap, $this->decisions);$/;"	v
transaction	composer.phar	/^protected $transaction;$/;"	v
transactionFromMaps	composer.phar	/^protected function transactionFromMaps($installMap, $updateMap, $uninstallMap)$/;"	f
transform	composer.phar	/^$transform = function (&$v, $k) use (&$i) {$/;"	v
transformVersion	composer.phar	/^private function transformVersion($version, $prettyVersion, $stability)$/;"	f
transportOptions	composer.phar	/^$this->transportOptions = $options;$/;"	v
transportOptions	composer.phar	/^$this->transportOptions = array();$/;"	v
transportOptions	composer.phar	/^protected $transportOptions;$/;"	v
traverser	composer.phar	/^ $traverser = str_repeat('..\/', $depth);$/;"	v
traverser	composer.phar	/^$traverser = '';$/;"	v
tree	composer.phar	/^$tree = !$input->getOption('platform') && !$input->getOption('installed') && !$input->getOption('available');$/;"	v
trimAnswer	composer.phar	/^private static function trimAnswer($str)$/;"	f
trueAnswerRegex	composer.phar	/^$this->trueAnswerRegex = $trueAnswerRegex;$/;"	v
trueAnswerRegex	composer.phar	/^private $trueAnswerRegex;$/;"	v
trunkParent	composer.phar	/^$trunkParent = $this->baseUrl . '\/' . $this->trunkPath;$/;"	v
trunkParent	composer.phar	/^$trunkParent = $this->baseUrl . '\/';$/;"	v
trunkPath	composer.phar	/^$this->trunkPath = $this->repoConfig['trunk-path'];$/;"	v
trunkPath	composer.phar	/^$trunkPath = isset($packageConfig['trunk-path']) ? preg_quote($packageConfig['trunk-path'], '#') : 'trunk';$/;"	v
trunkPath	composer.phar	/^protected $trunkPath = 'trunk';$/;"	v
tty	composer.phar	/^$this->tty = (bool) $tty;$/;"	v
tty	composer.phar	/^private $tty;$/;"	v
ttyMode	composer.phar	/^$this->ttyMode = (bool) $ttyMode;$/;"	v
ttyMode	composer.phar	/^private $ttyMode;$/;"	v
type	composer.phar	/^ $type = (false !== $found = array_search($pipe, $this->pipes)) ? $found : 'input';$/;"	v
type	composer.phar	/^$this->type = $this->guessType();$/;"	v
type	composer.phar	/^$this->type = $type;$/;"	v
type	composer.phar	/^$this->type = isset($repoConfig['type']) ? $repoConfig['type'] : 'vcs';$/;"	v
type	composer.phar	/^$type = $input->getOption('dev') ? 'require-dev' : 'require';$/;"	v
type	composer.phar	/^$type = $input->getOption('type') ?: false;$/;"	v
type	composer.phar	/^$type = $io->ask($/;"	v
type	composer.phar	/^$type = '<comment>available<\/comment>:';$/;"	v
type	composer.phar	/^$type = '<info>installed<\/info>:';$/;"	v
type	composer.phar	/^$type = '<info>platform<\/info>:';$/;"	v
type	composer.phar	/^$type = gettype($element);$/;"	v
type	composer.phar	/^$type = isset($schema->type) ? $schema->type : null;$/;"	v
type	composer.phar	/^$type = isset($trace[$i]['type']) ? $trace[$i]['type'] : '';$/;"	v
type	composer.phar	/^$type = rtrim($type, 's');$/;"	v
type	composer.phar	/^$type = strtolower($type);$/;"	v
type	composer.phar	/^private $type;$/;"	v
type	composer.phar	/^protected $type;$/;"	v
typeSchema	composer.phar	/^$typeSchema = new \\stdClass();$/;"	v
typehint	composer.phar	/^$typehint = $reflected->getClass();$/;"	v
types	composer.phar	/^$this->types = array_keys($rules);$/;"	v
types	composer.phar	/^$types = array($types);$/;"	v
types	composer.phar	/^$types = array('psr-0', 'psr-4', 'classmap', 'files', 'exclude-from-classmap');$/;"	v
types	composer.phar	/^$types = array_map(function ($type) use ($linkTypes) {$/;"	v
types	composer.phar	/^$types = self::$types;$/;"	v
types	composer.phar	/^protected $types;$/;"	v
types	composer.phar	/^protected static $types = array($/;"	v
unblock	composer.phar	/^protected function unblock()$/;"	f
unboundConstraint	composer.phar	/^$unboundConstraint = new Constraint('=', $this->versionParser->normalize('dev-master'));$/;"	v
undecided	composer.phar	/^public function undecided($literalOrPackageId)$/;"	f
unescapeSlashes	composer.phar	/^$unescapeSlashes = (bool) ($options & self::JSON_UNESCAPED_SLASHES);$/;"	v
unescapeUnicode	composer.phar	/^$unescapeUnicode = (bool) ($options & self::JSON_UNESCAPED_UNICODE);$/;"	v
uninstOps	composer.phar	/^$uninstOps = array();$/;"	v
uninstall	composer.phar	/^protected function uninstall($package, $reason)$/;"	f
uninstall	composer.phar	/^public function uninstall(InstalledRepositoryInterface $repo, PackageInterface $package)$/;"	f
uninstall	composer.phar	/^public function uninstall(InstalledRepositoryInterface $repo, PackageInterface $package);$/;"	f
uninstall	composer.phar	/^public function uninstall(RepositoryInterface $repo, UninstallOperation $operation)$/;"	f
uninstallMap	composer.phar	/^$uninstallMap = array();$/;"	v
unique	composer.phar	/^$unique = $value;$/;"	v
unique	composer.phar	/^$unique = array_map(function($e) { return var_export($e, true); }, $value);$/;"	v
uniqueConfigValues	composer.phar	/^ $uniqueConfigValues = array($/;"	v
uniquePerforceClientName	composer.phar	/^$this->uniquePerforceClientName = $repoConfig['unique_perforce_client_name'];$/;"	v
uniquePerforceClientName	composer.phar	/^$this->uniquePerforceClientName = $this->generateUniquePerforceClientName();$/;"	v
uniquePerforceClientName	composer.phar	/^protected $uniquePerforceClientName;$/;"	v
unit	composer.phar	/^        $unit = strtolower(substr($value, -1, 1));$/;"	v
unlink	composer.phar	/^public function unlink($path)$/;"	f
unlinkImplementation	composer.phar	/^private function unlinkImplementation($path)$/;"	f
unlinkSymlinkedDirectory	composer.phar	/^private function unlinkSymlinkedDirectory($directory)$/;"	f
unmergedRows	composer.phar	/^ $unmergedRows = array_replace_recursive(array_fill($line + 1, $nbLines, ''), $unmergedRows);$/;"	v
unmergedRows	composer.phar	/^$unmergedRows = array();$/;"	v
unregister	composer.phar	/^    public function unregister()$/;"	f
unregister	composer.phar	/^public function unregister()$/;"	f
unsetCodes	composer.phar	/^$unsetCodes = array();$/;"	v
unsetOption	composer.phar	/^public function unsetOption($option)$/;"	f
unsetOption	composer.phar	/^public function unsetOption($option);$/;"	f
up	composer.phar	/^$up = !(empty($parts) || '..' === end($parts));$/;"	v
up	composer.phar	/^$up = '..' !== $chunk;$/;"	v
up	composer.phar	/^$up = false;$/;"	v
update	composer.phar	/^$this->update = (boolean) $update;$/;"	v
update	composer.phar	/^protected $update = false;$/;"	v
update	composer.phar	/^protected function update($from, $to, $reason)$/;"	f
update	composer.phar	/^public function update($packageName, ConstraintInterface $constraint = null)$/;"	f
update	composer.phar	/^public function update(InstalledRepositoryInterface $repo, PackageInterface $initial, PackageInterface $target)$/;"	f
update	composer.phar	/^public function update(InstalledRepositoryInterface $repo, PackageInterface $initial, PackageInterface $target);$/;"	f
update	composer.phar	/^public function update(PackageInterface $initial, PackageInterface $target, $path)$/;"	f
update	composer.phar	/^public function update(PackageInterface $initial, PackageInterface $target, $path);$/;"	f
update	composer.phar	/^public function update(PackageInterface $initial, PackageInterface $target, $targetDir)$/;"	f
update	composer.phar	/^public function update(RepositoryInterface $repo, UpdateOperation $operation)$/;"	f
updateAll	composer.phar	/^public function updateAll()$/;"	f
updateCode	composer.phar	/^protected function updateCode(PackageInterface $initial, PackageInterface $target)$/;"	f
updateDevMode	composer.phar	/^$updateDevMode = !$input->getOption('update-no-dev');$/;"	v
updateFileCleanly	composer.phar	/^private function updateFileCleanly($json, array $base, array $new, $requireKey, $removeKey, $sortPackages)$/;"	f
updateMap	composer.phar	/^$updateMap = array();$/;"	v
updateMap	composer.phar	/^protected $updateMap = array();$/;"	v
updatePreferredOptions	composer.phar	/^protected function updatePreferredOptions(Config $config, InputInterface $input, &$preferSource, &$preferDist, $keepVcsRequiresPreferSource = false)$/;"	f
updateStatus	composer.phar	/^protected function updateStatus($blocking)$/;"	f
updateToCommit	composer.phar	/^protected function updateToCommit($path, $reference, $branch, $date)$/;"	f
updateVersion	composer.phar	/^$updateVersion = $input->getArgument('version') ?: $latestVersion;$/;"	v
updateWhitelist	composer.phar	/^$this->updateWhitelist = array_flip(array_map('strtolower', $packages));$/;"	v
updateWhitelist	composer.phar	/^protected $updateWhitelist = null;$/;"	v
updatedLock	composer.phar	/^$updatedLock = $this->locker->setLockData($/;"	v
updates	composer.phar	/^$updates = $this->policy->findUpdatePackages($this->pool, $this->installedMap, $package);$/;"	v
upperBound	composer.phar	/^$upperBound = new Constraint('<', $highVersion);$/;"	v
upperBound	composer.phar	/^$upperBound = new Constraint('<=', $highVersion);$/;"	v
uri	composer.phar	/^$uri = $components['scheme'] . ':\/\/' $/;"	v
uri	composer.phar	/^$uri = $components['scheme'] . ':\/\/'$/;"	v
uri	composer.phar	/^$uri = parse_url($this->url);$/;"	v
uriRetriever	composer.phar	/^$this->uriRetriever = $retriever;$/;"	v
uriRetriever	composer.phar	/^$this->uriRetriever = $uriRetriever;$/;"	v
uriRetriever	composer.phar	/^$uriRetriever = $this->getUriRetriever();$/;"	v
uriRetriever	composer.phar	/^protected $uriRetriever = null;$/;"	v
uriRetriever	composer.phar	/^protected $uriRetriever;$/;"	v
url	composer.phar	/^ $url = $this->generateSshUrl();$/;"	v
url	composer.phar	/^ $url = 'https:\/\/api.github.com\/repos\/' . $match[1] . '\/'. $match[2] . '\/' . $match[3] . 'ball\/' . $package->getDistReference();$/;"	v
url	composer.phar	/^ $url = 'https:\/\/bitbucket.org\/' . $match[1] . '\/'. $match[2] . '\/get\/' . $package->getDistReference() . '.' . $match[4];$/;"	v
url	composer.phar	/^ $url = 'p\/'.$name.'.json';$/;"	v
url	composer.phar	/^$this->url = $repoConfig['url'];$/;"	v
url	composer.phar	/^$this->url = $this->baseUrl = rtrim(self::normalizeUrl($this->url), '\/');$/;"	v
url	composer.phar	/^$this->url = $url;$/;"	v
url	composer.phar	/^$this->url = rtrim($repoConfig['url'], '\/');$/;"	v
url	composer.phar	/^$this->url = str_replace('https:\/\/', 'http:\/\/', $this->url);$/;"	v
url	composer.phar	/^$url = "git@" . $match[1] . ":" . $match[2];$/;"	v
url	composer.phar	/^$url = $domain === 'github.com' ? 'https:\/\/api.'.$domain.'\/rate_limit' : 'https:\/\/'.$domain.'\/api\/rate_limit';$/;"	v
url	composer.phar	/^$url = $domain === 'github.com' ? 'https:\/\/api.'.$domain.'\/user\/repos' : 'https:\/\/'.$domain.'\/api\/v3\/user\/repos';$/;"	v
url	composer.phar	/^$url = $match[1].rawurlencode($auth['username']).':'.rawurlencode($auth['password']).'@'.$match[2].$match[3];$/;"	v
url	composer.phar	/^$url = $package->getDistUrl();$/;"	v
url	composer.phar	/^$url = $package->getHomepage();$/;"	v
url	composer.phar	/^$url = $package->getSourceUrl();$/;"	v
url	composer.phar	/^$url = $protocol .":\/\/" . $match[1] . "\/" . $match[2];$/;"	v
url	composer.phar	/^$url = $this->baseUrl . '\/' . str_replace('%hash%', $metadata['sha256'], $include);$/;"	v
url	composer.phar	/^$url = $this->getApiUrl() . '\/repos\/'.$this->owner.'\/'.$this->repository.'\/zipball\/'.$identifier;$/;"	v
url	composer.phar	/^$url = $this->getScheme() . ':\/\/bitbucket.org\/'.$this->owner.'\/'.$this->repository.'\/get\/'.$identifier.'.zip';$/;"	v
url	composer.phar	/^$url = $this->getUrl();$/;"	v
url	composer.phar	/^$url = 'bb-'.$match[1].'\/'.$match[2];$/;"	v
url	composer.phar	/^$url = 'gh-'.$match[1].'\/'.$match[2];$/;"	v
url	composer.phar	/^$url = 'http:\/\/packagist.org\/packages.json';$/;"	v
url	composer.phar	/^$url = 'https:\/\/'.$originUrl.'\/settings\/tokens\/new?scopes=repo&description=' . str_replace('%20', '+', rawurlencode($note));$/;"	v
url	composer.phar	/^$url = 'https:\/\/'.rawurlencode($auth['username']) . ':' . rawurlencode($auth['password']) . '@'.$match[1].'\/'.$match[2].'.git';$/;"	v
url	composer.phar	/^$url = 'https:\/\/api.github.com\/repos\/Seldaek\/jsonlint\/zipball\/1.0.0';$/;"	v
url	composer.phar	/^$url = Filesystem::getPlatformPath($url);$/;"	v
url	composer.phar	/^$url = ProcessExecutor::escape($url);$/;"	v
url	composer.phar	/^$url = isset($support['source']) ? $support['source'] : $package->getSourceUrl();$/;"	v
url	composer.phar	/^$url = preg_replace('{[^a-z0-9_.-]}i', '-', trim($url, '\/'));$/;"	v
url	composer.phar	/^$url = realpath($url);$/;"	v
url	composer.phar	/^$url = rtrim($origin, '\/') . '\/' . ltrim($path, '\/');$/;"	v
url	composer.phar	/^$url = self::normalizeUrl($url);$/;"	v
url	composer.phar	/^$url = str_replace('%package%', $name, $this->lazyProvidersUrl);$/;"	v
url	composer.phar	/^$url = str_replace('%package%', $package->getPrettyName(), $repoUrl);$/;"	v
url	composer.phar	/^$url = str_replace('%query%', $query, $this->searchUrl);$/;"	v
url	composer.phar	/^$url = str_replace(array('%package%', '%hash%'), array($name, $hash), $this->providersUrl);$/;"	v
url	composer.phar	/^private $url;$/;"	v
url	composer.phar	/^protected $url;$/;"	v
urlBits	composer.phar	/^ $urlBits = parse_url($this->url);$/;"	v
urlBits	composer.phar	/^$urlBits = parse_url($repoConfig['url']);$/;"	v
urlPattern	composer.phar	/^$urlPattern = '#<url>.*\/('.$trunkPath.'|('.$branchesPath.'|'. $tagsPath .')\/(.*))<\/url>#';$/;"	v
urls	composer.phar	/^$urls = $package->getDistUrls();$/;"	v
urls	composer.phar	/^$urls = $package->getSourceUrls();$/;"	v
urls	composer.phar	/^$urls = $target->getSourceUrls();$/;"	v
urls	composer.phar	/^$urls = array($url);$/;"	v
usableArchiver	composer.phar	/^ $usableArchiver = null;$/;"	v
usableArchiver	composer.phar	/^$usableArchiver = $archiver;$/;"	v
usage	composer.phar	/^$usage = sprintf('%s %s', $this->name, $usage);$/;"	v
usageList	composer.phar	/^$usageList = array();$/;"	v
usages	composer.phar	/^private $usages = array();$/;"	v
useBestAdapter	composer.phar	/^public function useBestAdapter()$/;"	f
useEnvironment	composer.phar	/^$this->useEnvironment = (bool) $useEnvironment;$/;"	v
useEnvironment	composer.phar	/^private $useEnvironment;$/;"	v
useFileHandles	composer.phar	/^$this->useFileHandles = '\\\\' === DIRECTORY_SEPARATOR;$/;"	v
useFileHandles	composer.phar	/^private $useFileHandles = false;$/;"	v
useGlobalIncludePath	composer.phar	/^$useGlobalIncludePath = (bool) $config->get('use-include-path');$/;"	v
useGrep	composer.phar	/^$useGrep = $this->shell->testCommand('grep') && $this->shell->testCommand('xargs');$/;"	v
useIncludePath	composer.phar	/^        $this->useIncludePath = $useIncludePath;$/;"	v
useIncludePath	composer.phar	/^    private $useIncludePath = false;$/;"	v
useIncludePath	composer.phar	/^$this->useIncludePath = $useIncludePath;$/;"	v
useIncludePath	composer.phar	/^private $useIncludePath = false;$/;"	v
useP4Client	composer.phar	/^$useP4Client = false;$/;"	v
useSort	composer.phar	/^$useSort = is_int($this->sort) && $this->shell->testCommand('sort') && $this->shell->testCommand('cut');$/;"	v
username	composer.phar	/^$username = $this->io->ask('      Username: ');$/;"	v
usort	composer.phar	/^private static function usort(array $versions, $direction)$/;"	f
utf8String	composer.phar	/^$utf8String = mb_convert_encoding($string, 'utf8', $encoding);$/;"	v
util	composer.phar	/^$this->util = new SvnUtil($this->baseUrl, $this->io, $this->config, $this->process);$/;"	v
util	composer.phar	/^$util = new SvnUtil($baseUrl, $this->io, $this->config);$/;"	v
util	composer.phar	/^private $util;$/;"	v
v	composer.phar	/^$v = $k;$/;"	v
v	composer.phar	/^$v = $v[3];$/;"	v
v	composer.phar	/^$v = array($v, ++$i, $k, $v);$/;"	v
val	composer.phar	/^$val = preg_replace('#^(\\$HOME|~)(\/|$)#', rtrim(getenv('HOME') ?: getenv('USERPROFILE'), '\/\\\\') . '\/', $val);$/;"	v
val	composer.phar	/^$val = rtrim($this->process($this->getComposerEnv($env) ?: $this->config[$key], $flags), '\/\\\\');$/;"	v
valid	composer.phar	/^public function valid()$/;"	f
validOffset	composer.phar	/^public function validOffset($queueOffset)$/;"	f
validate	composer.phar	/^public function validate($file, $arrayLoaderValidationFlags = ValidatingArrayLoader::CHECK_ALL)$/;"	f
validate	composer.phar	/^public function validate($license)$/;"	f
validate	composer.phar	/^public function validate()$/;"	f
validate	composer.phar	/^public function validate();$/;"	f
validateArray	composer.phar	/^private function validateArray($property, $mandatory = false)$/;"	f
validateAttempts	composer.phar	/^private function validateAttempts($interviewer, OutputInterface $output, $validator, $attempts)$/;"	f
validateAttempts	composer.phar	/^private function validateAttempts($interviewer, OutputInterface $output, Question $question)$/;"	f
validateBranch	composer.phar	/^private function validateBranch($branch)$/;"	f
validateColor	composer.phar	/^protected function validateColor($color)$/;"	f
validateCommonProperties	composer.phar	/^protected function validateCommonProperties($value, $schema = null, $path = null, $i = "")$/;"	f
validateDateTime	composer.phar	/^protected function validateDateTime($datetime, $format)$/;"	f
validateDefinition	composer.phar	/^public function validateDefinition($element, $objectDefinition = null, $path = null)$/;"	f
validateDependencies	composer.phar	/^protected function validateDependencies($value, $dependencies, $path, $i = "")$/;"	f
validateElement	composer.phar	/^public function validateElement($element, $matches, $objectDefinition = null, $path = null, $additionalProp = null)$/;"	f
validateFlatArray	composer.phar	/^private function validateFlatArray($property, $regex = null, $mandatory = false)$/;"	f
validateHostname	composer.phar	/^protected function validateHostname($host)$/;"	f
validateInput	composer.phar	/^public static function validateInput($caller, $input)$/;"	f
validateItems	composer.phar	/^protected function validateItems($value, $schema = null, $path = null, $i = null)$/;"	f
validateName	composer.phar	/^private function validateName($name)$/;"	f
validateOfProperties	composer.phar	/^protected function validateOfProperties($value, $schema, $path, $i = "")$/;"	f
validatePackage	composer.phar	/^protected function validatePackage(PackageInterface $package)$/;"	f
validatePatternProperties	composer.phar	/^public function validatePatternProperties($element, $path, $patternProperties)$/;"	f
validatePhone	composer.phar	/^protected function validatePhone($phone)$/;"	f
validateRegex	composer.phar	/^private function validateRegex($property, $regex, $mandatory = false)$/;"	f
validateRegex	composer.phar	/^protected function validateRegex($regex)$/;"	f
validateSchema	composer.phar	/^public function validateSchema($schema = self::STRICT_SCHEMA)$/;"	f
validateString	composer.phar	/^private function validateString($property, $mandatory = false)$/;"	f
validateStyle	composer.phar	/^protected function validateStyle($style)$/;"	f
validateSyntax	composer.phar	/^protected static function validateSyntax($json, $file = null)$/;"	f
validateTag	composer.phar	/^private function validateTag($version)$/;"	f
validateTimeout	composer.phar	/^private function validateTimeout($timeout)$/;"	f
validateType	composer.phar	/^protected function validateType($value, $type)$/;"	f
validateTypes	composer.phar	/^public function validateTypes($value, $schema = null, $path = null, $i = null)$/;"	f
validateUri	composer.phar	/^protected function validateUri($schema, $schemaUri = null)$/;"	f
validateUrl	composer.phar	/^private function validateUrl($property, $mandatory = false)$/;"	f
validatedOneType	composer.phar	/^ $validatedOneType = false;$/;"	v
validatedOneType	composer.phar	/^$validatedOneType = true;$/;"	v
validatedTargetBranch	composer.phar	/^ $validatedTargetBranch = $this->versionParser->normalizeBranch(substr($targetBranch, 0, -4));$/;"	v
validator	composer.phar	/^$this->validator = $validator;$/;"	v
validator	composer.phar	/^$validator = $question->getValidator();$/;"	v
validator	composer.phar	/^$validator = function ($input) {$/;"	v
validator	composer.phar	/^$validator = function ($selection) use ($matches, $versionParser) {$/;"	v
validator	composer.phar	/^$validator = new CollectionConstraint($this->checkMode, $this->uriRetriever);$/;"	v
validator	composer.phar	/^$validator = new ConfigValidator($io);$/;"	v
validator	composer.phar	/^$validator = new ConfigValidator($this->getIO());$/;"	v
validator	composer.phar	/^$validator = new EnumConstraint($this->checkMode, $this->uriRetriever);$/;"	v
validator	composer.phar	/^$validator = new FormatConstraint($this->checkMode, $this->uriRetriever);$/;"	v
validator	composer.phar	/^$validator = new NumberConstraint($this->checkMode, $this->uriRetriever);$/;"	v
validator	composer.phar	/^$validator = new ObjectConstraint($this->checkMode, $this->uriRetriever);$/;"	v
validator	composer.phar	/^$validator = new SchemaConstraint($this->checkMode, $this->uriRetriever);$/;"	v
validator	composer.phar	/^$validator = new StringConstraint($this->checkMode, $this->uriRetriever);$/;"	v
validator	composer.phar	/^$validator = new TypeConstraint($this->checkMode);$/;"	v
validator	composer.phar	/^$validator = new TypeConstraint($this->checkMode, $this->uriRetriever);$/;"	v
validator	composer.phar	/^$validator = new UndefinedConstraint($this->checkMode, $this->uriRetriever);$/;"	v
validator	composer.phar	/^$validator = new Validator();$/;"	v
validator	composer.phar	/^private $validator;$/;"	v
value	composer.phar	/^        $value = (int) $value;$/;"	v
value	composer.phar	/^$this->value = $value;$/;"	v
value	composer.phar	/^$this->value = Regex::create($expr);$/;"	v
value	composer.phar	/^$this->value = new Glob($expr);$/;"	v
value	composer.phar	/^$value = $curVal;$/;"	v
value	composer.phar	/^$value = $data;$/;"	v
value	composer.phar	/^$value = $data['repositories'][$matches[1]];$/;"	v
value	composer.phar	/^$value = $fields[1];$/;"	v
value	composer.phar	/^$value = $next;$/;"	v
value	composer.phar	/^$value = $option->isValueOptional() ? $option->getDefault() : true;$/;"	v
value	composer.phar	/^$value = $package->$getter();$/;"	v
value	composer.phar	/^$value = $this->config->get($settingKey, $input->getOption('absolute') ? 0 : Config::RELATIVE_PATHS);$/;"	v
value	composer.phar	/^$value = $this->getComposerEnv('COMPOSER_BIN_COMPAT') ?: $this->config[$key];$/;"	v
value	composer.phar	/^$value = $validator($value);$/;"	v
value	composer.phar	/^$value = $value ?: $author;$/;"	v
value	composer.phar	/^$value = '';$/;"	v
value	composer.phar	/^$value = '='.strtoupper($option->getName());$/;"	v
value	composer.phar	/^$value = '['.$value.']';$/;"	v
value	composer.phar	/^$value = '['.implode(', ', $value).']';$/;"	v
value	composer.phar	/^$value = array($subName => $value);$/;"	v
value	composer.phar	/^$value = array_map(function ($val) {$/;"	v
value	composer.phar	/^$value = fgets($inputStream, 4096);$/;"	v
value	composer.phar	/^$value = fgets($this->inputStream ?: STDIN, 4096);$/;"	v
value	composer.phar	/^$value = isset($data['repositories']) ? $data['repositories'] : array();$/;"	v
value	composer.phar	/^$value = isset($lines[$unmergedRowKey - $line]) ? $lines[$unmergedRowKey - $line] : '';$/;"	v
value	composer.phar	/^$value = json_encode($value);$/;"	v
value	composer.phar	/^$value = null;$/;"	v
value	composer.phar	/^$value = rtrim(shell_exec($command));$/;"	v
value	composer.phar	/^$value = rtrim(shell_exec($exe));$/;"	v
value	composer.phar	/^$value = self::trimAnswer(shell_exec($command));$/;"	v
value	composer.phar	/^$value = sprintf($/;"	v
value	composer.phar	/^$value = substr($fields[1], 0, $index);$/;"	v
value	composer.phar	/^$value = trim($value);$/;"	v
value	composer.phar	/^$value = var_export($value, true);$/;"	v
value	composer.phar	/^private $value;$/;"	v
valueLength	composer.phar	/^$valueLength = 1 + strlen($option->getName()); $/;"	v
values	composer.phar	/^$values = $input->getArgument('setting-value'); $/;"	v
values	composer.phar	/^$values = (array) $values;$/;"	v
values	composer.phar	/^$values = array();$/;"	v
values	composer.phar	/^$values = array_flip($choices);$/;"	v
values	composer.phar	/^$values = array_intersect_key($data, $dep20toOperatorMap);$/;"	v
values	composer.phar	/^$values = array_merge(array_keys($values), array_values($values));$/;"	v
varName	composer.phar	/^$varName = $task['to'];$/;"	v
vars	composer.phar	/^$vars = array($/;"	v
vars	composer.phar	/^$vars = array();$/;"	v
vcsPatterns	composer.phar	/^private static $vcsPatterns = array('.svn', '_svn', 'CVS', '_darcs', '.arch-params', '.monotone', '.bzr', '.git', '.hg');$/;"	v
vendorAlias	composer.phar	/^$this->vendorAlias = isset($repoConfig['vendor-alias']) ? $repoConfig['vendor-alias'] : null;$/;"	v
vendorAlias	composer.phar	/^private $vendorAlias;$/;"	v
vendorComposerDir	composer.phar	/^$vendorComposerDir = $composer->getConfig()->get('vendor-dir').'\/composer';$/;"	v
vendorDir	composer.phar	/^$this->vendorDir = realpath($this->vendorDir);$/;"	v
vendorDir	composer.phar	/^$this->vendorDir = rtrim($composer->getConfig()->get('vendor-dir'), '\/');$/;"	v
vendorDir	composer.phar	/^$vendorDir = $composer->getConfig()->get('vendor-dir');$/;"	v
vendorDir	composer.phar	/^$vendorDir = $config->get('vendor-dir');$/;"	v
vendorDir	composer.phar	/^$vendorDir = $this->config->get('vendor-dir');$/;"	v
vendorDir	composer.phar	/^$vendorDir = dirname(dirname(__FILE__));$/;"	v
vendorDir	composer.phar	/^protected $vendorDir;$/;"	v
vendorPath	composer.phar	/^$vendorPath = $filesystem->normalizePath(realpath($config->get('vendor-dir')));$/;"	v
vendorPathCode	composer.phar	/^$vendorPathCode = $filesystem->findShortestPathCode(realpath($targetDir), $vendorPath, true);$/;"	v
vendorPathCode52	composer.phar	/^$vendorPathCode52 = str_replace('__DIR__', 'dirname(__FILE__)', $vendorPathCode);$/;"	v
vendorPathToTargetDirCode	composer.phar	/^$vendorPathToTargetDirCode = $filesystem->findShortestPathCode($vendorPath, realpath($targetDir), true);$/;"	v
verbose	composer.phar	/^$this->verbose = $io->isVeryVerbose();$/;"	v
verbose	composer.phar	/^$this->verbose = (boolean) $verbose;$/;"	v
verbose	composer.phar	/^$this->verbose = true;$/;"	v
verbose	composer.phar	/^$verbose = $this->verbose;$/;"	v
verbose	composer.phar	/^protected $verbose = false;$/;"	v
verbose	composer.phar	/^protected $verbose;$/;"	v
verbosity	composer.phar	/^$this->verbosity = (int) $level;$/;"	v
verbosity	composer.phar	/^$this->verbosity = null === $verbosity ? self::VERBOSITY_NORMAL : $verbosity;$/;"	v
verbosity	composer.phar	/^$verbosity = StreamOutput::VERBOSITY_NORMAL,$/;"	v
verbosity	composer.phar	/^private $verbosity;$/;"	v
verbosityLevelMap	composer.phar	/^$this->verbosityLevelMap = $verbosityLevelMap + $this->verbosityLevelMap;$/;"	v
verbosityLevelMap	composer.phar	/^private $verbosityLevelMap = array($/;"	v
version	composer.phar	/^ $version = $this->findBestVersionForPackage($input, $requirement['name'], $phpVersion);$/;"	v
version	composer.phar	/^ $version = $this->guessFeatureVersion($packageConfig, $version, $branches, 'git rev-list %candidate%..%branch%', $path);$/;"	v
version	composer.phar	/^ $version = $this->guessFeatureVersion($packageConfig, $version, $branches, 'hg log -r "not ancestors(\\'%candidate%\\') and ancestors(\\'%branch%\\')" --template "{node}\\\\n"', $path);$/;"	v
version	composer.phar	/^ $version = $this->versionParser->normalizeBranch($matches[3]);$/;"	v
version	composer.phar	/^$this->version = $version;$/;"	v
version	composer.phar	/^$version = $aliases[$package->getName()][$version]['alias_normalized'];$/;"	v
version	composer.phar	/^$version = $config['version_normalized'];$/;"	v
version	composer.phar	/^$version = $match[1];$/;"	v
version	composer.phar	/^$version = $matches[1]$/;"	v
version	composer.phar	/^$version = $package->getPrettyVersion();$/;"	v
version	composer.phar	/^$version = $package->getVersion();$/;"	v
version	composer.phar	/^$version = $this->guessGitVersion($packageConfig, $path);$/;"	v
version	composer.phar	/^$version = $this->guessHgVersion($packageConfig, $path);$/;"	v
version	composer.phar	/^$version = $this->normalize($matches[2]);$/;"	v
version	composer.phar	/^$version = $this->versionGuesser->guessVersion($config, getcwd());$/;"	v
version	composer.phar	/^$version = $this->versionParser->normalize($config['version']);$/;"	v
version	composer.phar	/^$version = $this->versionParser->normalizeBranch($branch);$/;"	v
version	composer.phar	/^$version = $this->versionParser->normalizeBranch($candidate);$/;"	v
version	composer.phar	/^$version = $this->versionParser->normalizeBranch($match[1]);$/;"	v
version	composer.phar	/^$version = $versionParser->normalize($override['version']);$/;"	v
version	composer.phar	/^$version = $versionParser->normalize($prettyVersion);$/;"	v
version	composer.phar	/^$version = '';$/;"	v
version	composer.phar	/^$version = '1.0.0';$/;"	v
version	composer.phar	/^$version = 'dev-'.$branch;$/;"	v
version	composer.phar	/^$version = 'dev-'.$match[1];$/;"	v
version	composer.phar	/^$version = 'dev-'.$match[2];$/;"	v
version	composer.phar	/^$version = 'dev-'.$matches[3];$/;"	v
version	composer.phar	/^$version = count($available) ? $available[0]->getPrettyVersion() : phpversion();$/;"	v
version	composer.phar	/^$version = getenv('COMPOSER_ROOT_VERSION');$/;"	v
version	composer.phar	/^$version = implode('.', $semanticVersionParts);$/;"	v
version	composer.phar	/^$version = new Constraint('==', $a->getVersion());$/;"	v
version	composer.phar	/^$version = null;$/;"	v
version	composer.phar	/^$version = preg_replace('{#.+$}i', '', $version);$/;"	v
version	composer.phar	/^$version = preg_replace('{\\D}', '.', $matches[1]);$/;"	v
version	composer.phar	/^$version = strpos($version, '\/') === false ? $version : md5($version);$/;"	v
version	composer.phar	/^$version = trim($version);$/;"	v
version	composer.phar	/^private $version;$/;"	v
version	composer.phar	/^protected $version;$/;"	v
versionCompare	composer.phar	/^public function versionCompare($a, $b, $operator, $compareBranches = false)$/;"	f
versionCompare	composer.phar	/^public function versionCompare(PackageInterface $a, PackageInterface $b, $operator)$/;"	f
versionCompare	composer.phar	/^public function versionCompare(PackageInterface $a, PackageInterface $b, $operator);$/;"	f
versionGuesser	composer.phar	/^$this->versionGuesser = $versionGuesser ?: new VersionGuesser($config, new ProcessExecutor(), $this->versionParser);$/;"	v
versionGuesser	composer.phar	/^$this->versionGuesser = new VersionGuesser($config, $this->process, new VersionParser());$/;"	v
versionGuesser	composer.phar	/^private $versionGuesser;$/;"	v
versionLength	composer.phar	/^$versionLength = max($versionLength, strlen($package->getFullPrettyVersion()));$/;"	v
versionParser	composer.phar	/^ $versionParser = new VersionParser();$/;"	v
versionParser	composer.phar	/^$this->versionParser = $parser ?: new VersionParser();$/;"	v
versionParser	composer.phar	/^$this->versionParser = $parser;$/;"	v
versionParser	composer.phar	/^$this->versionParser = $versionParser;$/;"	v
versionParser	composer.phar	/^$this->versionParser = new VersionParser();$/;"	v
versionParser	composer.phar	/^$this->versionParser = new VersionParser;$/;"	v
versionParser	composer.phar	/^$versionParser = new VersionParser();$/;"	v
versionParser	composer.phar	/^$versionParser = self::$versionParser;$/;"	v
versionParser	composer.phar	/^private $versionParser;$/;"	v
versionParser	composer.phar	/^private static $versionParser;$/;"	v
versionParser	composer.phar	/^protected $versionParser;$/;"	v
versionRegex	composer.phar	/^$versionRegex = 'v?(\\d+)(?:\\.(\\d+))?(?:\\.(\\d+))?(?:\\.(\\d+))?' . self::$modifierRegex . '(?:\\+[^\\s]+)?';$/;"	v
versionSelector	composer.phar	/^ $versionSelector = new VersionSelector($pool);$/;"	v
versionSelector	composer.phar	/^ $versionSelector = new VersionSelector($this->getPool($input));$/;"	v
versions	composer.phar	/^$versions = array($package->getPrettyVersion() => $package->getVersion());$/;"	v
versions	composer.phar	/^$versions = array();$/;"	v
versions	composer.phar	/^$versions = array_filter($versions, function ($version) use ($constraints) {$/;"	v
versions	composer.phar	/^$versions = array_keys(array_reverse($versions));$/;"	v
versions	composer.phar	/^$versions = implode(', ', $versions);$/;"	v
verticalBorderChar	composer.phar	/^$this->verticalBorderChar = $verticalBorderChar;$/;"	v
verticalBorderChar	composer.phar	/^private $verticalBorderChar = '|';$/;"	v
viewDiff	composer.phar	/^protected function viewDiff($path)$/;"	f
visited	composer.phar	/^$visited = array();$/;"	v
vstack	composer.phar	/^$this->vstack = array(null);$/;"	v
vstack	composer.phar	/^$this->vstack = array_slice($this->vstack, 0, - $n);$/;"	v
vstack	composer.phar	/^private $vstack; $/;"	v
w	composer.phar	/^$w = isset($this->pipes[0]) ? array($this->pipes[0]) : null;$/;"	v
wait	composer.phar	/^public function wait($callback = null)$/;"	f
wantHelps	composer.phar	/^$this->wantHelps = false;$/;"	v
wantHelps	composer.phar	/^$this->wantHelps = true;$/;"	v
wantHelps	composer.phar	/^private $wantHelps = false;$/;"	v
warning	composer.phar	/^public function warning($message)$/;"	f
warning	composer.phar	/^public function warning($message);$/;"	f
warnings	composer.phar	/^$this->warnings = $warnings;$/;"	v
warnings	composer.phar	/^$this->warnings = array();$/;"	v
warnings	composer.phar	/^$warnings = array();$/;"	v
warnings	composer.phar	/^$warnings = array_merge($warnings, $loader->getWarnings());$/;"	v
warnings	composer.phar	/^$warnings = array_merge($warnings, $lockErrors);$/;"	v
warnings	composer.phar	/^$warnings = array_merge($warnings, $publishErrors);$/;"	v
warnings	composer.phar	/^private $warnings;$/;"	v
watch1	composer.phar	/^$this->watch1 = $to;$/;"	v
watch1	composer.phar	/^$this->watch1 = count($literals) > 0 ? $literals[0] : 0;$/;"	v
watch1	composer.phar	/^public $watch1;$/;"	v
watch2	composer.phar	/^$this->watch2 = $literal;$/;"	v
watch2	composer.phar	/^$this->watch2 = $to;$/;"	v
watch2	composer.phar	/^$this->watch2 = count($literals) > 1 ? $literals[1] : 0;$/;"	v
watch2	composer.phar	/^public $watch2;$/;"	v
watch2OnHighest	composer.phar	/^public function watch2OnHighest(Decisions $decisions)$/;"	f
watchChains	composer.phar	/^protected $watchChains = array();$/;"	v
watchGraph	composer.phar	/^$this->watchGraph = new RuleWatchGraph;$/;"	v
watchGraph	composer.phar	/^protected $watchGraph;$/;"	v
watchLevel	composer.phar	/^$watchLevel = $level;$/;"	v
watchLevel	composer.phar	/^$watchLevel = 0;$/;"	v
weight	composer.phar	/^$weight = $computeImportance($name);$/;"	v
weight	composer.phar	/^$weight = 0;$/;"	v
weightList	composer.phar	/^$weightList = array();$/;"	v
whatProvides	composer.phar	/^public function whatProvides($name, ConstraintInterface $constraint = null, $mustMatchName = false)$/;"	f
whatProvides	composer.phar	/^public function whatProvides(Pool $pool, $name)$/;"	f
whitelist	composer.phar	/^$this->whitelist = $whitelist;$/;"	v
whitelist	composer.phar	/^$whitelist = array('name', 'description', 'author', 'type', 'homepage', 'require', 'require-dev', 'stability', 'license');$/;"	v
whitelist	composer.phar	/^private $whitelist;$/;"	v
whitelist	composer.phar	/^protected $whitelist = null;$/;"	v
whitelistDependencies	composer.phar	/^$this->whitelistDependencies = (boolean) $updateDependencies;$/;"	v
whitelistDependencies	composer.phar	/^protected $whitelistDependencies = false;$/;"	v
whitelistFromJobs	composer.phar	/^protected function whitelistFromJobs()$/;"	f
whitelistFromPackage	composer.phar	/^protected function whitelistFromPackage(PackageInterface $package)$/;"	f
whitelistPatternRegexp	composer.phar	/^$whitelistPatternRegexp = $this->packageNameToRegexp($packageName);$/;"	v
whitelistUpdateDependencies	composer.phar	/^private function whitelistUpdateDependencies($localRepo, $devMode, array $rootRequires, array $rootDevRequires)$/;"	f
whitelistedMap	composer.phar	/^$this->whitelistedMap = array();$/;"	v
whitelistedMap	composer.phar	/^protected $whitelistedMap;$/;"	v
why	composer.phar	/^$why = $decision[Decisions::DECISION_REASON];$/;"	v
why	composer.phar	/^$why = $this->decisions->lastReason();$/;"	v
why	composer.phar	/^$why = $this->learnedWhy[spl_object_hash($rule)];$/;"	v
why	composer.phar	/^$why = count($this->learnedPool) - 1;$/;"	v
why	composer.phar	/^$why = spl_object_hash($conflictRule);$/;"	v
width	composer.phar	/^ $width = PHP_INT_MAX;$/;"	v
width	composer.phar	/^$width = $this->getColumnWidth($column);$/;"	v
width	composer.phar	/^$width = $this->getColumnWidth($description->getCommands());$/;"	v
width	composer.phar	/^$width = $this->getTerminalWidth() ? $this->getTerminalWidth() - 1 : PHP_INT_MAX;$/;"	v
width	composer.phar	/^$width = 1 << 31;$/;"	v
width	composer.phar	/^$width = max(array_map('strlen', array_keys($choices)));$/;"	v
width	composer.phar	/^$width = max(array_map('strlen', array_keys($question->getChoices())));$/;"	v
widths	composer.phar	/^$widths = array();$/;"	v
widths	composer.phar	/^private $widths = array($/;"	v
windowsFlag	composer.phar	/^$this->windowsFlag = $isWindows;$/;"	v
windowsFlag	composer.phar	/^protected $windowsFlag;$/;"	v
windowsLogin	composer.phar	/^public function windowsLogin($password)$/;"	f
wording	composer.phar	/^static $wording = array($/;"	v
workQueue	composer.phar	/^$workQueue = new \\SplQueue;$/;"	v
workingDir	composer.phar	/^$workingDir = $input->getParameterOption(array('--working-dir', '-d'));$/;"	v
wrapCallback	composer.phar	/^public function wrapCallback(OutputInterface $output, Process $process, $callback = null)$/;"	f
write	composer.phar	/^private function write($blocking, $close)$/;"	f
write	composer.phar	/^protected function write($content, $decorated = false)$/;"	f
write	composer.phar	/^public function write($file, $contents)$/;"	f
write	composer.phar	/^public function write($messages, $newline = false, $type = self::OUTPUT_NORMAL)$/;"	f
write	composer.phar	/^public function write($messages, $newline = false, $type = self::OUTPUT_NORMAL);$/;"	f
write	composer.phar	/^public function write($messages, $newline = true)$/;"	f
write	composer.phar	/^public function write($messages, $newline = true);$/;"	f
write	composer.phar	/^public function write()$/;"	f
write	composer.phar	/^public function write();$/;"	f
write	composer.phar	/^public function write(array $hash, $options = 448)$/;"	f
writeClientSpecToFile	composer.phar	/^public function writeClientSpecToFile($spec)$/;"	f
writeData	composer.phar	/^private function writeData(array $data, array $options)$/;"	f
writeDescription	composer.phar	/^$writeDescription = !$input->getOption('name-only') && !$input->getOption('path') && ($nameLength + ($showVersion ? $versionLength : 0) + 24 <= $width);$/;"	v
writeDocument	composer.phar	/^private function writeDocument(\\DOMDocument $dom)$/;"	f
writeError	composer.phar	/^protected function writeError(OutputInterface $output, \\Exception $error)$/;"	f
writeError	composer.phar	/^public function writeError($messages, $newline = true)$/;"	f
writeError	composer.phar	/^public function writeError($messages, $newline = true);$/;"	f
writeP4ClientSpec	composer.phar	/^public function writeP4ClientSpec()$/;"	f
writePath	composer.phar	/^$writePath = !$input->getOption('name-only') && $input->getOption('path');$/;"	v
writePrompt	composer.phar	/^protected function writePrompt(OutputInterface $output, Question $question)$/;"	f
writeText	composer.phar	/^private function writeText($content, array $options = array())$/;"	f
writeVersion	composer.phar	/^$writeVersion = !$input->getOption('name-only') && !$input->getOption('path') && $showVersion && ($nameLength + $versionLength + 3 <= $width);$/;"	v
writeln	composer.phar	/^public function writeln($messages, $type = self::OUTPUT_NORMAL)$/;"	f
writeln	composer.phar	/^public function writeln($messages, $type = self::OUTPUT_NORMAL);$/;"	f
written	composer.phar	/^$written = fwrite($w[0], $this->inputBuffer, 2 << 18); $/;"	v
written	composer.phar	/^$written = fwrite($w[0], $this->inputBuffer, 2 << 18);$/;"	v
xml	composer.phar	/^ $xml = simplexml_load_string($this->requestContent($origin, $path), "SimpleXMLElement", LIBXML_NOERROR);$/;"	v
xml	composer.phar	/^$xml = $this->requestXml($baseUrl, "\/c\/categories.xml");$/;"	v
xml	composer.phar	/^$xml = $this->requestXml($baseUrl, $categoryPath);$/;"	v
xml	composer.phar	/^$xml = $this->requestXml($baseUrl, $xmlPath);$/;"	v
xml	composer.phar	/^$xml = $this->requestXml($url, "\/channel.xml");$/;"	v
xmlPath	composer.phar	/^$xmlPath = '\/p\/' . strtolower($packageName) . '\/info.xml';$/;"	v
xmlPath	composer.phar	/^$xmlPath = '\/p\/packages.xml';$/;"	v
xmlPath	composer.phar	/^$xmlPath = '\/r\/' . strtolower($packageName) . '\/allreleases.xml';$/;"	v
xpathTest	composer.phar	/^$xpathTest = "ns:servers\/ns:primary\/ns:rest\/ns:baseurl[@type='{$version}']";$/;"	v
yyleng	composer.phar	/^ $yyleng = $this->lexer->yyleng;$/;"	v
yyleng	composer.phar	/^$this->yyleng = strlen($this->yytext);$/;"	v
yyleng	composer.phar	/^$yyleng = 0;$/;"	v
yyleng	composer.phar	/^public $yyleng;$/;"	v
yylineno	composer.phar	/^$this->yylineno = $this->yyleng = 0;$/;"	v
yylineno	composer.phar	/^$yylineno = $this->lexer->yylineno;$/;"	v
yylineno	composer.phar	/^$yylineno = 0;$/;"	v
yylineno	composer.phar	/^public $yylineno;$/;"	v
yylloc	composer.phar	/^$this->yylloc = array($/;"	v
yylloc	composer.phar	/^$this->yylloc = array('first_line' => 1, 'first_column' => 0, 'last_line' => 1, 'last_column' => 0);$/;"	v
yylloc	composer.phar	/^public $yylloc;$/;"	v
yyloc	composer.phar	/^$yyloc = $this->lexer->yylloc;$/;"	v
yytext	composer.phar	/^$this->yytext = $this->matched = $this->match = '';$/;"	v
yytext	composer.phar	/^$this->yytext = '';$/;"	v
yytext	composer.phar	/^$this->yytext = substr($this->yytext, 1, $this->yyleng-2);$/;"	v
yytext	composer.phar	/^$yytext = $this->lexer->yytext;$/;"	v
yytext	composer.phar	/^$yytext = '';$/;"	v
yytext	composer.phar	/^$yytext = preg_replace_callback('{(?:\\\\\\\\["bfnrt\/\\\\\\\\]|\\\\\\\\u[a-fA-F0-9]{4})}', array($this, 'stringInterpolation'), $yytext);$/;"	v
yytext	composer.phar	/^public $yytext;$/;"	v
yyval	composer.phar	/^$yyval = new stdClass;$/;"	v
zip	composer.phar	/^$zip = new \\ZipArchive();$/;"	v
zipArchive	composer.phar	/^$zipArchive = new ZipArchive();$/;"	v
